[
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3545,
    "title": "[Bug]: JSONDecodeError(\"Extra data\", s, end) on embedding_functions.OllamaEmbeddingFunction",
    "body": "### What happened?\n\nHi, I'm using this piece of code to create text embeddings and I get JSONDecodeError when I pass variable _content_data_units that it is an array of strings. I tried to run it with small data array and it don't fails. Also I tested all models you see in the if, and the behaviour is the same, manually it works, with this code, don't. If I parse same texts in OpenAIEmbeddingFunction and I have no error.\n\n\n```py\nimport chromadb\nfrom chromadb.config import Settings\nimport chromadb.utils.embedding_functions as embedding_functions\n\nif database.model in (\"text-embedding-3-small\", \"text-embedding-3-large\"):\n    embed_functions = embedding_functions.OpenAIEmbeddingFunction(\n        api_key=settings.OPENAI_API_KEY,\n        model_name=database.model\n    )\nelif database.model in (\"mxbai-embed-large\", \"nomic-embed-text\", \"paraphrase-multilingual\"):\n    embed_functions = embedding_functions.OllamaEmbeddingFunction(\n        model_name=database.model,\n        url=\"http://my-server-ip-non-localhost:11434\",\n    )\n\nvectors = embed_functions(_content_data_units)\n```\n\n\nI tried to parse data_units strings to avoid special characters and still error happens. Here you have the code I used to escape and parse data. It goes before the other code:\n\n```py\nvalid_content_data_units = []\nfor i, chunk in enumerate(_content_data_units):\n    if isinstance(chunk, str) and chunk.strip():  # check string is not empty\n        escaped_chunk = chunk.replace(\"'\", \"\\\\'\")\n        valid_content_data_units.append(escaped_chunk)\n    else:\n        print(f\"Chunk not valid {i}: {chunk} (type: {type(chunk)})\")\n_content_data_units = valid_content_data_units\n```\n\n\n### Versions\n\nChromadb 0.6.3, python 3.11, Debian 12.6\n\n### Relevant log output\n\n```shell\nFile \"/home/laura/dev/kiosk/web/views_rag.py\", line 326, in update_rag_database\n    vectors = embed_functions(_content_data_units)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/laura/dev/kiosk/venv/lib/python3.11/site-packages/chromadb/api/types.py\", line 466, in __call__\n    result = call(self, input)\n             ^^^^^^^^^^^^^^^^^\n  File \"/home/laura/dev/kiosk/venv/lib/python3.11/site-packages/chromadb/utils/embedding_functions/ollama_embedding_function.py\", line 45, in __call__\n    embeddings = [\n             ^^^^^\n  File \"/home/laura/dev/kiosk/venv/lib/python3.11/site-packages/chromadb/utils/embedding_functions/ollama_embedding_function.py\", line 48, in <listcomp>\n    ).json()\n      ^^^^^^\n  File \"/home/laura/dev/kiosk/venv/lib/python3.11/site-packages/httpx/_models.py\", line 766, in json\n    return jsonlib.loads(self.content, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/json/decoder.py\", line 340, in decode\n    raise JSONDecodeError(\"Extra data\", s, end)\njson.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)\n```",
    "state": "closed",
    "created_at": "2025-01-23T17:36:42+00:00",
    "closed_at": "2025-01-23T23:18:40+00:00",
    "updated_at": "2025-01-23T23:18:40+00:00",
    "author": "blackhold",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "blackhold",
    "resolution_time_hours": 5.6994444444444445,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-23T19:33:18+00:00",
        "body": "@blackhold,\n\nWe've only recently moved to the official ollama client #2946 , so until the change makes it in the next release, try the following:\n\n```py\nembed_functions = embedding_functions.OllamaEmbeddingFunction(\n        model_name=database.model,\n        url=\"http://my-server-ip-non-localhost:11434/api/embeddings\",\n    )\n```\n"
      },
      {
        "author": "blackhold",
        "created_at": "2025-01-23T23:18:10+00:00",
        "body": "Nice! it worked! Many thanks! :)"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3545"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3541,
    "title": "[Bug]: TypeError: SegmentAPI.get_or_create_collection() got an unexpected keyword argument 'embedding_function'",
    "body": "### What happened?\n\n```py\nfrom chromadb.api import Collection, Embeddings\n\ndef empty_chroma_collection_2(collection:Collection):\n    collection_name = collection.name\n    client = collection._client\n    metadata = collection.metadata\n    embedding_function = collection._embedding_function\n    client.delete_collection(collection_name)\n    new_collection = client.get_or_create_collection(name=collection_name,\n                                                    metadata=metadata,\n                                                    embedding_function=embedding_function)\n    size_of_new_collection = new_collection.count()\n    logger.info(f'Collection {collection_name} emptied. Size of new collection: {size_of_new_collection}')\n    return new_collection\n```\n \n### Versions\n\nChroma v0.5.23, Python v0.3.11, OS windows 10\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\n  File \"<frozen importlib._bootstrap>\", line 1232, in _handle_fromlist\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\n  File \"D:\\AIGC\\idataai_py\\services_router\\query2sql_service.py\", line 12, in <module>\n    from services.s2sql.run import text2sql_agent_router\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\run.py\", line 48, in <module>\n    text2sql_agent.reload_setting(sql_ids, sql_exemplars, TEXT2DSL_EXAMPLE_NUM, TEXT2DSL_FEWSHOTS_NUM, TEXT2DSL_SELF_CONSISTENCY_NUM)\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\sql_agent.py\", line 478, in reload_setting\n    self.sql_example_prompter.reload_few_shot_example(sql_example_ids, sql_example_units)\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\constructor.py\", line 51, in reload_few_shot_example\n    self.few_shot_retriever.empty_query_collection()\n  File \"D:\\AIGC\\idataai_py\\services\\query_retrieval\\retriever.py\", line 70, in empty_query_collection\n    self.collection = empty_chroma_collection_2(self.collection)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\AIGC\\idataai_py\\utils\\chromadb_utils.py\", line 25, in empty_chroma_collection_2\n    new_collection = client.get_or_create_collection(name=collection_name,\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 150, in wrapper\n    return f(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\api\\segment.py\", line 103, in wrapper\n    return self._rate_limit_enforcer.rate_limit(func)(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\rate_limit\\simple_rate_limit\\__init__.py\", line 23, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\nTypeError: SegmentAPI.get_or_create_collection() got an unexpected keyword argument 'embedding_function'\npython-BaseException\n```",
    "state": "closed",
    "created_at": "2025-01-23T06:22:29+00:00",
    "closed_at": "2025-01-24T03:11:37+00:00",
    "updated_at": "2025-01-24T03:11:37+00:00",
    "author": "Rainismer",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "Rainismer",
    "resolution_time_hours": 20.81888888888889,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-23T13:41:48+00:00",
        "body": "@Rainismer, this seems like the wrong way to use collection:\n\n```py\nclient = collection._client\n```\n\nCan you not pass the actual client that created the collection? `_client` is Chroma internals and can change at any point."
      },
      {
        "author": "Rainismer",
        "created_at": "2025-01-24T03:11:31+00:00",
        "body": "@tazarov Thank you for your help! I solved the problem!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3541"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3521,
    "title": "[Bug]: /docs does not execute / use V2 of API",
    "body": "### What happened?\n\nWhen I try to execute the V2 API, the fastapi just executes V1 ( see screenshot.\n\n![Image](https://github.com/user-attachments/assets/c5ea83be-d9c7-4e5c-8d0f-4cefe15efa0f)\n\n### Versions\n\n0.6.3 OAS 3.1\n\n\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-22T13:06:24+00:00",
    "closed_at": "2025-01-22T13:19:19+00:00",
    "updated_at": "2025-01-22T13:19:21+00:00",
    "author": "AquaMCU",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "AquaMCU",
    "resolution_time_hours": 0.2152777777777778,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-22T13:17:51+00:00",
        "body": "@AquaMCU, thanks for raising this. Fixed in #3522, we'll roll it out in next release."
      },
      {
        "author": "AquaMCU",
        "created_at": "2025-01-22T13:19:19+00:00",
        "body": "Wow. Fast response! I will close this ticket than."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3521"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3504,
    "title": "[Install issue]: Docker documentation missing instruction for persistent storage",
    "body": "### What happened?\n\nI'm planning to run chromadb and would like to persist the data over container restarts. I find no documentation on what directory (or directories) in the docker container that must be placed on persistent volumes.\n\n### Versions\n\nChroma 0.6.3\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-17T07:42:15+00:00",
    "closed_at": "2025-01-17T08:21:50+00:00",
    "updated_at": "2025-01-17T08:21:51+00:00",
    "author": "fredrik-jansson-se",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 0.6597222222222222,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-17T07:44:43+00:00",
        "body": "@fredrik-jansson-se, thanks for this. I think you'll find the cookbook useful - https://cookbook.chromadb.dev/running/running-chroma/"
      },
      {
        "author": "fredrik-jansson-se",
        "created_at": "2025-01-17T07:56:16+00:00",
        "body": "Got it, thank you!!"
      },
      {
        "author": "fredrik-jansson-se",
        "created_at": "2025-01-17T08:00:32+00:00",
        "body": "Works like a charm, thanks!"
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-17T08:21:50+00:00",
        "body": "Closing as done and we'll soon add similar examples to official docs"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3504"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3498,
    "title": "[Bug]: Issue with Docker Image - InvalidArgumentError in /api/v1/collections",
    "body": "### What happened?\n\nError on collections with docker container\n\nhttp://localhost:8000/api/v1/collections\n\n{\"error\":\"InvalidArgumentError\",\"message\":\"cannot unpack non-iterable coroutine object\"}\n\n\nsteps to reproduce\n\n`docker pull ghcr.io/chroma-core/chroma:0.6.3`\n\n`docker run -p 8000:8000 chromadb/chroma:0.6.3`\n\non localhost\n`http://localhost:8000/api/v1/collections`\n\nshould return an empty array [], but throws an error.\n\n### Versions\n\nChroma versions ...\n> Issue from  version 0.6.3\n> Last working version 0.6.2\n\nrunning on ...\n> Apple M1 Sequoia 15.2\n> Docker 4.37.2 (179585) ( the same with rancher )\n\n### Relevant log output\n\n```shell\n2025-01-16 20:41:08 Starting 'uvicorn chromadb.app:app' with args: --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30\n2025-01-16 20:41:12 WARNING:  [16-01-2025 18:41:12] chroma_server_nofile is set to 65536, but this is less than current soft limit of 1048576. chroma_server_nofile will not be set.\n2025-01-16 20:41:13 INFO:     [16-01-2025 18:41:13] Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component System\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component OpenTelemetryClient\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component SqliteDB\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component SimpleQuotaEnforcer\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component Posthog\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component SimpleRateLimitEnforcer\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component LocalSegmentManager\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component LocalExecutor\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component SegmentAPI\n2025-01-16 20:41:13 DEBUG:    [16-01-2025 18:41:13] Starting component SimpleAsyncRateLimitEnforcer\n2025-01-16 20:41:13 INFO:     [16-01-2025 18:41:13] Started server process [1]\n2025-01-16 20:41:13 INFO:     [16-01-2025 18:41:13] Waiting for application startup.\n2025-01-16 20:41:13 INFO:     [16-01-2025 18:41:13] Application startup complete.\n2025-01-16 20:41:13 INFO:     [16-01-2025 18:41:13] Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n2025-01-16 20:41:18 INFO:     [16-01-2025 18:41:18] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:19 INFO:     [16-01-2025 18:41:19] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:19 INFO:     [16-01-2025 18:41:19] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:19 INFO:     [16-01-2025 18:41:19] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:20 INFO:     [16-01-2025 18:41:20] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:20 INFO:     [16-01-2025 18:41:20] 172.17.0.1:64492 - \"GET /api/v1/collections HTTP/1.1\" 400\n2025-01-16 20:41:19 /usr/local/lib/python3.11/site-packages/anyio/_backends/_asyncio.py:958: RuntimeWarning: coroutine 'FastAPI.auth_and_get_tenant_and_database_for_request' was never awaited\n2025-01-16 20:41:19   result = None\n2025-01-16 20:41:19 Object allocated at (most recent call last):\n2025-01-16 20:41:19   File \"/usr/local/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", lineno 962\n2025-01-16 20:41:19     result = context.run(func, *args)\n2025-01-16 20:55:28 INFO:     [16-01-2025 18:55:28] 172.17.0.1:63334 - \"GET /api/v1 HTTP/1.1\" 200\n```",
    "state": "closed",
    "created_at": "2025-01-16T19:09:12+00:00",
    "closed_at": "2025-01-16T19:40:05+00:00",
    "updated_at": "2025-01-29T09:01:35+00:00",
    "author": "ghDoo",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 0.5147222222222222,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-16T19:35:18+00:00",
        "body": "@ghDoo, I can confirm the bug is 100% reproducible on API v1. Please note that v1 API is deprecated and will be removed in the future.\n\nThe issue is related to this PR - #3477\n\nIs there any chance that you can use v2 API? Using the latest `chromadb` or `chromadb-client` will solve this problem."
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-16T19:40:05+00:00",
        "body": "@ghDoo If you want to use newer version of Chroma you will have to use the V2 API. For your case the correct route is `/api/v2/tenants/{tenant}/databases/{database_name}/collections`. If you don't have custom tenants and database this will be: `/api/v2/tenants/default_tenant/databases/default_database/collections`"
      },
      {
        "author": "ghDoo",
        "created_at": "2025-01-16T21:47:54+00:00",
        "body": "Yes, that worked fine, thank you both for your time :) "
      },
      {
        "author": "cincuranet",
        "created_at": "2025-01-29T08:29:42+00:00",
        "body": "~Is there a plan to fix this? I know v1 API is deprecated, but given this happened on point release, it would be nice to have this fixed in 0.6.4 (or similar point release).~\n\nI see #3514 now. Hope it gets merged soon followed with a release."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3498"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3493,
    "title": "importlib.metadata.PackageNotFoundError: No package metadata was found for chromadb",
    "body": "While utilizing docker's latest image I got issues as follows\n\n`importlib.metadata.PackageNotFoundError: No package metadata was found for chromadb`\n\nHere is the complete traceback,\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 111, in receive\n    return self.receive_nowait()\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 106, in receive_nowait\n    raise WouldBlock\nanyio.WouldBlock\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 124, in receive\n    return receiver.item\n           ^^^^^^^^^^^^^\nAttributeError: 'MemoryObjectItemReceiver' object has no attribute 'item'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 157, in call_next\n    message = await recv_stream.receive()\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 126, in receive\n    raise EndOfStream\nanyio.EndOfStream\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/chroma/chromadb/server/fastapi/__init__.py\", line 120, in catch_exceptions_middleware\n    return await call_next(request)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 163, in call_next\n    raise app_exc\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 149, in coro\n    await self.app(scope, receive_or_disconnect, send_no_error)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 185, in __call__\n    with collapse_excgroups():\n  File \"/usr/local/lib/python3.11/contextlib.py\", line 158, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/_utils.py\", line 82, in collapse_excgroups\n    raise exc\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 187, in __call__\n    response = await self.dispatch_func(request, call_next)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/server/fastapi/__init__.py\", line 144, in check_http_version_middleware\n    return await call_next(request)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 163, in call_next\n    raise app_exc\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 149, in coro\n    await self.app(scope, receive_or_disconnect, send_no_error)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 715, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 735, in app\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 288, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 76, in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 73, in app\n    response = await f(request)\n               ^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/fastapi/applications.py\", line 1009, in openapi\n    return JSONResponse(self.openapi())\n                        ^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/server/fastapi/__init__.py\", line 246, in generate_openapi\n    version=importlib.metadata.version(\"chromadb\"),\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/importlib/metadata/__init__.py\", line 1009, in version\n    return distribution(distribution_name).version\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/importlib/metadata/__init__.py\", line 982, in distribution\n    return Distribution.from_name(distribution_name)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/importlib/metadata/__init__.py\", line 565, in from_name\n    raise PackageNotFoundError(name)\nimportlib.metadata.PackageNotFoundError: No package metadata was found for chromadb\nINFO:     [15-01-2025 03:00:09] 172.17.0.1:60326 - \"GET /openapi.json HTTP/1.1\" 500\n\n```\n\nAlso, while opening swagger docs it shows something like -\n\n![Image](https://github.com/user-attachments/assets/a027c2f5-7ec6-44b9-8da0-fb48a4372777)",
    "state": "closed",
    "created_at": "2025-01-15T03:07:46+00:00",
    "closed_at": "2025-01-16T20:47:03+00:00",
    "updated_at": "2025-01-21T09:02:36+00:00",
    "author": "Evergreenies",
    "author_type": "User",
    "comments_count": 5,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 41.65472222222222,
    "first_comments": [
      {
        "author": "Evergreenies",
        "created_at": "2025-01-15T03:32:11+00:00",
        "body": "FYI, Adding dependency `chromadb==0.6.3` in `requirements.txt` resolved my issue."
      },
      {
        "author": "robix73sicily",
        "created_at": "2025-01-18T21:01:46+00:00",
        "body": "> FYI, Adding dependency `chromadb==0.6.3` in `requirements.txt` resolved my issue.\n\nHello, please can you exaplain where i can find this requirements.txt is and what exactly should be written? i have the same issue. "
      },
      {
        "author": "Evergreenies",
        "created_at": "2025-01-19T00:25:10+00:00",
        "body": "Hello @robix73sicily , @tazarov has already fixed this issue in his PR #3500. For now, I would suggest you use the 0.6.1 version else you need to pull the latest changes in your local and spin up the docker service."
      },
      {
        "author": "yosiasz",
        "created_at": "2025-01-20T23:34:49+00:00",
        "body": "does not seem like it is fixed so went back to 0.6.2"
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-21T09:01:41+00:00",
        "body": "> does not seem like it is fixed so went back to 0.6.2\n\n@yosiasz, it has not been released quite yet. It will with `0.6.4` though. If you need it sooner rather than later you can always use the latest `main`"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3493"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3484,
    "title": "[Bug]: Vertex AI embedding API response parsing in Chroma DB raises error.",
    "body": "In [Vertex AI text embedding API docs](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api#response_body), `prediction`'s value is `List`. However, `GoogleVertexEmbeddingFunction` in [google_embedding_function.py](https://github.com/chroma-core/chroma/blob/9ee24fdf014651f4ac8d5b0a96c1b184719212de/chromadb/utils/embedding_functions/google_embedding_function.py#L108) parses it as dictionary. \n\nThis raises `TypeError: list indices must be integers or slices, not str` while calling `GoogleVertexEmbeddingFunction`. \n\n",
    "state": "closed",
    "created_at": "2025-01-14T02:45:41+00:00",
    "closed_at": "2025-01-14T20:33:31+00:00",
    "updated_at": "2025-01-15T10:30:30+00:00",
    "author": "sw32-seo",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 17.79722222222222,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2025-01-14T20:33:31+00:00",
        "body": "Duplicate of #1995 "
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-15T09:31:36+00:00",
        "body": "@sw32-seo, while we work on this there are couple ways to unblock you:\n\n- If you use Langchain🦜🔗 in your project you can use our adapter and then use the [Langchain🦜🔗 native's VertexAI EF.](https://python.langchain.com/docs/integrations/text_embedding/google_vertex_ai_palm/). Chroma adapter for Langchain🦜🔗 Embeddings - https://cookbook.chromadb.dev/integrations/langchain/embeddings/#__tabbed_1_1\n- You can use `chromadbx` (an extension package to Chroma) that uses google's `vertexai` package under the hood an allows for various ways of auth have a look here - https://github.com/amikos-tech/chromadbx/blob/main/docs/embeddings.md#auth-with-api-key\n\n\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3484"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3474,
    "title": "[Bug]: problem with count",
    "body": "### What happened?\n\nI have chroma collection created like that:\n``` \ndb.get_or_create_collection(\n    name=col_name,\n    metadata={\"hsnw:space\": \"cosine, \"hnsw:M\": 1024,\"hnsw:ef\": 64}\n)\n``` \n\nThen i try to check number of elements after filling with vectors and metadatas\n\n```\nfrom chromadb import PersistentClient\ndb = PersistentClient()\ncollection = db.get_collection(\"col_name\")\ncollection.count()\n```\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/chroma/chromadb/api/models/Collection.py\", line 102, in count\n    return self._client._count(collection_id=self.id)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/telemetry/opentelemetry/__init__.py\", line 127, in wrapper\n    return f(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/api/segment.py\", line 646, in _count\n    metadata_segment = self._manager.get_segment(collection_id, MetadataReader)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/segment/impl/manager/local.py\", line 186, in get_segment\n    segment = self._get_segment_sysdb(collection_id, scope)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/chroma/chromadb/segment/impl/manager/local.py\", line 173, in _get_segment_sysdb\n    segment = next(filter(lambda s: s[\"type\"] in known_types, segments))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nStopIteration\n```\n\n\n\n### Versions\n\nchroma verision 0.4.24\npython 3.10.12\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-13T11:00:47+00:00",
    "closed_at": "2025-01-14T20:33:57+00:00",
    "updated_at": "2025-01-14T20:33:58+00:00",
    "author": "ChocoL0rd",
    "author_type": "User",
    "comments_count": 8,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 33.55277777777778,
    "first_comments": [
      {
        "author": "ChocoL0rd",
        "created_at": "2025-01-13T12:25:55+00:00",
        "body": "All these happens in docker container. There is an app that creates db and collection somewhere in the code and fills it. Then i went inside the container and checked number of elements. It caused error. \nI use hnsw:M and hnsw:ef to eliminate exception \"Cannot return the results in a contigious 2D array. Probably ef or M is too small\""
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-14T10:14:16+00:00",
        "body": "hey @ChocoL0rd, you've listed two errors:\n\n- Missing segments, `StopeIteration` error is raised on an empty iterator which the `filter` function returns. The reason for missing segments are various, one is that the collection is no longer with the same ID or has been removed in a concurrent transaction. You can try [`chops`](https://github.com/amikos-tech/chromadb-ops) - `chops db info <persist_dir>` to get some more insights into what's happening with your chroma persistent dir\n- The second error (`Cannot return the results in a contigious 2D array. Probably ef or M is too small`) also has a number of reasons e.g. your query is too far from any of the items, all/most of your persisted embeddings have been delete. Again `chops` can help us gain a bit more visibility as to what is and isn't in your HNSW index which returns the error. There is a related issue to track this problem -  #2620 \n\n"
      },
      {
        "author": "ChocoL0rd",
        "created_at": "2025-01-14T10:28:44+00:00",
        "body": "```\n chops db info chroma\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/local/lib/python3.11/site-packages/chroma_ops/db_info.py:323 in command                     │\n│                                                                                                  │\n│   320 │   │   help=\"Redact sensitive data such as paths and names\",                              │\n│   321 │   ),                                                                                     │\n│   322 ) -> None:                                                                                 │\n│ ❱ 323 │   info(                                                                                  │\n│   324 │   │   persist_dir,                                                                       │\n│   325 │   │   skip_collection_names=skip_collection_names,                                       │\n│   326 │   │   privacy_mode=privacy_mode,                                                         │\n│                                                                                                  │\n│ ╭───────────── locals ─────────────╮                                                             │\n│ │           persist_dir = 'chroma' │                                                             │\n│ │          privacy_mode = False    │                                                             │\n│ │ skip_collection_names = None     │                                                             │\n│ ╰──────────────────────────────────╯                                                             │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chroma_ops/db_info.py:39 in info                         │\n│                                                                                                  │\n│    36 │   persist_dir_size = sizeof_fmt(get_dir_size(persist_dir))                               │\n│    37 │   export_data[\"persist_dir_size\"] = persist_dir_size                                     │\n│    38 │   client = chromadb.PersistentClient(path=persist_dir)                                   │\n│ ❱  39 │   collection_count = client.count_collections()                                          │\n│    40 │   export_data[\"collection_count\"] = collection_count                                     │\n│    41 │   collection_data = {}                                                                   │\n│    42                                                                                            │\n│                                                                                                  │\n│ ╭────────────────────────────────────── locals ───────────────────────────────────────╮          │\n│ │        chroma_version = '0.6.2'                                                     │          │\n│ │                client = <chromadb.api.client.Client object at 0x72e872a37690>       │          │\n│ │               console = <console width=211 ColorSystem.STANDARD>                    │          │\n│ │           export_data = {'chroma_version': '0.6.2', 'persist_dir_size': '668.1MiB'} │          │\n│ │           persist_dir = 'chroma'                                                    │          │\n│ │      persist_dir_size = '668.1MiB'                                                  │          │\n│ │          privacy_mode = False                                                       │          │\n│ │ skip_collection_names = None                                                        │          │\n│ ╰─────────────────────────────────────────────────────────────────────────────────────╯          │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/api/client.py:131 in count_collections          │\n│                                                                                                  │\n│   128 │                                                                                          │\n│   129 │   @override                                                                              │\n│   130 │   def count_collections(self) -> int:                                                    │\n│ ❱ 131 │   │   return self._server.count_collections(                                             │\n│   132 │   │   │   tenant=self.tenant, database=self.database                                     │\n│   133 │   │   )                                                                                  │\n│   134                                                                                            │\n│                                                                                                  │\n│ ╭─────────────────────────── locals ───────────────────────────╮                                 │\n│ │ self = <chromadb.api.client.Client object at 0x72e872a37690> │                                 │\n│ ╰──────────────────────────────────────────────────────────────╯                                 │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:150 in      │\n│ wrapper                                                                                          │\n│                                                                                                  │\n│   147 │   │   │   def wrapper(*args, **kwargs):  # type: ignore[no-untyped-def]                  │\n│   148 │   │   │   │   global tracer, granularity                                                 │\n│   149 │   │   │   │   if trace_granularity < granularity:                                        │\n│ ❱ 150 │   │   │   │   │   return f(*args, **kwargs)                                              │\n│   151 │   │   │   │   if not tracer:                                                             │\n│   152 │   │   │   │   │   return f(*args, **kwargs)                                              │\n│   153 │   │   │   │   with tracer.start_as_current_span(trace_name, attributes=attributes):      │\n│                                                                                                  │\n│ ╭───────────────────────────────────── locals ──────────────────────────────────────╮            │\n│ │              args = (<chromadb.api.segment.SegmentAPI object at 0x72e8938983d0>,) │            │\n│ │        attributes = None                                                          │            │\n│ │            kwargs = {'tenant': 'default_tenant', 'database': 'default_database'}  │            │\n│ │ trace_granularity = <OpenTelemetryGranularity.OPERATION: 'operation'>             │            │\n│ │        trace_name = 'SegmentAPI.count_collections'                                │            │\n│ ╰───────────────────────────────────────────────────────────────────────────────────╯            │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/api/segment.py:103 in wrapper                   │\n│                                                                                                  │\n│   100 │   @wraps(func)                                                                           │\n│   101 │   def wrapper(*args: Any, **kwargs: Any) -> Any:                                         │\n│   102 │   │   self = args[0]                                                                     │\n│ ❱ 103 │   │   return self._rate_limit_enforcer.rate_limit(func)(*args, **kwargs)                 │\n│   104 │                                                                                          │\n│   105 │   return wrapper  # type: ignore                                                         │\n│   106                                                                                            │\n│                                                                                                  │\n│ ╭──────────────────────────────── locals ────────────────────────────────╮                       │\n│ │   args = (<chromadb.api.segment.SegmentAPI object at 0x72e8938983d0>,) │                       │\n│ │ kwargs = {'tenant': 'default_tenant', 'database': 'default_database'}  │                       │\n│ │   self = <chromadb.api.segment.SegmentAPI object at 0x72e8938983d0>    │                       │\n│ ╰────────────────────────────────────────────────────────────────────────╯                       │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/rate_limit/simple_rate_limit/__init__.py:23 in  │\n│ wrapper                                                                                          │\n│                                                                                                  │\n│   20 │   def rate_limit(self, func: T) -> T:                                                     │\n│   21 │   │   @wraps(func)                                                                        │\n│   22 │   │   def wrapper(*args: Any, **kwargs: Any) -> Any:                                      │\n│ ❱ 23 │   │   │   return func(*args, **kwargs)                                                    │\n│   24 │   │                                                                                       │\n│   25 │   │   return wrapper  # type: ignore                                                      │\n│   26                                                                                             │\n│                                                                                                  │\n│ ╭──────────────────────────────── locals ────────────────────────────────╮                       │\n│ │   args = (<chromadb.api.segment.SegmentAPI object at 0x72e8938983d0>,) │                       │\n│ │ kwargs = {'tenant': 'default_tenant', 'database': 'default_database'}  │                       │\n│ ╰────────────────────────────────────────────────────────────────────────╯                       │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/api/segment.py:331 in count_collections         │\n│                                                                                                  │\n│   328 │   │   database: str = DEFAULT_DATABASE,                                                  │\n│   329 │   ) -> int:                                                                              │\n│   330 │   │   collection_count = len(                                                            │\n│ ❱ 331 │   │   │   self._sysdb.get_collections(tenant=tenant, database=database)                  │\n│   332 │   │   )                                                                                  │\n│   333 │   │                                                                                      │\n│   334 │   │   return collection_count                                                            │\n│                                                                                                  │\n│ ╭─────────────────────────────── locals ────────────────────────────────╮                        │\n│ │ database = 'default_database'                                         │                        │\n│ │     self = <chromadb.api.segment.SegmentAPI object at 0x72e8938983d0> │                        │\n│ │   tenant = 'default_tenant'                                           │                        │\n│ ╰───────────────────────────────────────────────────────────────────────╯                        │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/telemetry/opentelemetry/__init__.py:150 in      │\n│ wrapper                                                                                          │\n│                                                                                                  │\n│   147 │   │   │   def wrapper(*args, **kwargs):  # type: ignore[no-untyped-def]                  │\n│   148 │   │   │   │   global tracer, granularity                                                 │\n│   149 │   │   │   │   if trace_granularity < granularity:                                        │\n│ ❱ 150 │   │   │   │   │   return f(*args, **kwargs)                                              │\n│   151 │   │   │   │   if not tracer:                                                             │\n│   152 │   │   │   │   │   return f(*args, **kwargs)                                              │\n│   153 │   │   │   │   with tracer.start_as_current_span(trace_name, attributes=attributes):      │\n│                                                                                                  │\n│ ╭────────────────────────────────────── locals ──────────────────────────────────────╮           │\n│ │              args = (<chromadb.db.impl.sqlite.SqliteDB object at 0x72e872a37c50>,) │           │\n│ │        attributes = None                                                           │           │\n│ │            kwargs = {'tenant': 'default_tenant', 'database': 'default_database'}   │           │\n│ │ trace_granularity = <OpenTelemetryGranularity.ALL: 'all'>                          │           │\n│ │        trace_name = 'SqlSysDB.get_collections'                                     │           │\n│ ╰────────────────────────────────────────────────────────────────────────────────────╯           │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/db/mixins/sysdb.py:466 in get_collections       │\n│                                                                                                  │\n│   463 │   │   │   │   │   # configuration stored in the database. This non-destructively migra   │\n│   464 │   │   │   │   │   # the collection to have a configuration, and takes into account any   │\n│   465 │   │   │   │   │   # HNSW params that might be in the existing metadata.                  │\n│ ❱ 466 │   │   │   │   │   configuration = self._insert_config_from_legacy_params(                │\n│   467 │   │   │   │   │   │   collection_id, metadata                                            │\n│   468 │   │   │   │   │   )                                                                      │\n│   469                                                                                            │\n│                                                                                                  │\n│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │\n│ │   by_collection = <itertools.groupby object at 0x72e8724067a0>                               │ │\n│ │   collection_id = '506ea688-0c51-4351-a50b-b1f81a7a47a6'                                     │ │\n│ │ collection_rows = <itertools._grouper object at 0x72e87240a680>                              │ │\n│ │     collections = []                                                                         │ │\n│ │   collections_t = Table('collections')                                                       │ │\n│ │             cur = <sqlite3.Cursor object at 0x72e8724004c0>                                  │ │\n│ │        database = 'default_database'                                                         │ │\n│ │     databases_t = Table('databases')                                                         │ │\n│ │       dimension = None                                                                       │ │\n│ │              id = UUID('506ea688-0c51-4351-a50b-b1f81a7a47a6')                               │ │\n│ │           limit = None                                                                       │ │\n│ │        metadata = {'hnsw:M': 1024, 'hnsw:ef': 64, 'hsnw:space': 'cosine'}                    │ │\n│ │      metadata_t = Table('collection_metadata')                                               │ │\n│ │            name = 'embeds'                                                  │ │\n│ │          offset = None                                                                       │ │\n│ │          params = ('default_database', 'default_tenant')                                     │ │\n│ │               q = SELECT                                                                     │ │\n│ │                   \"collections\".\"id\",\"collections\".\"name\",\"collections\".\"config_json_str\",\"… │ │\n│ │                   FROM \"collections\" LEFT JOIN \"collection_metadata\" ON                      │ │\n│ │                   \"collections\".\"id\"=\"collection_metadata\".\"collection_id\" LEFT JOIN         │ │\n│ │                   \"databases\" ON \"collections\".\"database_id\"=\"databases\".\"id\" WHERE          │ │\n│ │                   \"collections\".\"database_id\"=(SELECT \"id\" FROM \"databases\" WHERE \"name\"=?   │ │\n│ │                   AND \"tenant_id\"=?) ORDER BY \"collections\".\"id\"                             │ │\n│ │            rows = [                                                                          │ │\n│ │                   │   (                                                                      │ │\n│ │                   │   │   '506ea688-0c51-4351-a50b-b1f81a7a47a6',                            │ │\n│ │                   │   │   'embeds',                                         │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   'default_database',                                                │ │\n│ │                   │   │   'default_tenant',                                                  │ │\n│ │                   │   │   'hnsw:M',                                                          │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   1024,                                                              │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   ... +1                                                             │ │\n│ │                   │   ),                                                                     │ │\n│ │                   │   (                                                                      │ │\n│ │                   │   │   '506ea688-0c51-4351-a50b-b1f81a7a47a6',                            │ │\n│ │                   │   │   'embeds',                                         │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   'default_database',                                                │ │\n│ │                   │   │   'default_tenant',                                                  │ │\n│ │                   │   │   'hnsw:ef',                                                         │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   64,                                                                │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   ... +1                                                             │ │\n│ │                   │   ),                                                                     │ │\n│ │                   │   (                                                                      │ │\n│ │                   │   │   '506ea688-0c51-4351-a50b-b1f81a7a47a6',                            │ │\n│ │                   │   │   'embeds',                                         │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   'default_database',                                                │ │\n│ │                   │   │   'default_tenant',                                                  │ │\n│ │                   │   │   'hsnw:space',                                                      │ │\n│ │                   │   │   'cosine',                                                          │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   None,                                                              │ │\n│ │                   │   │   ... +1                                                             │ │\n│ │                   │   )                                                                      │ │\n│ │                   ]                                                                          │ │\n│ │            self = <chromadb.db.impl.sqlite.SqliteDB object at 0x72e872a37c50>                │ │\n│ │             sql = 'SELECT                                                                    │ │\n│ │                   \"collections\".\"id\",\"collections\".\"name\",\"collections\".\"config_json_str\",\"… │ │\n│ │          tenant = 'default_tenant'                                                           │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/db/mixins/sysdb.py:872 in                       │\n│ _insert_config_from_legacy_params                                                                │\n│                                                                                                  │\n│   869 │   │   collections_t = Table(\"collections\")                                               │\n│   870 │   │                                                                                      │\n│   871 │   │   # Get any existing HNSW params from the metadata (works regardless whether metad   │\n│ ❱ 872 │   │   hnsw_metadata_params = PersistentHnswParams.extract(metadata or {})                │\n│   873 │   │                                                                                      │\n│   874 │   │   hnsw_configuration = HNSWConfigurationInternal.from_legacy_params(                 │\n│   875 │   │   │   hnsw_metadata_params  # type: ignore[arg-type]                                 │\n│                                                                                                  │\n│ ╭────────────────────────────────── locals ───────────────────────────────────╮                  │\n│ │ collection_id = '506ea688-0c51-4351-a50b-b1f81a7a47a6'                      │                  │\n│ │ collections_t = Table('collections')                                        │                  │\n│ │      metadata = {'hnsw:M': 1024, 'hnsw:ef': 64, 'hsnw:space': 'cosine'}     │                  │\n│ │          self = <chromadb.db.impl.sqlite.SqliteDB object at 0x72e872a37c50> │                  │\n│ ╰─────────────────────────────────────────────────────────────────────────────╯                  │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/segment/impl/vector/hnsw_params.py:87 in        │\n│ extract                                                                                          │\n│                                                                                                  │\n│   84 │   │   \"\"\"Returns only the relevant hnsw params\"\"\"                                         │\n│   85 │   │   all_validators = {**param_validators, **persistent_param_validators}                │\n│   86 │   │   segment_metadata = PersistentHnswParams._select(metadata)                           │\n│ ❱ 87 │   │   PersistentHnswParams._validate(segment_metadata, all_validators)                    │\n│   88 │   │   return segment_metadata                                                             │\n│   89                                                                                             │\n│                                                                                                  │\n│ ╭─────────────────────────────────────── locals ────────────────────────────────────────╮        │\n│ │   all_validators = {                                                                  │        │\n│ │                    │   'hnsw:space': <function <lambda> at 0x72e8729e1440>,           │        │\n│ │                    │   'hnsw:construction_ef': <function <lambda> at 0x72e8729e14e0>, │        │\n│ │                    │   'hnsw:search_ef': <function <lambda> at 0x72e8729e1580>,       │        │\n│ │                    │   'hnsw:M': <function <lambda> at 0x72e8729e1620>,               │        │\n│ │                    │   'hnsw:num_threads': <function <lambda> at 0x72e8729e16c0>,     │        │\n│ │                    │   'hnsw:resize_factor': <function <lambda> at 0x72e8729e1760>,   │        │\n│ │                    │   'hnsw:batch_size': <function <lambda> at 0x72e8729e1800>,      │        │\n│ │                    │   'hnsw:sync_threshold': <function <lambda> at 0x72e8729e18a0>   │        │\n│ │                    }                                                                  │        │\n│ │         metadata = {'hnsw:M': 1024, 'hnsw:ef': 64, 'hsnw:space': 'cosine'}            │        │\n│ │ segment_metadata = {'hnsw:M': 1024, 'hnsw:ef': 64}                                    │        │\n│ ╰───────────────────────────────────────────────────────────────────────────────────────╯        │\n│                                                                                                  │\n│ /usr/local/lib/python3.11/site-packages/chromadb/segment/impl/vector/hnsw_params.py:41 in        │\n│ _validate                                                                                        │\n│                                                                                                  │\n│   38 │   │   # Validate it                                                                       │\n│   39 │   │   for param, value in metadata.items():                                               │\n│   40 │   │   │   if param not in validators:                                                     │\n│ ❱ 41 │   │   │   │   raise ValueError(f\"Unknown HNSW parameter: {param}\")                        │\n│   42 │   │   │   if not validators[param](value):                                                │\n│   43 │   │   │   │   raise ValueError(f\"Invalid value for HNSW parameter: {param} = {value}\")    │\n│   44                                                                                             │\n│                                                                                                  │\n│ ╭──────────────────────────────────── locals ─────────────────────────────────────╮              │\n│ │   metadata = {'hnsw:M': 1024, 'hnsw:ef': 64}                                    │              │\n│ │      param = 'hnsw:ef'                                                          │              │\n│ │ validators = {                                                                  │              │\n│ │              │   'hnsw:space': <function <lambda> at 0x72e8729e1440>,           │              │\n│ │              │   'hnsw:construction_ef': <function <lambda> at 0x72e8729e14e0>, │              │\n│ │              │   'hnsw:search_ef': <function <lambda> at 0x72e8729e1580>,       │              │\n│ │              │   'hnsw:M': <function <lambda> at 0x72e8729e1620>,               │              │\n│ │              │   'hnsw:num_threads': <function <lambda> at 0x72e8729e16c0>,     │              │\n│ │              │   'hnsw:resize_factor': <function <lambda> at 0x72e8729e1760>,   │              │\n│ │              │   'hnsw:batch_size': <function <lambda> at 0x72e8729e1800>,      │              │\n│ │              │   'hnsw:sync_threshold': <function <lambda> at 0x72e8729e18a0>   │              │\n│ │              }                                                                  │              │\n│ │      value = 64                                                                 │              │\n│ ╰─────────────────────────────────────────────────────────────────────────────────╯              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nValueError: Unknown HNSW parameter: hnsw:ef\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-14T10:50:22+00:00",
        "body": "@ChocoL0rd, thanks for providing the output. Let me look into this. "
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-14T11:54:19+00:00",
        "body": "@ChocoL0rd, here's what's happening at least with the above printout:\n\nSeems that `chops` installs Chroma `0.6.2` along and while Chroma attempts to upgrade your DB it fails to migrate `hnsw:ef` which is not a valid parameter, the correct config is `hnsw:search_ef`.\n\nSo let's do the following to remediate the situation:\n\n- Open Chroma in your container with `0.4.24`\n- Update the collection metadata to include the correct `hnsw:search_ef` e.g. \n\n```py\ndb.get_or_create_collection(\n    name=col_name,\n    metadata={\"hsnw:space\": \"cosine\", \"hnsw:M\": 1024,\"hnsw:search_ef\": 64}\n)\n```\n- Try to see if your collection is working again or do you get the same error (don't yet run `chops` as its `0.6.2` will force migrate your DB and it won't be usable with `0.4.24` container, which you can upgrade of course)\n\nOnce you have resolved the first error you should feel confident to upgrade to Chroma `0.6.2` as it has multiple important fixes (E.g. memory leaks amongst other performance improvements)\n\nLet me know how it goes. Also feel free to join [discord](https://discord.gg/MMeYNTmh3x) to chat about this.\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3474"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3473,
    "title": "[Feature Request]: timeout parameter OllamaEmbeddingFunction",
    "body": "### Describe the problem\n\nWhen embedding large documents with a not-so-fast Ollama server over a poor network, sometimes the operation times out.\n\n### Describe the proposed solution\n\nAdd a `float` type parameter `timeout` for `OllamaEmbeddingFunction`, which controls the timeout for the `httpx.Client` object [here](https://github.com/chroma-core/chroma/blob/d6c8f20f4f5b6ca31757d14deeb7d04ec59bb121/chromadb/utils/embedding_functions/ollama_embedding_function.py#L26C1-L26C39).\n\nref: https://www.python-httpx.org/advanced/timeouts/\n\n### Alternatives considered\n\nI was going to submit an PR, but then I saw #2946 which refactors `OllamaEmbeddingFunction` to use the Ollama python library. I'm not sure when (or whether) this will be merged, but if it ever gets merged, the proposed solution will no longer be appropriate.\n\n### Importance\n\nwould make my life easier\n\n### Additional Information\n\n_No response_",
    "state": "closed",
    "created_at": "2025-01-12T09:44:17+00:00",
    "closed_at": "2025-01-18T00:55:03+00:00",
    "updated_at": "2025-01-18T00:55:04+00:00",
    "author": "Davidyz",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "enhancement,EF",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 135.17944444444444,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-14T10:16:24+00:00",
        "body": "@Davidyz, thanks for raising this. I'll review and rebase #2946 and merge it soon."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-15T19:25:06+00:00",
        "body": "@Davidyz, rabased on latest main and added timeout kwarg to pass to ollama client."
      },
      {
        "author": "Davidyz",
        "created_at": "2025-01-15T20:16:46+00:00",
        "body": "Hi, thanks for the update. I tested it and it works, but this needs to be marked as a breaking change because Ollama API doesn't accept 'url' (like `http://127.0.0.1:11434/api/embeddings`), but rather server host (like `http://127.0.0.1:11434`). The original configuration simply wouldn't work. \n\nWith that said, may I ask what's the estimated time of this being merged into `main`? (presumably in 0.7?)\n\nEDIT: to be clear, the breaking was due to the shift to Ollama python library, not the addition of `timeout`."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-16T13:06:25+00:00",
        "body": "@Davidyz, thanks for testing it out. Indeed, the URL part is a breaking change, and I'll update the docs to reflect this. That said, I've added support for backward compatibility with legacy URLs (e.g. ending with `/api/embeddings`).\n\nAs far as the release goes, possibly in `0.6.4`, but once merged, you can always grab the release from `main.`  "
      },
      {
        "author": "Davidyz",
        "created_at": "2025-01-16T13:33:10+00:00",
        "body": "> @Davidyz, thanks for testing it out. Indeed, the URL part is a breaking change, and I'll update the docs to reflect this. That said, I've added support for backward compatibility with legacy URLs (e.g. ending with `/api/embeddings`).\n> \n> As far as the release goes, possibly in `0.6.4`, but once merged, you can always grab the release from `main.`  \n\nI see. Thanks for the updates. I think I'll still wait for the release so that it's easier to write the version constraints in my `pyproject.toml`."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3473"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3446,
    "title": "32027008132",
    "body": null,
    "state": "closed",
    "created_at": "2025-01-08T23:50:45+00:00",
    "closed_at": "2025-01-09T00:34:55+00:00",
    "updated_at": "2025-01-09T00:34:56+00:00",
    "author": "Corriveau",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 0.7361111111111112,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2025-01-09T00:34:55+00:00",
        "body": "Closing. @Corriveau if you meant to open an issue for Chroma, please choose one of our templates and provide information about how we can help you!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3446"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3437,
    "title": "[Bug]: When using add() to insert embeddings and ids, I found that the maximum number is only 100. Why?",
    "body": "### What happened?\n\nstart_time = time.time()\n    client = chromadb.PersistentClient(path=\"./chroma\")\n    # client = chromadb.Client()\n    end_time = time.time()\n    print(end_time - start_time)\n\n    start_time = time.time()\n    collection = client.get_or_create_collection(name=\"test_collection\", \n                                                metadata={\"hnsw:space\": \"cosine\",\n                                                          \"hnsw:search_ef\": 100})\n    start_time = time.time()\n    results = collection.get()\n    end_time = time.time()\n    print(end_time - start_time)\n    print(results)\n\n    embedding = np.random.randn(1000, 768).astype(np.float32).tolist()\n    num = 0\n    keys = [str(i) for i in range(num, num + embedding.__len__())]\n    metadatas = [{\"keys\":v} for v in keys]\n    print(keys[:10])\n    print(embedding.__len__())\n    print(metadatas.__len__())\n\n    dict_ = {\n        \"id1\": {\"source\": \"doc1\"},\n        \"id2\": {\"source\": \"doc2\"},\n        \"id3\": {\"source\": \"doc3\"}\n    }\n    \n    try:\n        collection.add(\n            ids=keys,           \n            embeddings=embedding,\n            # metadatas=list(dict_.values()),  \n            metadatas=metadatas,  \n        )\n       print(“success”)\n    except Exception as e:\n       print(\"defeat\")\n\n    start_time = time.time()\n    results = collection.get()\n    end_time = time.time()\n    print(end_time - start_time)\n    print(results)\n\n### Versions\n\nChroma 0.6.1, Windows\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-08T06:27:47+00:00",
    "closed_at": "2025-01-18T00:57:17+00:00",
    "updated_at": "2025-01-18T00:57:17+00:00",
    "author": "13hgj14",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 234.49166666666667,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-08T08:16:32+00:00",
        "body": "@13hgj14, what is the exact error you get? There are cases where your sqlite3 system library in such a way that limits the number of inserts that Chroma can do.\n\nCan you also try:\n\n```bash\ndocker run -d --rm  -p 8000:8000 --name chromadb -v ./chroma:/chroma/chroma -e IS_PERSISTENT=TRUE chromadb/chroma:0.6.1\n```\n\nThen use the same code above but with `HttpClient` instead."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-09T19:38:33+00:00",
        "body": "@13hgj14, did the above help you resolve the limitation you faced?"
      },
      {
        "author": "13hgj14",
        "created_at": "2025-01-14T03:08:12+00:00",
        "body": "> HttpClient\n\nBut I want to store data locally offline. Can HttpCilent be used like chromadb.PersistentClient(path=\"./chroma\")"
      },
      {
        "author": "13hgj14",
        "created_at": "2025-01-14T03:24:58+00:00",
        "body": "> [@13hgj14](https://github.com/13hgj14)，以上内容是否帮助您解决了所遇到的限制？\n\nI executed the chroma first\nchroma run --path ./chroma,\nThen replace the restriction code with HttpCilent, the one still exists"
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-14T12:34:15+00:00",
        "body": "@13hgj14, both methods, `chroma run` and `docker run` will work locally only. The only difference is that `chroma run` will still result in the same limitation as your original issue whereas running Chroma in docker will allow you to add more documents at the same time (the sqlite3 version inside the chroma docker image allows for up to `41666` docs in a single request)."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3437"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3422,
    "title": "[Release] 01/07/2025",
    "body": "Release Chroma v0.6.2 and JS-Client 1.10.2",
    "state": "closed",
    "created_at": "2025-01-07T21:50:00+00:00",
    "closed_at": "2025-01-13T18:30:04+00:00",
    "updated_at": "2025-01-13T18:30:05+00:00",
    "author": "itaismith",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "by-chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 140.6677777777778,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3422"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3420,
    "title": "[ENH] Update `ef_search` default value",
    "body": null,
    "state": "closed",
    "created_at": "2025-01-07T19:40:18+00:00",
    "closed_at": "2025-01-10T06:53:32+00:00",
    "updated_at": "2025-01-10T06:53:32+00:00",
    "author": "itaismith",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "dependencies,by-chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 59.220555555555556,
    "first_comments": [
      {
        "author": "HammadB",
        "created_at": "2025-01-08T19:10:51+00:00",
        "body": "Please link the corresponding PR if you can @itaismith "
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-08T19:13:46+00:00",
        "body": "Closed by #3436 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3420"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3414,
    "title": "[Bug]: links in docs.trychroma.com redirecting to 404 page",
    "body": "### What happened?\n\nWhen trying to navigate to blog page from [Roadmap](https://docs.trychroma.com/docs/overview/roadmap) under Example templates section, it is redirecting to 404 page. Hyperlink used for blog page is [on our blog](https://trychroma.com/blog)\n\n![Image](https://github.com/user-attachments/assets/b5c8f01d-c04c-402f-b6eb-bca0baf8fe1c)\n\n\n### Versions\n\nN/A\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-06T19:12:54+00:00",
    "closed_at": "2025-01-07T03:44:20+00:00",
    "updated_at": "2025-01-07T22:19:45+00:00",
    "author": "saikeerthan-14",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 8.523888888888889,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2025-01-07T03:44:20+00:00",
        "body": "Closed by #3411 "
      },
      {
        "author": "saikeerthan-14",
        "created_at": "2025-01-07T15:43:20+00:00",
        "body": "Still facing same issue\n"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-07T19:32:32+00:00",
        "body": "@saikeerthan-14 try to refresh now!"
      },
      {
        "author": "saikeerthan-14",
        "created_at": "2025-01-07T21:51:17+00:00",
        "body": "@itaismith I can still see this [on our blog](https://trychroma.com/blog)) as hyperlink in Roadmap page as highlighted above. Please let me know, if you're not facing the same. I tried in chrome and edge. Seems not resolved.\n\nSteps followed:\n1. Open Roadmap docs using this link (https://docs.trychroma.com/docs/overview/roadmap)\n2. Go to \"What areas are great for community contributions\" section, you can use this link (https://docs.trychroma.com/docs/overview/roadmap#what-areas-are-great-for-community-contributions)\n3. Then, under \"Example templates\" subsection, the hyperlink used for \"on our blog\" is redirecting to empty page. as below\n![Image](https://github.com/user-attachments/assets/76ab1872-54be-4c77-bc43-6eae64668c12)\n\n\nPlease let me know, if you couldn't replicate the same. Will record a video as an attachment"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-07T22:08:46+00:00",
        "body": "Sorry about that, we had several docs issues open and I mixed them up. Fix is here: https://github.com/chroma-core/chroma/pull/3423 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3414"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3410,
    "title": "[Bug]: Could not connect to tenant default_tenant. Are you sure it exists?",
    "body": "### What happened?\n\nGood day,\n\nI have upgraded node module to latest one (chromadb 1.10.0) and app has stopped working\n> npm install --save chromadb chromadb-default-embed\n\n> npm list chromadb\n-- chromadb@1.10.0 `\n\napp code:\n`// Chroma DB`\n`const { ChromaClient } = require(\"chromadb\");`\n`const client = new ChromaClient();`\n...\n\n `// get all collections from vector DB`\n `const t_colls = await client.listCollections();`\n\nIt raises the following exception:\n`Could not connect to tenant default_tenant. Are you sure it exists? Underlying error:`\n`ChromaNotFoundError: The requested resource could not be found: http://localhost:8000/api/v2/tenants/default_tenant`\n\n\nthen I have reinstalled Chroma module back to chromadb@1.8.1 and everything is back no normal, just working. \nNothing else is changed, I even did not restart Chroma server. \n\nINFO:     [06-01-2025 13:25:51] Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\nINFO:     [06-01-2025 13:26:21] ::1:56690 - \"GET /api/v2/tenants/default_tenant HTTP/1.1\" 404\nINFO:     [06-01-2025 13:42:55] ::1:56910 - \"GET /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\n\nwhat is the issue with latest version? or the existing code needs to be adjusted somehow?\nThank you\n\n\n\n### Versions\n\nchromadb@1.10.0, Python 3.12.4, Win 11\n\n\n### Relevant log output\n\n```shell\n\n```",
    "state": "closed",
    "created_at": "2025-01-06T11:56:11+00:00",
    "closed_at": "2025-01-06T16:16:25+00:00",
    "updated_at": "2025-01-06T17:01:26+00:00",
    "author": "expy777",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "expy777",
    "resolution_time_hours": 4.3372222222222225,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-06T12:41:49+00:00",
        "body": "@expy777, the issue you are facing is related to client/server mismatch. Can you also upgrade your Chroma server to `0.6.1`. In the latest python and js clients we've switched to using the new `v2` API."
      },
      {
        "author": "expy777",
        "created_at": "2025-01-06T13:05:03+00:00",
        "body": "@tazarov oh I see, thank you for swift reply.\nCould you please also advise how to check current version of Chroma server, and how to upgrade it to 0.6.1?\n\nwhen I run, as suggested in 'Getting started' page\n`pip install chromadb`\n\nI get hundred of messages in console saying \"Requirement already satisfied: ....\"  which means the packages are already installed at latest version, or?\n\n"
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-06T13:13:52+00:00",
        "body": "@expy777 if you are running chroma from CLI e.g. `chroma run --path /path/to/persist/dir` then you can simply do:\n\n```bash\npip install --upgrade chromadb\n```\n\nor alternatively `pip install chromadb==0.6.1`\n\nIf using docker:\n\n```bash\ndocker run .... chromadb/chroma:0.6.1\n```\n\nto check you chroma version you currently have:\n\n```bash\npython -c \"import chromadb; print(chromadb.__version__)\"\n```\n\nor with server running in docker or if your chroma server is still running:\n\n```bash\ncurl -v http://localhost:8000/api/v1/version\n```\n\n(`Invoke-WebRequest -Uri http://localhost:8000/api/v1/version -Verbose` for windows machines)\n\n"
      },
      {
        "author": "expy777",
        "created_at": "2025-01-06T16:16:25+00:00",
        "body": "@tazarov thank you!  it seems working now after all the upgrades \n\n```\n> curl -v http://localhost:8000/api/v1/version                                                                                                              \nVERBOSE: GET with 0-byte payload\nVERBOSE: received 7-byte response of content type application/json\n\nStatusCode        : 200\nStatusDescription : OK\nContent           : \"0.6.1\"\n...\n```\n\n```\n> npm list chromadb\n\n-- chromadb@1.10.0\n```\n\n```\n> python -V\nPython 3.13.1\n```\n\ndid not test everything yet, but seem some functions have changed the behavior, e.g. collection update now returns no response anymore?\n\n```\n// update document\nconst response = await collection.update({\n        ids: [l_doc_id],\n        documents: [l_doc_content]\n});\n```\n```\nresponse\nundefined\n```\n\nbut this is different topic...\n"
      },
      {
        "author": "expy777",
        "created_at": "2025-01-06T16:20:42+00:00",
        "body": "also Chroma server was issuing some errors on the restart, but they have gone after vacuuming DB as suggested. No this error anymore.\n\n```\nWARNING:  [06-01-2025 18:04:11] ⚠️ It looks like you upgraded from a version below 0.6 and could benefit from vacuuming your database. Run chromadb utils vacuum --help for more information.\n--- Logging error ---\nTraceback (most recent call last):\n  File \"C:\\Users\\<...>\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\logging\\__init__.py\", line 1153, in emit\n    stream.write(msg + self.terminator)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\<...>\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\encodings\\cp1252.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 41-42: character maps to <undefined>\n\n```"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3410"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3409,
    "title": "Blank",
    "body": null,
    "state": "closed",
    "created_at": "2025-01-05T17:40:02+00:00",
    "closed_at": "2025-01-07T03:51:04+00:00",
    "updated_at": "2025-01-07T03:51:05+00:00",
    "author": "Makko78",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 34.18388888888889,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-06T08:22:59+00:00",
        "body": "@Makko78, did you mean to add content to the issue or was it opened in error?"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-07T03:51:04+00:00",
        "body": "Hi @Makko78 closing since the issue is blank. Feel free to open a new one is this was an error!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3409"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3402,
    "title": "[Install issue]: can't install chromadb via pip command",
    "body": "### What happened?\n\nI can't install though my Microsoft C++ Build tools version is 14.0 and python version is 3.12.5\n\n### Versions\n\nPython 3.12.5\r\nWindows 10\r\nMicrosoft C ++ Build tools 14.0\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2025-01-03T18:22:10+00:00",
    "closed_at": "2025-01-15T09:41:05+00:00",
    "updated_at": "2025-01-15T09:41:06+00:00",
    "author": "KelvinxG",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "installation trouble,awaiting-response",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 279.3152777777778,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-03T19:24:56+00:00",
        "body": "@KelvinxG, can you share the error you get when running `pip install chromadb`?"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-15T09:41:05+00:00",
        "body": "Closing due to inactivity for some time. @KelvinxG if you still run into this error please open a new issue with as much information as possible so we can investigate."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3402"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3396,
    "title": "[Bug]: Python client reference docs for `list_collections` not updated for 0.6.0",
    "body": "### What happened?\n\nPython client reference for `list_collections` is not updated to match `0.6.0` changed semantics.\r\n\r\n![image](https://github.com/user-attachments/assets/56a592d2-b079-4969-8711-0bf01e493fbb)\r\n\r\n\n\n### Versions\n\nN/A\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2025-01-03T14:58:21+00:00",
    "closed_at": "2025-01-03T18:42:19+00:00",
    "updated_at": "2025-01-03T18:42:19+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug,documentation,by-chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 3.7327777777777778,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3396"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3395,
    "title": "[Bug]: Anchors in links to docs.trychroma.com don't work",
    "body": "### What happened?\n\nWhen trying to navigate to a doc site link with anchor like so [https://docs.trychroma.com/reference/python/client#deletecollection](https://docs.trychroma.com/reference/python/client#deletecollection) the anchor is removed and the user is never taken to the heading.\r\n\n\n### Versions\n\nN/A\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2025-01-03T14:49:15+00:00",
    "closed_at": "2025-01-07T03:42:35+00:00",
    "updated_at": "2025-01-07T03:42:35+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug,documentation,by-chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 84.88888888888889,
    "first_comments": [
      {
        "author": "ahmedaabouzied",
        "created_at": "2025-01-06T10:41:05+00:00",
        "body": "I observed that the anchors take the user to the heading in Firefox, but in Chrome it does not.\n\nIn both cases though, the anchor is removed from the URL."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-06T12:43:54+00:00",
        "body": "@ahmedaabouzied, thanks for confirming this. It would appear that a js code removes the anchors when the site is first loaded. I'll also do some digging around this."
      },
      {
        "author": "ahmedaabouzied",
        "created_at": "2025-01-06T15:48:18+00:00",
        "body": "I think it is the redirection layer to either the python or JS docs. I opened a PR. \nCould you check it out when you have the time?\n\nThese things are hard to unit test. I simply ran it locally."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-06T18:05:23+00:00",
        "body": "@ahmedaabouzied, PR looks good. Did some local tests and fixed an issue, directly pushed against your fork, hope it is ok."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3395"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3385,
    "title": "[Bug]: AttributeError: type object 'hnswlib.Index' has no attribute 'file_handle_count'",
    "body": "### What happened?\n\nThe error comes up when calling:\r\nclient = chromadb.PersistentClient(path=chromadb_path)\r\n\r\nit is raised in:\r\nchromadb/segment/impl/vector/local_persistent_hnsw.py\", line 527, in get_file_handle_count\r\n\r\nVersions of certain libraries on my system:\r\nchromadb 0.5.18\r\nchromadb-hnswlib 0.7.6\r\n\r\nand:\r\nhnswlib 0.8.0 (upgraded by other framework)\r\neven with hnswlib 0.7.0 the error comes up\r\n\r\nObviously, chromadb cannot play together with newer versions of hnsw. I do not want to downgrade hnsw to a very old version\n\n### Versions\n\nchromadb 0.5.18, python 3.10\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2025-01-02T11:48:41+00:00",
    "closed_at": "2025-01-02T18:20:52+00:00",
    "updated_at": "2025-01-02T18:20:52+00:00",
    "author": "drdsgvo",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "HammadB",
    "resolution_time_hours": 6.536388888888889,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2025-01-02T12:39:11+00:00",
        "body": "@drdsgvo, Chroma depends on its own fork of HNSW - https://github.com/chroma-core/hnswlib. Since the fork is not meant to be a drop in replacement for original HNSW so there are incompatibilities as you've experienced. In fact Chroma's own fork is a newer version than 0.8.0:\r\n\r\n- https://pypi.org/project/hnswlib/#history - `0.8.0` from Dec 2023\r\n- https://pypi.org/project/chroma-hnswlib/#history - `0.7.6` from Jul 2024\r\n\r\nDoes your project require the original `hnswlib` package?\r\n"
      },
      {
        "author": "drdsgvo",
        "created_at": "2025-01-02T17:56:52+00:00",
        "body": "Thanx a lot. Uninstalling chroma-hnswlib and then reinstalling it solved the problem, which seems to be caused because hnswlib was/is also installed."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3385"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3381,
    "title": "[Bug]: Parameter Validators mismatch, with the Documentation Parameters",
    "body": "### What happened?\n\nIn the file:\r\nhttps://github.com/chroma-core/chroma/blob/main/docs/docs.trychroma.com/markdoc/content/docs/collections/configure.md\r\n\r\nThe parameter names are mistyped\r\n```python\r\ncollection = client.create_collection(\r\n    name=\"my_collection\", \r\n    embedding_function=emb_fn,\r\n    metadata={\r\n        \"hnsw:space\": \"cosine\",\r\n        \"hnsw:ef_search\": 100\r\n    }\r\n)\r\n```\r\nThis is provided as the parameter name\r\n\r\nwhereas, according to the code, it should be\r\n```python\r\nparam_validators: Dict[str, Validator] = {\r\n    \"hnsw:space\": lambda p: bool(re.match(r\"^(l2|cosine|ip)$\", str(p))),\r\n    \"hnsw:construction_ef\": lambda p: isinstance(p, int),\r\n    \"hnsw:search_ef\": lambda p: isinstance(p, int),\r\n    \"hnsw:M\": lambda p: isinstance(p, int),\r\n    \"hnsw:num_threads\": lambda p: isinstance(p, int),\r\n    \"hnsw:resize_factor\": lambda p: isinstance(p, (int, float)),\r\n}\r\n```\r\n\r\nspecifically `construction_ef` and `search_ef` are mistyped\n\n### Versions\n\nChroma 0.6.0 with Docs on commit https://github.com/chroma-core/chroma/commit/1089337e343557372379c6dc55b13e7aab32c483\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\process_docs.py\", line 84, in <module>\r\n    collection = client.create_collection(\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\api\\client.py\", line 147, in create_collection\r\n    model = self._server.create_collection(\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 150, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\api\\segment.py\", line 103, in wrapper\r\n    return self._rate_limit_enforcer.rate_limit(func)(*args, **kwargs)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\rate_limit\\simple_rate_limit\\__init__.py\", line 23, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\api\\segment.py\", line 239, in create_collection\r\n    segments = self._manager.prepare_segments_for_new_collection(coll)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 150, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\segment\\impl\\manager\\local.py\", line 141, in prepare_segments_for_new_collection\r\n    vector_segment = _segment(\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\segment\\impl\\manager\\local.py\", line 258, in _segment\r\n    metadata = cls.propagate_collection_metadata(collection_metadata)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_persistent_hnsw.py\", line 178, in propagate_collection_metadata\r\n    segment_metadata = PersistentHnswParams.extract(metadata)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\hnsw_params.py\", line 88, in extract\r\n    PersistentHnswParams._validate(segment_metadata, all_validators)\r\n  File \"E:\\Programming\\LLMs\\gen-weather-docs\\env\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\hnsw_params.py\", line 42, in _validate\r\n    raise ValueError(f\"Unknown HNSW parameter: {param}\")\r\nValueError: Unknown HNSW parameter: hnsw:ef_search\n```\n",
    "state": "closed",
    "created_at": "2025-01-01T15:59:45+00:00",
    "closed_at": "2025-01-02T05:57:03+00:00",
    "updated_at": "2025-01-02T06:44:51+00:00",
    "author": "Gaurav4604",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 13.955,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2025-01-02T05:57:04+00:00",
        "body": "Fixed in #3383. Thanks for catching this!"
      },
      {
        "author": "Gaurav4604",
        "created_at": "2025-01-02T06:44:49+00:00",
        "body": "Hi, sorry I've created a PR under the same, from my fork through on which I made the changes yesterday\r\nhttps://github.com/chroma-core/chroma/pull/3384"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3381"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3362,
    "title": "[Bug]: Docker/Typescript SDK don't work",
    "body": "### What happened?\n\ndocker run --rm -d --name chroma -p 8000:8000 ghcr.io/chroma-core/chroma:latest\r\n\r\n```\r\nimport { ChromaClient } from 'chromadb';\r\nimport log from \"../services/log\";\r\n\r\nconst client = new ChromaClient();\r\n```\r\n\r\n```\r\nbun run index.js\r\n3926 |         case 504:\r\n3927 |           throw new ChromaConnectionError(\r\n3928 |             `Unable to connect to the chromadb server. Please try again later.`\r\n3929 |           );\r\n3930 |       }\r\n3931 |       throw new Error(\r\n                   ^\r\nerror: Failed to fetch http://localhost:8000/api/v2/tenants/default_tenant/databases/default_database/collections with status 422: Unprocessable Entity\r\n      at /project/node_modules/chromadb/dist/chromadb.mjs:3931:13\r\n ```\n\n### Versions\n\nDocker sha: 1fb29cd7279c379d46a9d8b336dca3374804827ceb3c11e2ee13064f1fb89e6e\r\n\"chromadb\": \"^1.9.4\",\n\n### Relevant log output\n\n```shell\nStarting 'uvicorn chromadb.app:app' with args: --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30\r\nWARNING:  [28-12-2024 19:15:30] chroma_server_nofile is set to 65536, but this is less than current soft limit of 1048576. chroma_server_nofile will not be set.\r\nINFO:     [28-12-2024 19:15:30] Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.\r\nDEBUG:    [28-12-2024 19:15:30] Starting component System\r\nDEBUG:    [28-12-2024 19:15:30] Starting component OpenTelemetryClient\r\nDEBUG:    [28-12-2024 19:15:30] Starting component SqliteDB\r\nDEBUG:    [28-12-2024 19:15:30] Starting component SimpleQuotaEnforcer\r\nDEBUG:    [28-12-2024 19:15:30] Starting component Posthog\r\nDEBUG:    [28-12-2024 19:15:30] Starting component SimpleRateLimitEnforcer\r\nDEBUG:    [28-12-2024 19:15:30] Starting component LocalSegmentManager\r\nDEBUG:    [28-12-2024 19:15:30] Starting component LocalExecutor\r\nDEBUG:    [28-12-2024 19:15:30] Starting component SegmentAPI\r\nINFO:     [28-12-2024 19:15:30] Started server process [1]\r\nINFO:     [28-12-2024 19:15:30] Waiting for application startup.\r\nINFO:     [28-12-2024 19:15:30] Application startup complete.\r\nINFO:     [28-12-2024 19:15:30] Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\r\nINFO:     [28-12-2024 19:15:40] 192.168.65.1:31944 - \"GET /api/v2/tenants/default_tenant HTTP/1.1\" 200\r\nINFO:     [28-12-2024 19:15:40] 192.168.65.1:31944 - \"GET /api/v2/tenants/default_tenant/databases/default_database HTTP/1.1\" 200\r\nINFO:     [28-12-2024 19:15:40] 192.168.65.1:31944 - \"POST /api/v2/tenants/default_tenant/databases/default_database/collections HTTP/1.1\" 422\n```\n",
    "state": "closed",
    "created_at": "2024-12-28T19:18:46+00:00",
    "closed_at": "2025-01-02T23:30:48+00:00",
    "updated_at": "2025-01-03T03:08:49+00:00",
    "author": "vorpalhex",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 124.20055555555555,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2025-01-02T23:30:48+00:00",
        "body": "Hi there. Your JS-client is not up to date. Please try again with version 1.10. If the problem still persists, feel free to open a new issue. We will need as much information as possible to reproduce your error."
      },
      {
        "author": "vorpalhex",
        "created_at": "2025-01-03T03:08:47+00:00",
        "body": "Ok, I had to bump both the client js and the docker image. `1.9.4` was the highest when I tried this so looks like you had a broken release. This might need test coverage."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3362"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3354,
    "title": "Terraform init fails due to \"features\" setting in dpeloyments/azure/main.tf",
    "body": "This following line \r\nhttps://github.com/chroma-core/chroma/blob/86d6d27dea96928a1a3bc8d2db5df0a04044d1ae/deployments/azure/main.tf#L64\r\n<img width=\"581\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1337f95e-b0d8-4af1-a08e-3c4d23512904\" />\r\n\r\nthrows error in \"azurerm\" features.\r\n\r\nThis was found while following the docs for deploying Chroma to Azure: https://docs.trychroma.com/production/cloud-providers/azure\r\n",
    "state": "closed",
    "created_at": "2024-12-25T17:20:43+00:00",
    "closed_at": "2025-01-03T20:26:13+00:00",
    "updated_at": "2025-01-03T20:26:13+00:00",
    "author": "steevejoseph",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 219.09166666666667,
    "first_comments": [
      {
        "author": "steevejoseph",
        "created_at": "2024-12-25T17:30:04+00:00",
        "body": "Opened a PR here: https://github.com/chroma-core/chroma/pull/3355"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T20:26:13+00:00",
        "body": "Thank you!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3354"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3339,
    "title": "[Bug]: chromadb.HttpClient.list_collections signature error",
    "body": "### What happened?\n\nTrying to use chromadb.HttpClient.list_collections method I obtain the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/carmelo/git_repos/commonshare/dm_api/src/db/chroma_db.py\", line 701, in print_status\r\n    collection_list = self.client.list_collections()\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/api/client.py\", line 177, in list_collections\r\n    return self._server.list_collections(\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 127, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/api/fastapi.py\", line 227, in list_collections\r\n    collections.append(Collection(self, **json_collection))\r\nTypeError: Collection.__init__() got an unexpected keyword argument 'configuration_json'\r\n```\r\n\r\nSeems like a compatibility error since the signature of the Collection.__init__() does not contain the argument passed.\r\n\r\nThis problem started to happen during this year, I don't remember exactly when. First the github runners I used started to report this error and I had to run it in my laptop with a prior set of libraries that I did not clean until a week ago, when I had to reinstall Ubuntu from scratch, formatting the hard disk. \r\n\r\nI hope all this helps to let you figure out why this error is happening and how could I get rid of it and continue using chroma in my current project.\r\n\r\nThanks in advance.\r\n\n\n### Versions\n\nRunning on Ubuntu 22.04, with Python3.10.12. I have tried with lots of different chromadb versions, from 0.5.0 to 0.4.16.\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\r\n  File \"/home/carmelo/git_repos/commonshare/dm_api/src/db/chroma_db.py\", line 701, in print_status\r\n    collection_list = self.client.list_collections()\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/api/client.py\", line 177, in list_collections\r\n    return self._server.list_collections(\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 127, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"/home/carmelo/.local/lib/python3.10/site-packages/chromadb/api/fastapi.py\", line 227, in list_collections\r\n    collections.append(Collection(self, **json_collection))\r\nTypeError: Collection.__init__() got an unexpected keyword argument 'configuration_json'\n```\n",
    "state": "closed",
    "created_at": "2024-12-19T18:15:39+00:00",
    "closed_at": "2024-12-20T13:28:54+00:00",
    "updated_at": "2024-12-20T13:28:54+00:00",
    "author": "carmeloacosta",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "bug,version-mismatch",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 19.220833333333335,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-19T18:23:28+00:00",
        "body": "hey @carmeloacosta, are your server and client running the same version. As you correctly identified this is a compatibility issue and has been raised in the past in the context of a client/server version mismatch."
      },
      {
        "author": "carmeloacosta",
        "created_at": "2024-12-19T19:19:50+00:00",
        "body": "Thanks @tazarov for your fast response. I didn't expect to have an answer so soon. Otherwise I would have checked it sooner xD\r\n\r\nI am using as server a dockerized ChromaDB Server. This is the docker image\r\n\r\n```\r\nREPOSITORY        TAG       IMAGE ID       CREATED       SIZE\r\nchromadb/chroma   latest    a757e2bcf23d   2 weeks ago   470MB\r\n```\r\n\r\nI have searched for the version within the running container, but I had no luck. Maybe you could help me finding out where to look to find it. \r\n\r\nI have looked at pyproject.toml [1], the container installed packages (pip3 freeze) [2] and requirements.txt [3], although the app running is chromadb itself I only had real expectatives to find it in [1]. Just adding them at the end of this message just in case they could help to identify the server version, apart from the docker chromadb image version id. \r\n\r\nI also checked the included README.md but no version there.\r\n\r\nAny help will be really appreciated.\r\n\r\nThanks in advance.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n**pyproject.toml [1]**\r\n\r\n```\r\n[project]\r\nname = \"chromadb\"\r\ndynamic = [\"version\"]\r\n\r\nauthors = [\r\n  { name = \"Jeff Huber\", email = \"jeff@trychroma.com\" },\r\n  { name = \"Anton Troynikov\", email = \"anton@trychroma.com\" },\r\n]\r\ndescription = \"Chroma.\"\r\nreadme = \"README.md\"\r\nrequires-python = \">=3.8\"\r\nclassifiers = [\r\n  \"Programming Language :: Python :: 3\",\r\n  \"License :: OSI Approved :: Apache Software License\",\r\n  \"Operating System :: OS Independent\",\r\n]\r\ndependencies = [\r\n  'build >= 1.0.3',\r\n  'pydantic >= 1.9',\r\n  'chroma-hnswlib==0.7.6',\r\n  'fastapi >= 0.95.2',\r\n  'uvicorn[standard] >= 0.18.3',\r\n  'numpy >= 1.22.5',\r\n  'posthog >= 2.4.0',\r\n  'typing_extensions >= 4.5.0',\r\n  'onnxruntime >= 1.14.1',\r\n  'opentelemetry-api>=1.2.0',\r\n  'opentelemetry-exporter-otlp-proto-grpc>=1.2.0',\r\n  'opentelemetry-instrumentation-fastapi>=0.41b0',\r\n  'opentelemetry-sdk>=1.2.0',\r\n  'tokenizers >= 0.13.2, <= 0.20.3',\r\n  'pypika >= 0.48.9',\r\n  'tqdm >= 4.65.0',\r\n  'overrides >= 7.3.1',\r\n  'importlib-resources',\r\n  'graphlib_backport >= 1.0.3; python_version < \"3.9\"',\r\n  'grpcio >= 1.58.0',\r\n  'bcrypt >= 4.0.1',\r\n  'typer >= 0.9.0',\r\n  'kubernetes>=28.1.0',\r\n  'tenacity>=8.2.3',\r\n  'PyYAML>=6.0.0',\r\n  'mmh3>=4.0.1',\r\n  'orjson>=3.9.12',\r\n  'httpx>=0.27.0',\r\n  'rich>=10.11.0',\r\n]\r\n\r\n[tool.black]\r\nline-length = 88\r\nrequired-version = \"23.3.0\"                         # Black will refuse to run if it's not this version.\r\ntarget-version = ['py38', 'py39', 'py310', 'py311']\r\n\r\n[tool.pytest.ini_options]\r\npythonpath = [\".\"]\r\nasyncio_mode = \"auto\"\r\n\r\n[tool.mypy]\r\nignore_errors = false\r\n\r\n[[tool.mypy.overrides]]\r\nmodule = [\"chromadb.proto.*\"]\r\nignore_errors = true\r\n\r\n[project.scripts]\r\nchroma = \"chromadb.cli.cli:app\"\r\n\r\n[project.urls]\r\n\"Homepage\" = \"https://github.com/chroma-core/chroma\"\r\n\"Bug Tracker\" = \"https://github.com/chroma-core/chroma/issues\"\r\n\r\n[build-system]\r\nrequires = [\"setuptools>=61.0\", \"setuptools_scm[toml]>=6.2\"]\r\nbuild-backend = \"setuptools.build_meta\"\r\n\r\n[tool.setuptools_scm]\r\nlocal_scheme = \"no-local-version\"\r\ntag_regex = '^(?P<version>[0-9]+\\.[0-9]+\\.[0-9]+)$'\r\ngit_describe_command = 'git describe --tags --long --match \"[0-9]*.[0-9]*.[0-9]*\"'\r\n\r\n[tool.setuptools]\r\npackages = [\"chromadb\"]\r\n\r\n[tool.setuptools.package-data]\r\nchromadb = [\"*.yml\"]\r\n```\r\n**pip3 freeze  (inside the docker) [2]**\r\n\r\n```\r\nannotated-types==0.7.0\r\nanyio==4.6.2.post1\r\nasgiref==3.8.1\r\nbackoff==2.2.1\r\nbcrypt==4.2.1\r\ncachetools==5.5.0\r\ncertifi==2024.8.30\r\ncharset-normalizer==3.4.0\r\nchroma-hnswlib==0.7.6\r\nclick==8.1.7\r\ncoloredlogs==15.0.1\r\nDeprecated==1.2.15\r\ndurationpy==0.9\r\nfastapi==0.115.6\r\nfilelock==3.16.1\r\nflatbuffers==24.3.25\r\nfsspec==2024.10.0\r\ngoogle-auth==2.36.0\r\ngoogleapis-common-protos==1.66.0\r\ngrpcio==1.68.1\r\nh11==0.14.0\r\nhttpcore==1.0.7\r\nhttptools==0.6.4\r\nhttpx==0.28.0\r\nhuggingface-hub==0.26.3\r\nhumanfriendly==10.0\r\nidna==3.10\r\nimportlib_metadata==8.5.0\r\nimportlib_resources==6.4.5\r\nkubernetes==31.0.0\r\nmarkdown-it-py==3.0.0\r\nmdurl==0.1.2\r\nmmh3==5.0.1\r\nmonotonic==1.6\r\nmpmath==1.3.0\r\nnumpy==2.1.3\r\noauthlib==3.2.2\r\nonnxruntime==1.20.1\r\nopentelemetry-api==1.28.2\r\nopentelemetry-exporter-otlp-proto-common==1.28.2\r\nopentelemetry-exporter-otlp-proto-grpc==1.28.2\r\nopentelemetry-instrumentation==0.49b2\r\nopentelemetry-instrumentation-asgi==0.49b2\r\nopentelemetry-instrumentation-fastapi==0.49b2\r\nopentelemetry-proto==1.28.2\r\nopentelemetry-sdk==1.28.2\r\nopentelemetry-semantic-conventions==0.49b2\r\nopentelemetry-util-http==0.49b2\r\norjson==3.10.5\r\noverrides==7.7.0\r\npackaging==24.2\r\nposthog==3.7.4\r\nprotobuf==5.29.1\r\npyasn1==0.6.1\r\npyasn1_modules==0.4.1\r\npydantic==2.10.3\r\npydantic_core==2.27.1\r\nPygments==2.18.0\r\nPyPika==0.48.9\r\npython-dateutil==2.9.0.post0\r\npython-dotenv==1.0.1\r\nPyYAML==6.0.2\r\nrequests==2.32.3\r\nrequests-oauthlib==2.0.0\r\nrich==13.9.4\r\nrsa==4.9\r\nshellingham==1.5.4\r\nsix==1.17.0\r\nsniffio==1.3.1\r\nstarlette==0.41.3\r\nsympy==1.13.3\r\ntenacity==9.0.0\r\ntokenizers==0.20.3\r\ntqdm==4.67.1\r\ntyper==0.15.1\r\ntyping_extensions==4.12.2\r\nurllib3==2.2.3\r\nuvicorn==0.32.1\r\nuvloop==0.21.0\r\nwatchfiles==1.0.0\r\nwebsocket-client==1.8.0\r\nwebsockets==14.1\r\nwrapt==1.17.0\r\nzipp==3.21.0\r\n```\r\n\r\n**requirements.txt  (docker) [3]**\r\n\r\n```\r\nbcrypt>=4.0.1\r\nchroma-hnswlib==0.7.6\r\nfastapi>=0.95.2\r\ngraphlib_backport==1.0.3; python_version < '3.9'\r\ngrpcio>=1.58.0\r\nhttpx>=0.27.0\r\nimportlib-resources\r\nkubernetes>=28.1.0\r\nmmh3>=4.0.1\r\nnumpy>=1.22.5\r\nonnxruntime>=1.14.1\r\nopentelemetry-api>=1.2.0\r\nopentelemetry-exporter-otlp-proto-grpc>=1.24.0\r\nopentelemetry-instrumentation-fastapi>=0.41b0\r\nopentelemetry-sdk>=1.2.0\r\norjson>=3.9.12, < 3.10.6 # 3.10.7 is currently missing a wheel for x86 glibc\r\noverrides>=7.3.1\r\nposthog>=2.4.0\r\npydantic>=1.9\r\npypika>=0.48.9\r\nPyYAML>=6.0.0\r\nrich>=10.11.0\r\ntenacity>=8.2.3\r\ntokenizers>=0.13.2,<=0.20.3\r\ntqdm>=4.65.0\r\ntyper>=0.9.0\r\ntyping_extensions>=4.5.0\r\nuvicorn[standard]>=0.18.3\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-12-20T07:21:39+00:00",
        "body": "hey @carmeloacosta there are couple of ways to get your Chroma version:\r\n\r\ncurl\r\n\r\n\r\n```bash\r\ncurl -v http://localhost:8000/api/v1/version\r\n```\r\n\r\ndocker\r\n\r\n```bash\r\ndocker exec <chroma_container_id> /bin/bash -c \"python3 -c 'import chromadb;print(chromadb.__version__)'\"\r\n```\r\n\r\nAs a general recommendation I would suggest to avoid using `latest` tag. Use a specific version e.g. `0.5.23`."
      },
      {
        "author": "carmeloacosta",
        "created_at": "2024-12-20T08:58:46+00:00",
        "body": "As you suggested, I used version chromadb-client==0.5.23 and everything works fine again.\r\nThank you very much, @tazarov \r\n\r\n "
      },
      {
        "author": "tazarov",
        "created_at": "2024-12-20T09:06:53+00:00",
        "body": "@carmeloacosta, thanks for using Chroma. Happy holidays 🎄"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3339"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3334,
    "title": "[Bug]: Basic/LRU Segment Cache is not thread-safe",
    "body": "### What happened?\n\nA user on discord brought up the following error when discussing memory management strategies and the use of the LRU cache:\r\n\r\n![image](https://github.com/user-attachments/assets/5c2826af-0799-48c7-bc2c-b7aef1a97252)\r\n\r\n![image](https://github.com/user-attachments/assets/065a52eb-339a-4c6d-a27d-da0909faba5d)\r\n\r\nRef: https://discord.com/channels/1073293645303795742/1318044900134092920/1318478281468805152\r\n\r\n\r\nAfter some digging and experimentation, turns out this is a thread-safety issue with LRU Segment cache implementation (also applies to the Basic cache, granted that there isn't much that can go wrong there with the current implementation).\r\n\r\nAs it turns out the LRU cache never had proper testing.\r\n\r\nA simple test can reproduce the issue:\r\n\r\n```py\r\nimport threading\r\nimport numpy as np\r\nimport pytest\r\nimport uuid\r\nfrom typing import Dict\r\n\r\nfrom chromadb.segment.impl.manager.cache.cache import SegmentLRUCache\r\nfrom chromadb.types import Segment, SegmentScope\r\n\r\n\r\ndef new_segment(collection_id: uuid.UUID) -> Segment:\r\n    return Segment(\r\n        id=uuid.uuid4(),\r\n        type=\"test\",\r\n        scope=SegmentScope.VECTOR,\r\n        collection=collection_id,\r\n        metadata=None,\r\n        file_paths={},\r\n    )\r\n\r\n\r\n@pytest.fixture\r\ndef cache_setup():\r\n    def _get_segment_disk_size(key: uuid.UUID) -> int:\r\n        return np.random.randint(1, 100)\r\n\r\n    def callback_cache_evict(segment: Segment) -> None:\r\n        pass\r\n\r\n    class SetupData:\r\n        def __init__(self):\r\n            self.cache = SegmentLRUCache(\r\n                capacity=1000,\r\n                callback=lambda k, v: callback_cache_evict(v),\r\n                size_func=lambda k: _get_segment_disk_size(k),\r\n            )\r\n            self.iterations = 10000\r\n            self.num_threads = 50\r\n            self.errors: Dict[str, int] = {\r\n                \"concurrency_error\": 0\r\n            }\r\n            self.lock = threading.Lock()\r\n\r\n    return SetupData()\r\n\r\n\r\ndef test_thread_safety(cache_setup):\r\n    \"\"\"Test that demonstrates thread safety issues in the LRU cache\"\"\"\r\n\r\n    def worker():\r\n        \"\"\"Worker that performs multiple cache operations\"\"\"\r\n        iter =0\r\n        try:\r\n            while cache_setup.errors[\"concurrency_error\"] <=0:\r\n                iter += 1\r\n                key = uuid.uuid4()\r\n                segment = new_segment(key)\r\n                cache_setup.cache.set(key, segment)\r\n                if iter >= cache_setup.iterations:\r\n                    print(f\"Stopping due to max iterations: {iter} reached\")\r\n                    break\r\n\r\n        except Exception as e:\r\n            if \"dictionary changed size during iteration\" in str(e):\r\n                with cache_setup.lock:\r\n                    cache_setup.errors[\"concurrency_error\"] += 1\r\n\r\n    # Create and start threads\r\n    threads = []\r\n    for _ in range(cache_setup.num_threads):\r\n        t = threading.Thread(target=worker)\r\n        threads.append(t)\r\n        t.start()\r\n\r\n    # Wait for all threads to complete\r\n    for t in threads:\r\n        t.join()\r\n\r\n    # Assert that we found thread safety issues\r\n    assert cache_setup.errors[\"concurrency_error\"] > 0, \"Expected to find thread safety issues but none were detected\"\r\n```\r\n\n\n### Versions\n\nChroma 0.4.23+, any python version and any OS\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-12-19T13:17:52+00:00",
    "closed_at": "2025-01-02T12:15:15+00:00",
    "updated_at": "2025-01-02T12:15:15+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug,Local Chroma,by-chroma",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 334.9563888888889,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3334"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3324,
    "title": "[Bug]: Chroma is not ephemeral when persisted_directory=None",
    "body": "### What happened?\n\n\r\n```python\r\nfrom langchain.vectorstores import Chroma\r\nfrom langchain_community.vectorstores.utils import filter_complex_metadata\r\nfrom langchain_openai import OpenAIEmbeddings\r\n\r\ndef retrieval_gpt_generate(query: str,\r\n                           retrieved_documents: List[Document],\r\n                           ):\r\n    texts = text_splitter.split_documents(retrieved_documents)\r\n    embeddings = OpenAIEmbeddings(openai_api_key=constants.OPENAI_API_KEY, max_retries=1000)\r\n    docsearch = Chroma.from_documents(filter_complex_metadata(texts), embeddings, persist_directory=None)\r\n    \r\n    doc_retriever = docsearch.as_retriever(search_kwargs={\"k\": 5})\r\n    topk_relevant_passages = doc_retriever.get_relevant_documents(query)\r\n    return topk_relevant_passages\r\n\r\nfor each new {query, retrieved_documents}:\r\n\ttopk_relevant_passages  = retrieval_gpt_generate(query, retrieved_documents)\r\n\tprint(topk_relevant_passages)\r\n```\r\n\r\n### Description\r\n\r\nThe `topk_relevant_passages` includes the one from the previous iteration, that is, it would use the previous retrieved_documents. I am pretty use the retrieved_documents input is entirely different for each iteration. I checked the intermediate docsearch, it is persisted. But I believe by `persist_directory=None`, the RAG should be ephemeral in-memory. \n\n### Versions\n\nChromabd 0.5.23\n\n### Relevant log output\n\n```shell\nPassage1\r\nPassage2 # Using the source from the previous iteration (it shouldn’t)\r\nPassage3\n```\n",
    "state": "closed",
    "created_at": "2024-12-17T19:47:43+00:00",
    "closed_at": "2024-12-17T21:42:07+00:00",
    "updated_at": "2024-12-17T21:42:07+00:00",
    "author": "realliyifei",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1.9066666666666667,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-12-17T21:42:07+00:00",
        "body": "Hi @realliyifei. We don't maintain the `from_documents` function. LangChain uses our API under the hood, so I suggest opening an issue with them."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3324"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3311,
    "title": "[Bug]: unexpected keyword argument 'proxies' in embedding_functions.OpenAIEmbeddingFunction",
    "body": "### What happened?\r\n\r\nWhen I run the example notebook below in Google Colab I am getting an error \r\n\r\nhttps://github.com/chroma-core/chroma/blob/main/examples/basic_functionality/alternative_embeddings.ipynb\r\n\r\nCode that errors: \r\n\r\n```\r\n# Using OpenAI Embeddings. This assumes you have the openai package installed\r\nopenai_ef = embedding_functions.OpenAIEmbeddingFunction(\r\n    api_key=\"OPENAI_KEY\", # Replace with your own OpenAI API key\r\n    model_name=\"text-embedding-ada-002\"\r\n)\r\n```\r\n\r\nError:  TypeError: Client.__init__() got an unexpected keyword argument 'proxies'\r\n\r\nThis happens even with a correct OpenAI key \r\n\r\nIt seems to be related to this https://community.openai.com/t/error-with-openai-1-56-0-client-init-got-an-unexpected-keyword-argument-proxies/1040332/10\r\n\r\nUsing !pip -q install openai==1.55.3 httpx==0.27.2 --force-reinstall seems to fix the issue\r\n\r\nI have tested it in 5.23, 5.21 & 5.3\r\n\r\n\r\n\r\n\r\n### Versions\r\n\r\nChroma 5.23, 5.21 & 5.3 \r\n\r\n### Relevant log output\r\n\r\n```shell\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-7-9e842cd0deee> in <cell line: 2>()\r\n      1 # Using OpenAI Embeddings. This assumes you have the openai package installed\r\n----> 2 openai_ef = embedding_functions.OpenAIEmbeddingFunction(\r\n      3     api_key=\"OPENAI_KEY\", # Replace with your own OpenAI API key\r\n      4     model_name=\"text-embedding-ada-002\"\r\n      5 )\r\n\r\n3 frames\r\n/usr/local/lib/python3.10/dist-packages/openai/_base_client.py in __init__(self, **kwargs)\r\n    753         kwargs.setdefault(\"limits\", DEFAULT_CONNECTION_LIMITS)\r\n    754         kwargs.setdefault(\"follow_redirects\", True)\r\n--> 755         super().__init__(**kwargs)\r\n    756 \r\n    757 \r\n\r\nTypeError: Client.__init__() got an unexpected keyword argument 'proxies'\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-12-16T11:52:22+00:00",
    "closed_at": "2024-12-17T21:21:57+00:00",
    "updated_at": "2024-12-17T21:21:58+00:00",
    "author": "samwit",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 33.49305555555556,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-16T13:36:14+00:00",
        "body": "@samwit, I've just tested with:\r\n\r\n```\r\nName: openai\r\nVersion: 1.41.0\r\nSummary: The official Python library for the openai API\r\nHome-page: https://github.com/openai/openai-python\r\n\r\nName: httpx\r\nVersion: 0.27.0\r\nSummary: The next generation HTTP client.\r\nHome-page: https://github.com/encode/httpx\r\n```\r\n\r\nWith the following code:\r\n\r\n```py\r\nimport uuid\r\n\r\nimport chromadb\r\nfrom chromadb.utils.embedding_functions.openai_embedding_function import OpenAIEmbeddingFunction\r\n\r\nef = OpenAIEmbeddingFunction(api_key=\"sk-\")\r\n\r\n\r\nclient = chromadb.Client()\r\n\r\ncol = client.get_or_create_collection(\"test\",embedding_function=ef)\r\n\r\ncol.add(documents=[f\"Document {i}\" for i in range(10)], ids=[f\"{uuid.uuid4()}\" for _ in range(10)])\r\n```\r\n\r\nChroma's EmbeddingFunction (wrapper) to `openai` client does not indeed support `proxies` or `kwargs` of any sort:\r\n\r\n```py\r\nclass OpenAIEmbeddingFunction(EmbeddingFunction[Documents]):\r\n    def __init__(\r\n        self,\r\n        api_key: Optional[str] = None,\r\n        model_name: str = \"text-embedding-ada-002\",\r\n        organization_id: Optional[str] = None,\r\n        api_base: Optional[str] = None,\r\n        api_type: Optional[str] = None,\r\n        api_version: Optional[str] = None,\r\n        deployment_id: Optional[str] = None,\r\n        default_headers: Optional[Mapping[str, str]] = None,\r\n        dimensions: Optional[int] = None,\r\n    ):\r\n```\r\n\r\nAre you looking to proxy your requests to OpenAI?\r\n\r\n\r\n"
      },
      {
        "author": "itaismith",
        "created_at": "2024-12-17T21:21:57+00:00",
        "body": "Hi @samwit. This is an OpenAI issue. In the Chroma `OpenAIEmbeddingFunction` we instantiate an OpenAI client (`openai.OpenAI(api_key=...)`), which is where the error comes from. Looks like the fixed it in version `1.56.0`, so a `!pip install openai==1.56.0` should fix it for you. Chroma does not enforce a specific `openai` version. Let us know if you still think we can help somehow!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3311"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3309,
    "title": "[Bug]: Double deserialization (single node and hosted Chroma version affected)",
    "body": "### What happened?\n\nSince Chroma `0.5.16` (#2954), the API routes have been defined with `body` route parameter:\r\n\r\nhttps://github.com/chroma-core/chroma/blob/23001352ef19f40339985e6e4052809dea66ce4a/chromadb/server/fastapi/__init__.py#L622-L629\r\n\r\nAccording to FastAPI [docs](https://fastapi.tiangolo.com/tutorial/body/#results) using `body: ObjectModel = Body(...)` will force FastAPI to do serialization to JSON of the body. This means that we'll serialize each payload twice, once as part of the route parameter `body` and a second time with orjson. This leads to a relatively big performance penalty.\r\n\r\nThe issue can easily be seen by updating `app.py` as follows and running a few add/delete etc requests:\r\n\r\n```py\r\nimport chromadb\r\nimport traceback\r\nimport sys\r\nimport chromadb.config\r\nfrom chromadb.server.fastapi import FastAPI\r\n\r\ndef trace_calls(frame, event, arg):\r\n    if event != \"call\":\r\n        return\r\n    code = frame.f_code\r\n    # Filter for the specific decoding function in the JSON module\r\n    if \"json\" in code.co_filename and code.co_name == \"decode\":\r\n        print(f\"Decoding JSON at {code.co_filename}:{frame.f_lineno}\")\r\n        print(\"Call stack:\")\r\n        for line in traceback.format_stack(frame):\r\n            print(line.strip())\r\n        print(\"-\" * 80)  # Separator for readability\r\n    return trace_calls\r\n\r\nsys.settrace(trace_calls)\r\n\r\nsettings = chromadb.config.Settings()\r\nserver = FastAPI(settings)\r\napp = server.app()\r\n```\r\n\r\nThe above will print the stack frame where stdlib json deserialization happens.\r\n\n\n### Versions\n\nChroma 0.5.16-current, any python, any OS\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-12-16T09:41:58+00:00",
    "closed_at": "2024-12-18T07:51:45+00:00",
    "updated_at": "2024-12-18T07:51:45+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug,by-chroma",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 46.16305555555556,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3309"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3307,
    "title": "[Bug]:  Expected where to have exactly one operator ，got {}",
    "body": "### Describe the problem\n\nExpected where to have exactly one operator ，got {}\n\n### Describe the proposed solution\n\ninvoke\n\n### Alternatives considered\n\n_No response_\n\n### Importance\n\ni cannot use Chroma without it\n\n### Additional Information\n\n_No response_",
    "state": "closed",
    "created_at": "2024-12-16T02:15:07+00:00",
    "closed_at": "2024-12-17T21:42:39+00:00",
    "updated_at": "2024-12-17T21:42:39+00:00",
    "author": "deyou827",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug,version-mismatch",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 43.458888888888886,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-16T13:12:08+00:00",
        "body": "hey @deyou827, the issue is related to using an older client version to interact with newer Chroma server. Have a look here - https://docs.trychroma.com/deployment/migration#v0.5.17"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3307"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3292,
    "title": "[Bug]: ",
    "body": "### What happened?\r\n\r\n\r\nWhen I deploy the Chroma vector service through an interface, there is too much vector data. I need to delete Chroma.sqlite3 and other files in the persist-directory directory. However, after deleting the files, when calling the interface again, the following error will occur: OperationalError: attempt to write a readonly database``\r\n\r\n```py\r\nimport json\r\nimport requests\r\nimport re\r\nfrom log import LOGGER\r\nfrom flask import request, Flask\r\nimport os\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain_community.vectorstores import Chroma\r\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\r\nfrom langchain.docstore.document import Document\r\nfrom urllib.parse import urlparse\r\n\r\n\r\nDB_PATH = \"/opt/model/db\"\r\nDEVICE = 'cuda'\r\nBERT_MODEL = \"/opt/model/models--infgrad--stella-base-zh-v3-1792d\"\r\nEMB_FUNC = HuggingFaceEmbeddings(model_name=BERT_MODEL,\r\n                                 model_kwargs={'device': DEVICE},\r\n                                 encode_kwargs={'normalize_embeddings': True}\r\n                                 )\r\n\r\ndef add_files_to_db(raw_docs, collection_name):\r\n    documents = [Document(page_content=raw_docs, metadata={'source': collection_name})]\r\n    text_splitter = RecursiveCharacterTextSplitter(chunk_size=300, chunk_overlap=50)\r\n    docs = text_splitter.split_documents(documents)\r\n    db = Chroma.from_documents(docs, EMB_FUNC, persist_directory=DB_PATH, collection_name=collection_name)\r\n    db.persist()\r\n\r\ndef query_db(db: Chroma, query: str = \"\"):\r\n    query_emb = EMB_FUNC.embed_query(query)\r\n    docs = db.similarity_search_by_vector(query_emb, k = 15)\r\n    docs_dict = [doc.page_content for doc in docs]\r\n    return docs_dict\r\n\r\n\r\napp = Flask(__name__)\r\n@app.route('/retrieval', methods=['POST'])\r\ndef coder_write():\r\n    try:\r\n        param = request.get_json()\r\n    except:\r\n        param = request.form\r\n    query = param['query']\r\n    parse_doc = param['doc']\r\n    flag = param['flag']\r\n    LOGGER.info(f\"flag值：{flag}\")\r\n    session_id = param['session_id']\r\n    collection_name = session_id\r\n    if flag == '1':\r\n        add_files_to_db(parse_doc, collection_name)\r\n        db = Chroma(persist_directory=DB_PATH, embedding_function=EMB_FUNC, collection_name=collection_name)\r\n        docs = query_db(db, query)\r\n        LOGGER.info(f\"相似性度量后的docs：{docs}\")\r\n    else:\r\n        db = Chroma(persist_directory=DB_PATH, embedding_function=EMB_FUNC, collection_name=collection_name)\r\n        docs = query_db(db, query)\r\n        LOGGER.info(f\"第二轮问答相似性度量后的docs：{docs}\")\r\n\r\n    search = [(i, j) for i, j in enumerate(docs)]\r\n    r = ''\r\n    for i, j in search:\r\n        r += f\"\"\"\\n（{i+1}）{j}\"\"\"\r\n    result = f\"{r}\"\r\n    LOGGER.info(f\"retrieval最终return的结果：{result}\")\r\n    return {\"status\": 1, \"result\": result}\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    IP = '0.0.0.0'\r\n    app.run(port='35010', host = IP, threaded = False)`\r\n```\r\n\r\n### Versions\r\n\r\nchroma0.5.23\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nFile /opt/miniconda/lib/python3.10/site-packages/chromadb/db/mixins/embeddings_queue.py:243, in SqlEmbeddingsQueue.submit_embeddings(self, collection_id, embeddings)\r\n    240 # The returning clause does not guarantee order, so we need to do reorder\r\n    241 # the results. https://www.sqlite.org/lang_returning.html\r\n    242 sql = f\"{sql} RETURNING seq_id, id\"  # Pypika doesn't support RETURNING\r\n--> 243 results = cur.execute(sql, params).fetchall()\r\n    244 # Reorder the results\r\n    245 seq_ids = [cast(SeqId, None)] * len(\r\n    246     results\r\n    247 )  # Lie to mypy: https://stackoverflow.com/questions/76694215/python-type-casting-when-preallocating-list\r\n\r\nOperationalError: attempt to write a readonly database\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-12-12T10:53:05+00:00",
    "closed_at": "2024-12-17T23:31:08+00:00",
    "updated_at": "2024-12-17T23:31:08+00:00",
    "author": "4AM-GodVZz",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 132.63416666666666,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-16T13:52:20+00:00",
        "body": "@4AM-GodVZz, how do you run the above flask app? If you use multiple workers, it is possible that two concurrent calls run in those workers. Chroma is not process safe and the way that workers operate in `uvicorn` or `gunicorn` is by spawning a separate process. Therefore concurrent calls will likely end up in the error above.\r\n\r\nThe root cause is sqlite3 not being process safe and one process holding exclusive lock on the DB.\r\n\r\nIf on the other hand you are not running with multiple workers, is it possible that another process (outside of the flask app) is accessing Chroma's dir - `DB_PATH`?\r\n\r\n"
      },
      {
        "author": "Cirr0e",
        "created_at": "2024-12-17T04:33:43+00:00",
        "body": "Hey! I see what's happening here. The issue occurs because of how Chroma handles database access and file permissions. Let me help you resolve this.\n\nFirst, there are a few important things to note:\n1. Chroma is thread-safe but not process-safe\n2. After deleting the SQLite files, proper cleanup and initialization is crucial\n\nHere's how to fix this:\n\n1. First, ensure proper cleanup when deleting the database:\n```python\nimport shutil\nimport os\n\ndef clean_chroma_db():\n    if os.path.exists(DB_PATH):\n        # Close any existing connections\n        try:\n            db = Chroma(persist_directory=DB_PATH, embedding_function=EMB_FUNC)\n            db.persist()\n            del db\n        except:\n            pass\n        # Remove the directory\n        shutil.rmtree(DB_PATH)\n        # Ensure the base directory exists\n        os.makedirs(DB_PATH, exist_ok=True)\n```\n\n2. Modify your Flask application to use a single client instance:\n```python\n# At the module level\n_db_client = None\n\ndef get_db_client():\n    global _db_client\n    if _db_client is None:\n        _db_client = Chroma(persist_directory=DB_PATH, \n                           embedding_function=EMB_FUNC)\n    return _db_client\n\n@app.route('/retrieval', methods=['POST'])\ndef coder_write():\n    # ... your existing code ...\n    if flag == '1':\n        add_files_to_db(parse_doc, collection_name)\n        db = get_db_client()  # Use the singleton client\n        docs = query_db(db, query)\n    else:\n        db = get_db_client()  # Use the singleton client\n        docs = query_db(db, query)\n```\n\n3. Important considerations for deployment:\n- If you're using multiple workers (gunicorn/uvicorn), set `workers=1`\n- For scaling, consider using a connection pool or a separate Chroma server instance\n\nThe key changes here:\n- Using a singleton pattern for the Chroma client\n- Proper cleanup when deleting the database\n- Ensuring proper file permissions after recreation\n\nBased on similar issues (see chromadb#1441), this approach should resolve the readonly database error.\n\nIf you're still seeing issues, could you let me know:\n1. Are you running multiple workers in your Flask deployment?\n2. What are the file permissions on your DB_PATH directory after deletion?\n\nReferences:\n- Issue #1441: Process safety and client management\n- Issue #1209: Multiple client access patterns\n- Chroma documentation on client usage: https://docs.trychroma.com/usage-guide\n\nLet me know if this helps or if you need any clarification!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3292"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3276,
    "title": "[Bug]: Start with Docker on macos fails with pydantic error",
    "body": "### What happened?\n\nFollowed installation guide, but start fails  when running  r2r serve --docker --config-name=local_llm\r\npip install r2r\r\n  ollama pull llama3.1\r\n  ollama pull mxbai-embed-large\r\n  ollama serve\r\nr2r serve --docker --config-name=local_llm\r\n\n\n### Versions\n\nmacos 15.1 (24B83)\r\nDocker\r\nEngine: 27.3.1\r\nCompose: v2.30.3-desktop.1\n\n### Relevant log output\n\n```shell\nr2r serve --docker --config-name=local_llm\r\n\r\nSpinning up an R2R deployment...\r\nRunning on 0.0.0.0:7272, with docker=True\r\nUsing image: ragtoriches/prod:3.3.9\r\nR2R now runs on port 7272 by default!\r\nPulling Docker images...\r\nCalling `docker compose -f /Users/miro/anaconda3/lib/python3.11/site-packages/cli/utils/../../compose.yaml --project-name r2r --profile postgres pull`\r\n[+] Pulling 3/3\r\n ✔ r2r Pulled\r\n ✔ r2r-dashboard Pulled\r\n ✔ postgres Pulled\r\n Starting Docker Compose setup...\r\nCalling `docker compose -f /Users/miro/anaconda3/lib/python3.11/site-packages/cli/utils/../../compose.yaml --project-name r2r --profile postgres up -d`\r\n[+] Running 3/0\r\n ✔ Container r2r-r2r-dashboard-1  Running\r\n ✔ Container r2r-r2r-1            Running \r\n ✔ Container r2r-postgres-1       Running\r\nWaiting for all services to become healthy...\r\nTimeout waiting for r2r to be healthy.\r\n\r\n\r\ndocker log:\r\n\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_CONFIG_NAME: local_llm\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_CONFIG_PATH: \r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_PROJECT_NAME: r2r_default\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_POSTGRES_HOST: postgres\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_POSTGRES_DBNAME: postgres\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_POSTGRES_PORT: 5432\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_POSTGRES_PASSWORD: postgres\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Environment R2R_PROJECT_NAME: None\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Started server process [7]\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - INFO - Waiting for application startup.\r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - ERROR - Traceback (most recent call last):\r\n2024-12-10 12:10:34   File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 693, in lifespan\r\n2024-12-10 12:10:34     async with self.lifespan_context(app) as maybe_state:\r\n2024-12-10 12:10:34                ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/usr/local/lib/python3.12/contextlib.py\", line 210, in __aenter__\r\n2024-12-10 12:10:34     return await anext(self.gen)\r\n2024-12-10 12:10:34            ^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/main/app_entry.py\", line 25, in lifespan\r\n2024-12-10 12:10:34     r2r_app = await create_r2r_app(\r\n2024-12-10 12:10:34               ^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/main/app_entry.py\", line 53, in create_r2r_app\r\n2024-12-10 12:10:34     config = R2RConfig.load(config_name=config_name, config_path=config_path)\r\n2024-12-10 12:10:34              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/main/config.py\", line 209, in load\r\n2024-12-10 12:10:34     return cls.from_toml(R2RConfig.CONFIG_OPTIONS[config_name])\r\n2024-12-10 12:10:34            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/main/config.py\", line 154, in from_toml\r\n2024-12-10 12:10:34     return cls(config_data)\r\n2024-12-10 12:10:34            ^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/main/config.py\", line 121, in __init__\r\n2024-12-10 12:10:34     self.ingestion = IngestionConfig.create(**self.ingestion, app=self.app)  # type: ignore\r\n2024-12-10 12:10:34                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/app/core/base/providers/base.py\", line 42, in create\r\n2024-12-10 12:10:34     instance = cls(**filtered_kwargs)  # type: ignore\r\n2024-12-10 12:10:34                ^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34   File \"/usr/local/lib/python3.12/site-packages/pydantic/main.py\", line 214, in __init__\r\n2024-12-10 12:10:34     validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)\r\n2024-12-10 12:10:34                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:10:34 pydantic_core._pydantic_core.ValidationError: 1 validation error for IngestionConfig\r\n2024-12-10 12:10:34 extra_parsers.chunks_for_document_summary\r\n2024-12-10 12:10:34   Input should be a valid string [type=string_type, input_value=16, input_type=int]\r\n2024-12-10 12:10:34     For further information visit https://errors.pydantic.dev/2.10/v/string_type\r\n2024-12-10 12:10:34 \r\n2024-12-10 12:10:34 2024-12-10 11:10:34 - ERROR - Application startup failed. Exiting.\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_CONFIG_NAME: local_llm\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_CONFIG_PATH: \r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_PROJECT_NAME: r2r_default\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_POSTGRES_HOST: postgres\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_POSTGRES_DBNAME: postgres\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_POSTGRES_PORT: 5432\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_POSTGRES_PASSWORD: postgres\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Environment R2R_PROJECT_NAME: None\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Started server process [7]\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - INFO - Waiting for application startup.\r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - ERROR - Traceback (most recent call last):\r\n2024-12-10 12:11:37   File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 693, in lifespan\r\n2024-12-10 12:11:37     async with self.lifespan_context(app) as maybe_state:\r\n2024-12-10 12:11:37                ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/usr/local/lib/python3.12/contextlib.py\", line 210, in __aenter__\r\n2024-12-10 12:11:37     return await anext(self.gen)\r\n2024-12-10 12:11:37            ^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/main/app_entry.py\", line 25, in lifespan\r\n2024-12-10 12:11:37     r2r_app = await create_r2r_app(\r\n2024-12-10 12:11:37               ^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/main/app_entry.py\", line 53, in create_r2r_app\r\n2024-12-10 12:11:37     config = R2RConfig.load(config_name=config_name, config_path=config_path)\r\n2024-12-10 12:11:37              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/main/config.py\", line 209, in load\r\n2024-12-10 12:11:37     return cls.from_toml(R2RConfig.CONFIG_OPTIONS[config_name])\r\n2024-12-10 12:11:37            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/main/config.py\", line 154, in from_toml\r\n2024-12-10 12:11:37     return cls(config_data)\r\n2024-12-10 12:11:37            ^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/main/config.py\", line 121, in __init__\r\n2024-12-10 12:11:37     self.ingestion = IngestionConfig.create(**self.ingestion, app=self.app)  # type: ignore\r\n2024-12-10 12:11:37                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/app/core/base/providers/base.py\", line 42, in create\r\n2024-12-10 12:11:37     instance = cls(**filtered_kwargs)  # type: ignore\r\n2024-12-10 12:11:37                ^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37   File \"/usr/local/lib/python3.12/site-packages/pydantic/main.py\", line 214, in __init__\r\n2024-12-10 12:11:37     validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)\r\n2024-12-10 12:11:37                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n2024-12-10 12:11:37 pydantic_core._pydantic_core.ValidationError: 1 validation error for IngestionConfig\r\n2024-12-10 12:11:37 extra_parsers.chunks_for_document_summary\r\n2024-12-10 12:11:37   Input should be a valid string [type=string_type, input_value=16, input_type=int]\r\n2024-12-10 12:11:37     For further information visit https://errors.pydantic.dev/2.10/v/string_type\r\n2024-12-10 12:11:37 \r\n2024-12-10 12:11:37 2024-12-10 11:11:37 - ERROR - Application startup failed. Exiting.\n```\n",
    "state": "closed",
    "created_at": "2024-12-10T11:23:14+00:00",
    "closed_at": "2024-12-17T23:54:57+00:00",
    "updated_at": "2024-12-17T23:54:57+00:00",
    "author": "mirozahorak",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 180.5286111111111,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-10T17:26:47+00:00",
        "body": "@mirozahorak, not sure if this is a Chroma related issue but have a look at your configuration seems that `chunks_for_document_summary` parameter is expected to be string but instead is integer. R2R provider suggests otherwise that the param should be int - https://github.com/SciPhi-AI/R2R/blob/d3ae925d512322035957ab9016fc9e825bacaca4/py/core/base/providers/ingestion.py#L88\r\n\r\nRecently I've found some weird issues with `pydantic`. Check your version and try to use `2.10.1` or earlier version"
      },
      {
        "author": "mirozahorak",
        "created_at": "2024-12-10T17:29:00+00:00",
        "body": "Ah. I thought that because it is running out of docker it is all managed in the container. "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3276"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3271,
    "title": "Dependency bug from chroma 0.5.23 at SentenceTransformerEmbeddingFunction",
    "body": "Transformer library updated to use \"tokenizers>=0.21,<0.22\" (released 4 days ago)\r\nWhere in chroma we are still point to 'tokenizers >= 0.13.2, <= 0.20.3',\r\n\r\nWhich creating dependency conflict, can you please update tokenizers to latest package.\r\n\r\nHere is the I am trying to run \r\n```\r\nsentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(\r\n    model_name=\"all-MiniLM-L6-v2\"\r\n)\r\n```\r\nLinks:\r\nhttps://github.com/huggingface/transformers/blob/34f4080ff59b1668d919a1ba9f8bc4a3a2a3f478/setup.py#L183C5-L183C30\r\nhttps://github.com/chroma-core/chroma/blob/1110d07f17c75e44c372361fd2684f5b08edec0d/pyproject.toml#L31C3-L31C37\r\n\r\nI tried to use lower version, which started creating more issues, related to torch 2.5.1 compatible not found. \r\n\r\nPlatform:\r\nMacOS\r\nPython 3.12.4",
    "state": "closed",
    "created_at": "2024-12-09T22:41:00+00:00",
    "closed_at": "2025-01-03T20:51:46+00:00",
    "updated_at": "2025-01-03T20:51:46+00:00",
    "author": "kirankotari",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 598.1794444444445,
    "first_comments": [
      {
        "author": "kokhoor",
        "created_at": "2024-12-17T05:52:19+00:00",
        "body": "is it safe to use tokenizers version 0.21.0 with chromadb?"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T20:51:46+00:00",
        "body": "We removed the upper bound on tokenizers. In Chroma v0.6.0 we have `tokenizers>=0.13.2`"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3271"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3265,
    "title": "[Install issue]: Chromadb and transformers require different versions of tokenizer.",
    "body": "### What happened?\r\n\r\n![image](https://github.com/user-attachments/assets/6ae22337-61ba-4b1e-abcb-ca32caebc2a9)\r\n\r\nUpgrading tokenizer then gives me the same warning for Chromadb\r\n\r\n\r\n### Versions\r\n\r\nchromadb-0.5.23\r\npip 24.3.1 \r\npython 3.12\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-12-08T08:04:45+00:00",
    "closed_at": "2025-01-03T20:52:55+00:00",
    "updated_at": "2025-01-03T20:52:55+00:00",
    "author": "ayaazuddin",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 636.8027777777778,
    "first_comments": [
      {
        "author": "Cirr0e",
        "created_at": "2024-12-17T04:37:05+00:00",
        "body": "Hey there! I see you're running into a dependency conflict with tokenizers. This is actually a known issue when using newer versions of chromadb with certain package combinations. Let me help you resolve this.\n\nHere's what I recommend:\n\n1. First, create a fresh virtual environment with Python 3.10 (it has better compatibility with these packages):\n```bash\npython3.10 -m venv venv\nsource venv/bin/activate  # or `venv\\Scripts\\activate` on Windows\n```\n\n2. Install the packages in this specific order:\n```bash\npip install --upgrade pip\npip install tokenizers==0.22.0\npip install transformers\npip install chromadb==0.5.23\n```\n\nIf you absolutely need to use Python 3.12, you can try this alternative approach:\n```bash\npip install chromadb==0.5.23 --no-deps\npip install tokenizers==0.22.0\npip install -r requirements.txt  # if you have one\n```\n\nImportant Notes:\n- Make sure to backup any existing data before making these changes\n- You might need to reinstall other dependencies after this\n- If you're using transformers, you may need to pin its version as well\n\nThe reason this happens is that chromadb and transformers both depend on tokenizers but sometimes require different versions. By installing tokenizers first with a compatible version, we can avoid the conflict.\n\nLet me know if you run into any issues with these steps, and I'll help you troubleshoot further!\n\nReferences:\n- Similar issue was resolved in chromadb issues with version pinning\n- Tokenizers compatibility matrix from their documentation\n\nWould you like me to provide more specific guidance about any of these steps?"
      },
      {
        "author": "sorgfresser",
        "created_at": "2024-12-18T09:17:40+00:00",
        "body": "Pretty sure it is fixed with https://github.com/chroma-core/chroma/pull/3322"
      },
      {
        "author": "Vraised3",
        "created_at": "2024-12-25T12:45:03+00:00",
        "body": "Facing the same issue for the past few days; even after two weeks since this post.\r\n\r\nGot the following errors when using normal `pip install chromadb`:\r\n\r\nchromadb 0.5.23 requires tokenizers<=0.20.3,>=0.13.2\r\ntransformers 4.47.1 requires tokenizers<0.22,>=0.21\r\n\r\nThis makes it nearly impossible to use chromadb.\r\n\r\nTried @Cirr0e's solution:\r\n```\r\npip install --upgrade pip\r\npip install tokenizers==0.22.0\r\npip install transformers\r\npip install chromadb==0.5.23\r\n```\r\n\r\nDidn't work:\r\ntransformers 4.47.1 requires tokenizers<0.22,>=0.21, but you have tokenizers 0.20.3 which is incompatible.\r\n\r\nMaybe this required downgrading the transformers version, such that tokenizers is in line with transformers and chromadb requirements.\r\n\r\nIf anyone knows such a version, please comment."
      },
      {
        "author": "headbug",
        "created_at": "2024-12-25T21:14:15+00:00",
        "body": "I'm confused, as of right now when I'm looking at the tokenizer project page, the latest release is still 0.21.0 (https://pypi.org/project/tokenizers/0.21.0/ ) \r\n\r\nWhy is 0.22.0 put down in the solution above?!"
      },
      {
        "author": "Dzalhaqi",
        "created_at": "2024-12-27T12:33:37+00:00",
        "body": "i can fix this by downgrade the tranformers to version 4.45.0\r\n`pip install transformers==4.45.0`\r\n\r\nmy tokenizers version is 0.20.3 and chromadb version is 0.5.23"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3265"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3249,
    "title": "[Feature Request]:  query by distance",
    "body": "### Describe the problem\n\nChromaDB can be configured to return n number of documents, but sometimes the documents dont relate to the query\n\n### Describe the proposed solution\n\nIt would be good to add an extra parameter to the query method to return documents only when a given similarity is reached. It is, if i set it to return 2 documents, and the distances are 1.05 and 1.78, if i set the new distance parameter to 1.5 for example, it will only return the first document\r\n\n\n### Alternatives considered\n\n_No response_\n\n### Importance\n\nwould make my life easier\n\n### Additional Information\n\n_No response_",
    "state": "closed",
    "created_at": "2024-12-05T12:22:07+00:00",
    "closed_at": "2025-01-06T21:45:30+00:00",
    "updated_at": "2025-01-06T21:45:30+00:00",
    "author": "javixeneize",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "enhancement",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 777.3897222222222,
    "first_comments": [
      {
        "author": "frieda-huang",
        "created_at": "2024-12-09T15:53:52+00:00",
        "body": "Hi @javixeneize! I agree, it’s a good feature to have. I’ve opened PR #3268 to address it and will wait for the Chroma team’s feedback."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3249"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3248,
    "title": "[Bug]: Expected where to have exactly one operator",
    "body": "### What happened?\n\nWhile performing a really simple query like `Give me 10 users` with chroma db as the vector db backend for our internal tool, we came across the error: `Expected where document to have exactly one operator, got {}`. Seems like there is a hard check in chroma db where the `validate_where` function only accepts a dictionary with one parameter present while we are passing None and hence it is failing.\r\n\r\n### Environment\r\n- we tried with two version of python: python3.11 and python3.9.16\r\n- ChromaDB as the vector DB\r\n- FastAPI based backend which we are using to query LLM models.\r\n\r\n### Steps to reproduce\r\n1. Attempt a simple Chroma DB collection query without complex filtering\r\n2. Observe the `Expected where to have exactly one operator` error\r\n\r\n### Workaround\r\nTemporarily removing the validation resolves the immediate issue, but is not recommended as a long-term solution.\r\n\r\n### Proposed Solution\r\nUpdate the `validate_where` function to:\r\n- Allow empty or minimal query filters\r\n- Provide more flexible validation for query construction\n\n### Versions\n\nChroma v0.5.20, Python3.11.7, Python3.9.16\n\n### Relevant log output\n\n```shell\nERROR:app.db.chroma_client:Error searching prompts: {\"error\":\"InvalidArgumentError\",\"message\":\"Expected where document to have exactly one operator, got {}\"}\r\nERROR:app.services.rag_service:Error getting query context: {\"error\":\"InvalidArgumentError\",\"message\":\"Expected where document to have exactly one operator, got {}\"}\n```\n",
    "state": "closed",
    "created_at": "2024-12-05T07:36:55+00:00",
    "closed_at": "2024-12-18T01:04:17+00:00",
    "updated_at": "2025-01-03T16:32:31+00:00",
    "author": "vishutyagi",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 305.4561111111111,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-05T12:29:40+00:00",
        "body": "@vishutyagi, the issue is likely due to your client version not matching your server version. In 0.5.17 Chroma no longer allows empty `where` clauses. Have a look here - https://docs.trychroma.com/deployment/migration#v0.5.17\r\n\r\nThe solution would be to make sure your server and client use the same version."
      },
      {
        "author": "epuerta9",
        "created_at": "2024-12-06T19:48:18+00:00",
        "body": "dang, just encountered this through llama-index vector lib\r\n\r\nsomething as simple as \r\n\r\n```    \r\nvector_store = ChromaVectorStore(chroma_collection=chroma_collection)\r\n    index = VectorStoreIndex.from_vector_store(\r\n        vector_store,\r\n    )\r\n    query_engine = index.as_query_engine(chat_mode=\"best\", llm=llm, verbose=True)\r\n    response = query_engine.query(\"summarize this code\")\r\n```"
      },
      {
        "author": "itaismith",
        "created_at": "2024-12-18T01:04:17+00:00",
        "body": "Hi @epuerta9. The solution is indeed to have both your Chroma client and server with the same version, preferably the latest one. If you use Chroma via LlamaIndex you can still upgrade Chroma and things should work just fine."
      },
      {
        "author": "git-ekeh",
        "created_at": "2025-01-03T16:32:30+00:00",
        "body": "Thank you @itaismith this solution worked for me."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3248"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3238,
    "title": "[Install issue]: Can't pip install ChromaDB on Windows 11 with Python 3.12.7 and Pydantic 2.10.2",
    "body": "### What happened?\n\nI wanted to pip install chromadb on Windows 11 Pro. But the installation failed. The error log shows it needs Microsoft Visual C++ 14 or greater and I do have 14.40. \n\n### Versions\n\nPython 3.12.7, Pydantic 2.10.2 (I heard pydantic may conflict with ChromaDB.), Windows 11 Pro.\n\n### Relevant log output\n\n```shell\nBuilding wheels for collected packages: chroma-hnswlib\r\n  Building wheel for chroma-hnswlib (pyproject.toml) ... error\r\n  error: subprocess-exited-with-error\r\n\r\n  × Building wheel for chroma-hnswlib (pyproject.toml) did not run successfully.\r\n  │ exit code: 1\r\n  ╰─> [5 lines of output]\r\n      running bdist_wheel\r\n      running build\r\n      running build_ext\r\n      building 'hnswlib' extension\r\n      error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  ERROR: Failed building wheel for chroma-hnswlib\r\nFailed to build chroma-hnswlib\r\nERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (chroma-hnswlib)\n```\n",
    "state": "closed",
    "created_at": "2024-12-04T01:48:51+00:00",
    "closed_at": "2024-12-04T03:56:40+00:00",
    "updated_at": "2024-12-04T03:56:40+00:00",
    "author": "dlin95123",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "dlin95123",
    "resolution_time_hours": 2.1302777777777777,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3238"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3229,
    "title": "[Bug]: Using docker network not possible due to URL resolve",
    "body": "### What happened?\r\n\r\nThe current implementation of client creation makes it very cumbersome to work with docker networks. This is because chromadb.HttpClient checks `settings` against `args`:\r\nhttps://github.com/chroma-core/chroma/blob/8f0ab7902680b743e795f5e214fb15b07835ebff/chromadb/__init__.py#L191-L195\r\n\r\nAnd the BasHTTPClient assumes a full URL if the host starts with `http`:\r\n\r\nhttps://github.com/chroma-core/chroma/blob/8f0ab7902680b743e795f5e214fb15b07835ebff/chromadb/api/base_http_client.py#L41-L45\r\n\r\n\r\nAs a result, I can't use docker networks unless I bypass this effect by passing the settings object and the ports/complete URL.\r\n```\r\nimport os\r\nimport logging\r\n\r\nlogging.basicConfig(level=logging) \r\n\r\nCHROMA_SERVER_HOST = os.environ.get(\"CHROMA_SERVER_HOST\", \"localhost\")\r\nCHROMA_SERVER_PORT = os.environ.get(\"CHROMA_SERVER_PORT\", 8000)\r\nCHROMA_URL = f\"{CHROMA_SERVER_HOST}:{CHROMA_SERVER_PORT}/\"\r\n\r\nimport chromadb\r\nfrom chromadb import Settings\r\n\r\nsettings = Settings(\r\n    chroma_server_host=CHROMA_URL,\r\n    chroma_server_http_port=CHROMA_SERVER_PORT,\r\n)\r\n\r\nclient = chromadb.HttpClient(\r\n    host=settings.chroma_server_host,\r\n    port=settings.chroma_server_http_port,\r\n    settings=settings,\r\n)\r\n```\r\n\r\n\r\n\r\n\r\n### Versions\r\n\r\nPython 3.12.7\r\nchromadb 0.5.20\r\nghcr.io/chroma-core/chroma:0.5.20\r\n\r\n### Relevant log output\r\n\r\n```shell\r\n**[2024-12-03 09:34:12,322] INFO Connecting to ChromaDB server at http://chromadb:8000**\r\n[2024-12-03 09:34:12,608] INFO Anonymized telemetry enabled. See https://docs.trychroma.com/telemetry for more information.\r\n**[2024-12-03 09:34:12,652] DEBUG Skipping port as the user is passing a full URL**\r\n[2024-12-03 09:34:12,653] DEBUG load_ssl_context verify=True cert=None trust_env=True http2=False\r\n[2024-12-03 09:34:12,653] DEBUG load_verify_locations cafile='/usr/local/lib/python3.12/site-packages/certifi/cacert.pem'\r\n[2024-12-03 09:34:12,702] DEBUG Starting component System\r\n[2024-12-03 09:34:12,702] DEBUG Starting component Posthog\r\n[2024-12-03 09:34:12,702] DEBUG Starting component OpenTelemetryClient\r\n[2024-12-03 09:34:12,703] DEBUG Starting component FastAPI\r\n**[2024-12-03 09:34:12,703] DEBUG connect_tcp.started host='chromadb' port=80 local_address=None timeout=None socket_options=None\r\n[2024-12-03 09:34:12,704] DEBUG connect_tcp.failed exception=ConnectError(ConnectionRefusedError(111, 'Connection refused'))**\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-12-03T10:22:37+00:00",
    "closed_at": "2024-12-03T17:12:02+00:00",
    "updated_at": "2024-12-03T17:12:02+00:00",
    "author": "thesethtruth",
    "author_type": "User",
    "comments_count": 5,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "thesethtruth",
    "resolution_time_hours": 6.823611111111111,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-12-03T10:48:44+00:00",
        "body": "@thesethtruth, I admit that the current client interface that supports both endpoints and host+port separately is confusing. But if you threat them as the original intent was as separate concepts - you can either connect to an endpoint or to a host+port. In the former you must provide the full URL info including scheme, host/ip, port and path, in the latter you specify host + port and you let the client construct the URL for you.\r\n\r\nIn the code snippet above what is stopping you from doing:\r\n\r\n```py\r\nCHROMA_SERVER_HOST = os.environ.get(\"CHROMA_SERVER_HOST\", \"localhost\")\r\nCHROMA_SERVER_PORT = os.environ.get(\"CHROMA_SERVER_PORT\", 8000)\r\nCHROMA_URL = f\"http://{CHROMA_SERVER_HOST}:{CHROMA_SERVER_PORT}/\" # or https if you have configured a cert.\r\n\r\nimport chromadb\r\nfrom chromadb import Settings\r\n\r\nsettings = Settings(\r\n    chroma_server_host=CHROMA_URL,\r\n)\r\n\r\n```\r\n\r\n"
      },
      {
        "author": "thesethtruth",
        "created_at": "2024-12-03T11:53:22+00:00",
        "body": "@tazarov, thanks for the very swift response! Your suggestion is valid, except for the 'validation' parsing in the first snippet I linked in the ticket. Your suggestion yields:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.12/site-packages/chromadb/__init__.py\", line 192, in HttpClient\r\n    raise ValueError(\r\nValueError: Chroma server host provided in settings[http://chromadb:8000/] is different to the one provided in HttpClient: [localhost]\r\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2024-12-03T12:21:47+00:00",
        "body": "@thesethtruth, you have a point but then the solution for this would be to just be mindful of the env vars. The issue, as you describe lies not so much with the HttpClient config itself but in general with how pydantic Settings class works. Specifically how it interacts with env vars. I think this is what introduces the confusion and we have fair share of these popping up - https://discord.com/channels/1073293645303795742/1298075062854881291/1298263590985531415.\r\n\r\nIs there anything that dictates you must use `CHROMA_SERVER_HOST` env var? If you are creating your client programmatically, I think, it makes sense to use custom env vars that you can then plug into your `CHROMA_URL`. The env vars thing makes sense if you do something like:\r\n\r\n```py\r\nclient = chromadb.HttpClient()\r\n```\r\n\r\nThen pydantic takes care of wiring your env vars into your Chroma client.\r\n\r\nIn short, pick either programatic or auto-wired with env vars client in your code and stick with that while making sure to not add env vars that might be picked up by the client automatically thus causing the confusion."
      },
      {
        "author": "thesethtruth",
        "created_at": "2024-12-03T12:52:18+00:00",
        "body": "@tazarov Right! I second the confusion about env vars. I was not aware of the fact that my definition of chroma env vars was actually the same as chroma uses internally. I can change my env var definitions, no problem; I just did not know/realize that these were actually picked up at client creation. It seems kind of implicit to me. \r\n\r\nYou want me to keep this issue open for reference or to close it, as it is not necessarily a bug but QoL kind of thing? "
      },
      {
        "author": "tazarov",
        "created_at": "2024-12-03T15:13:45+00:00",
        "body": "@thesethtruth, I think we can close it. It will still be searchable for anyone that faces similar problem."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3229"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3206,
    "title": "[Install issue]: Unable to install on ec2 with python 3.12.7",
    "body": "### What happened?\n\nWe're using the latest version of the chroma db in our code and it worked fine while development on MacOS. \r\nWhile deploying the whl file on amazon ec2, it's not installing due to onnxruntime deps. \r\n\r\n```\r\n$uname -m\r\nx86_64\r\n$python --version\r\nPython 3.12.7\r\n$ldd --version\r\nldd (GNU libc) 2.17\r\n```\r\n\r\n```\r\nRequirement already satisfied: posthog>=2.4.0 in /home/agent/.local/lib/python3.12/site-packages (from chromadb<0.6.0,>=0.5.20->ch-ag-genai==0.1.0) (3.7.3)\r\nINFO: pip is looking at multiple versions of chromadb to determine which version is compatible with other requirements. This could take a while.\r\nERROR: Ignored the following versions that require a different python version: 1.0.0 Requires-Python >=3.6, <3.9; 1.0.1 Requires-Python >=3.6, <3.9; 1.0.2 Requires-Python >=3.6, <3.9; 1.0.3 Requires-Python >=3.6, <3.9; 1.0.4 Requires-Python >=3.6, <3.9; 1.1.0 Requires-Python >=3.6, <3.9; 1.1.1 Requires-Python >=3.6, <3.9; 1.1.2 Requires-Python >=3.6, <3.9; 1.10.0 Requires-Python >=3.6, <3.9; 1.10.1 Requires-Python >=3.6, <3.9; 1.2.0 Requires-Python >=3.6, <3.9; 1.3.0 Requires-Python >=3.6, <3.9; 1.4.0 Requires-Python >=3.6, <3.9; 1.5.0 Requires-Python >=3.6, <3.9; 1.6.0 Requires-Python >=3.6, <3.9; 1.6.1 Requires-Python >=3.6, <3.9; 1.6.2 Requires-Python >=3.6, <3.9; 1.6.3 Requires-Python >=3.6, <3.9; 1.7.0 Requires-Python >=3.6, <3.9; 1.8.0 Requires-Python >=3.6, <3.9; 1.8.1 Requires-Python >=3.6, <3.9; 1.9.0 Requires-Python >=3.6, <3.9; 1.9.1 Requires-Python >=3.6, <3.9; 1.9.2 Requires-Python >=3.6, <3.9; 1.9.3 Requires-Python >=3.6, <3.9; 1.9.4 Requires-Python >=3.6, <3.9; 1.9.5 Requires-Python >=3.6, <3.9; 1.9.6 Requires-Python >=3.6, <3.9; 2.0.0 Requires-Python >=3.6, <3.9; 2.0.1 Requires-Python >=3.6, <3.9; 2.1.0 Requires-Python >=3.6, <3.9; 2.10.0 Requires-Python >=3.6, <3.10; 2.11.0 Requires-Python >=3.6.2,<3.10; 2.12.0 Requires-Python >=3.6.2,<3.10; 2.12.1 Requires-Python >=3.6.2,<3.10; 2.13.0 Requires-Python >=3.6.2,<=3.10.0; 2.14.0 Requires-Python >=3.6.2,<3.11; 2.15.0 Requires-Python >=3.7.1,<3.11; 2.15.1 Requires-Python >=3.7.1,<3.11; 2.16.0 Requires-Python >=3.7.1,<3.11; 2.16.1 Requires-Python >=3.7.1,<3.11; 2.17.0 Requires-Python >=3.7.1,<3.11; 2.2.0 Requires-Python >=3.6, <3.9; 2.3.0 Requires-Python >=3.6, <3.9; 2.4.0 Requires-Python >=3.6, <3.10; 2.5.0 Requires-Python >=3.6, <3.10; 2.6.0 Requires-Python >=3.6, <3.10; 2.7.0 Requires-Python >=3.6, <3.10; 2.8.0 Requires-Python >=3.6, <3.10; 2.9.0 Requires-Python >=3.6, <3.10; 3.0.0a1 Requires-Python >=3.8,<3.11; 3.0.0a2 Requires-Python >=3.8,<3.11; 3.0.0b1 Requires-Python >=3.8,<3.11; 3.0.0b2 Requires-Python >=3.8,<3.11; 3.0.0b3 Requires-Python >=3.8,<3.11\r\nERROR: Could not find a version that satisfies the requirement onnxruntime>=1.14.1 (from chromadb) (from versions: none)\r\nERROR: No matching distribution found for onnxruntime>=1.14.1\r\n```\r\n\r\nI tried installing the onnxruntime from the whl file as well. \r\n\r\n```\r\npip install onnxruntime-1.20.1-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl \r\nDefaulting to user installation because normal site-packages is not writeable\r\nERROR: onnxruntime-1.20.1-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl is not a supported wheel on this platform.\r\n```\r\n\r\nWhat's the solution to make this working?\n\n### Versions\n\nChroma 0.5.20 Python 3.12.7 os ec2 NAME=\"Red Hat Enterprise Linux Server\"\r\nVERSION=\"7.9 (Maipo)\" \n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-27T14:53:55+00:00",
    "closed_at": "2025-01-03T20:30:55+00:00",
    "updated_at": "2025-01-03T20:30:55+00:00",
    "author": "invinciible",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 893.6166666666667,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-27T15:21:14+00:00",
        "body": "@invinciible, looks like your glibc is rather old. The RHEL version you use is very old (7.9). Current version of RHEL is 9. Any chance to upgrade?\r\n\r\nTry using installing `onnxruntime==1.16.3` which seems to have [support for glibc 2.17](https://pypi.org/project/onnxruntime/1.16.3/#files). Alternatively you can run things in docker."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3206"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3190,
    "title": "[Bug]: Cohere Embedding",
    "body": "### What happened?\n\nI'm attempting to use Cohere's embeddings in chromadb but getting the attached error. Here is my code:\r\n\r\nfrom chromadb.utils import embedding_functions\r\ncohere_ef = embedding_functions.CohereEmbeddingFunction(api_key=cohere_api_key)\r\ncohere_ef(['test'])\r\n\r\nAny suggestions? Thanks!\n\n### Versions\n\nChroma v0.5.20, Python v3.10.14\n\n### Relevant log output\n\n```shell\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[9], line 3\r\n      1 from chromadb.utils import embedding_functions\r\n      2 cohere_ef = embedding_functions.CohereEmbeddingFunction(api_key=cohere_api_key)\r\n----> 3 cohere_ef(['test'])\r\n\r\nFile ~/git/infolinc-chunking-evaluation/.venv/lib/python3.10/site-packages/chromadb/api/types.py:462, in EmbeddingFunction.__init_subclass__.<locals>.__call__(self, input)\r\n    460 result = call(self, input)\r\n    461 assert result is not None\r\n--> 462 return validate_embeddings(cast(Embeddings, normalize_embeddings(result)))\r\n\r\nFile ~/git/infolinc-chunking-evaluation/.venv/lib/python3.10/site-packages/chromadb/api/types.py:82, in normalize_embeddings(target)\r\n     79     if target.ndim == 2:\r\n     80         return list(target)\r\n---> 82 raise ValueError(\r\n     83     f\"Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got {target}\"\r\n     84 )\r\n\r\nValueError: Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got [('response_type', 'embeddings_floats'), ('id', '1db95cbd-05b4-4081-a75d-d552124477e9'), ('embeddings', [[2.3085938, 0.04901123, -0.16\n```\n",
    "state": "closed",
    "created_at": "2024-11-25T18:46:56+00:00",
    "closed_at": "2025-01-08T09:47:42+00:00",
    "updated_at": "2025-01-08T09:47:43+00:00",
    "author": "hananshandler",
    "author_type": "User",
    "comments_count": 3,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1047.0127777777777,
    "first_comments": [
      {
        "author": "hananshandler",
        "created_at": "2024-11-25T19:18:15+00:00",
        "body": "Just solved this: you must add a [2][1] at the end of the cohere embedding call to retrieve only the embeddings, which is what chroma expects.\r\n\r\ncohere_embedding_function.py in chromadb/utils/embedding_functions should be changed to the following:\r\n\r\n\r\n```\r\nimport logging\r\n\r\nfrom chromadb.api.types import Documents, EmbeddingFunction, Embeddings\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass CohereEmbeddingFunction(EmbeddingFunction[Documents]):\r\n    def __init__(self, api_key: str, model_name: str = \"large\"):\r\n        try:\r\n            import cohere\r\n        except ImportError:\r\n            raise ValueError(\r\n                \"The cohere python package is not installed. Please install it with `pip install cohere`\"\r\n            )\r\n\r\n        self._client = cohere.Client(api_key)\r\n        self._model_name = model_name\r\n\r\n    def __call__(self, input: Documents) -> Embeddings:\r\n        # Call Cohere Embedding API for each document.\r\n        return [\r\n            embeddings\r\n            for embeddings in self._client.embed(\r\n                texts=input, model=self._model_name, input_type=\"search_document\"\r\n            )\r\n        ][2][1]\r\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2024-11-26T10:47:02+00:00",
        "body": "hey @hananshandler, thanks for reporting this. A while ago Cohere bumped their client to v5, we have a relatively long standing PR #2262 (plus a few others following it) that attempt to fix the problem with using the new client.\r\n\r\nLet me see if we can push these PRs in."
      },
      {
        "author": "tazarov",
        "created_at": "2025-01-08T09:44:35+00:00",
        "body": "@hananshandler, this is now fixed with #3438 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3190"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3188,
    "title": "[Bug]: Error occurs when upgrading embedchain to the 0.1.125 version",
    "body": "### What happened?\n\nTypeError: SegmentAPI.get_or_create_collection() got an unexpected keyword argument 'embedding_function'\r\n\r\n![image](https://github.com/user-attachments/assets/9d1602fe-c0b9-4436-8e73-90dd87dc925b)\r\n\n\n### Versions\n\nChroma 0.5.20，Python 3.11， OS Windows10\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\r\n  File \"<frozen importlib._bootstrap>\", line 1232, in _handle_fromlist\r\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\n  File \"D:\\AIGC\\idataai_py\\services_router\\query2sql_service.py\", line 12, in <module>\r\n    from services.s2sql.run import text2sql_agent_router\r\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\run.py\", line 48, in <module>\r\n    text2sql_agent.reload_setting(sql_ids, sql_exemplars, TEXT2DSL_EXAMPLE_NUM, TEXT2DSL_FEWSHOTS_NUM, TEXT2DSL_SELF_CONSISTENCY_NUM)\r\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\sql_agent.py\", line 478, in reload_setting\r\n    self.sql_example_prompter.reload_few_shot_example(sql_example_ids, sql_example_units)\r\n  File \"D:\\AIGC\\idataai_py\\services\\s2sql\\constructor.py\", line 51, in reload_few_shot_example\r\n    self.few_shot_retriever.empty_query_collection()\r\n  File \"D:\\AIGC\\idataai_py\\services\\query_retrieval\\retriever.py\", line 70, in empty_query_collection\r\n    self.collection = empty_chroma_collection_2(self.collection)\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\AIGC\\idataai_py\\utils\\chromadb_utils.py\", line 25, in empty_chroma_collection_2\r\n    new_collection = client.get_or_create_collection(name=collection_name,\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 150, in wrapper\r\n    return f(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\api\\segment.py\", line 103, in wrapper\r\n    return self._rate_limit_enforcer.rate_limit(func)(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\AIGC\\idataai_py\\venv\\Lib\\site-packages\\chromadb\\rate_limit\\simple_rate_limit\\__init__.py\", line 23, in wrapper\r\n    return func(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: SegmentAPI.get_or_create_collection() got an unexpected keyword argument 'embedding_function'\r\npython-BaseException\n```\n",
    "state": "closed",
    "created_at": "2024-11-25T07:11:38+00:00",
    "closed_at": "2025-01-02T23:49:18+00:00",
    "updated_at": "2025-01-02T23:49:19+00:00",
    "author": "Rainismer",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 928.6277777777777,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-26T10:57:15+00:00",
        "body": "hey @Rainismer, is this the project you are referring to https://github.com/mem0ai/mem0? Overall the error seems to be related to a tight coupling with Chroma internal APIs (aka SegmentAPI). Can you share the code for `empty_query_collection` or `empty_chroma_collection_2` from `chromadb_utils`"
      },
      {
        "author": "Rainismer",
        "created_at": "2024-11-27T01:37:08+00:00",
        "body": "@tazarov Yes, this is the project I mentioned. Please check the attachment：chromadb_utils.txt.\r\n\r\n[chromadb_utils.txt](https://github.com/user-attachments/files/17927501/chromadb_utils.txt)\r\n"
      },
      {
        "author": "Rainismer",
        "created_at": "2024-12-10T03:22:15+00:00",
        "body": "@tazarov How long will it take to fix this issue?"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-02T23:49:19+00:00",
        "body": "Hi @Rainismer I suggest opening an issue with embedchain."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3188"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3184,
    "title": "[Bug] TypeScript: Mismatch between documented return types and actual return types",
    "body": "### What happened?\n\nThere's a mismatch between what's documented in the comments and what's actually being returned:\r\nFor example here: https://github.com/chroma-core/chroma/blob/main/clients/js/src/Collection.ts\r\n\r\nWe can see that add, upsert and others return an empty Promise.\r\n`async add(params: AddRecordsParams): Promise<void>`\r\n\r\nBut the comment right above that function says that it should return Promise of AddResponse:\r\n```typescript\r\n/**\r\n   * Add items to the collection\r\n   * @param {Object} params - The parameters for the query.\r\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\r\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\r\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\r\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\r\n   * @returns {Promise<AddResponse>} - The response from the API. True if successful.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const response = await collection.add({\r\n   *   ids: [\"id1\", \"id2\"],\r\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\r\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\r\n   *   documents: [\"document1\", \"document2\"]\r\n   * });\r\n   * ```\r\n   */\r\n async add(params: AddRecordsParams): Promise<void>\r\n```\r\n\r\n\r\n\r\n\n\n### Versions\n\n^1.9.2\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-22T11:30:10+00:00",
    "closed_at": "2025-01-08T21:11:00+00:00",
    "updated_at": "2025-01-08T21:11:00+00:00",
    "author": "andriadze",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1137.6805555555557,
    "first_comments": [
      {
        "author": "aramcheck",
        "created_at": "2024-12-06T18:07:45+00:00",
        "body": "Hello! We bump into the same issue in one of the latest updates. Currently running with `1.9.4`.\r\n\r\n```\r\n/**\r\n * Deletes items from the collection.\r\n * @param {Object} params - The parameters for deleting items from the collection.\r\n * @param {ID | IDs} [params.ids] - Optional ID or array of IDs of items to delete.\r\n * @param {Where} [params.where] - Optional query condition to filter items to delete based on metadata values.\r\n * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter items to delete based on document content.\r\n * @returns {Promise<string[]>} A promise that resolves to the IDs of the deleted items.\r\n * @throws {Error} If there is an issue deleting items from the collection.\r\n *\r\n * @example\r\n * '''typescript\r\n * const results = await collection.delete({\r\n *   ids: \"some_id\",\r\n *   where: {\"name\": {\"$eq\": \"John Doe\"}},\r\n *   whereDocument: {\"$contains\":\"search_string\"}\r\n * });\r\n * '''\r\n */\r\ndelete({ ids, where, whereDocument, }?: DeleteParams): Promise<void>;\r\n```\r\n\r\nIn our case we were wrapping the adapter with an interface that conformed with the types declared by Chroma. In the example above, the delete was annotated and returned `Promise<string[]>`. This change broke our implementation at type level.\r\n\r\nTo fix it we temporally did something like this:\r\n\r\n```\r\nasync delete({ ids }: { ids: string[] }) {\r\n  const collection = await this.getCollection();\r\n  await collection.delete({ ids });\r\n  return ids;\r\n}\r\n```\r\n\r\nBut the Chroma `Collection` definition is declaring different types to the ones documented making it hard to understand if the implementation was changed or is just a type annotation bug.\r\n\r\nAmong offending methods are:\r\n\r\n- `add`: `Promise<void>` vs `Promise<AddResponse>`\r\n- `modify`: `Promise<CollectionParams>` vs `Promise<void>`\r\n- `peek`: `Promise<MultiGetResponse>` vs `Promise<GetResponse>`\r\n- `delete`: `Promise<void>` vs `Promise<string[]>`\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3184"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3170,
    "title": "[Vulnerability]: The chromadb/chroma:latest image have vulnerabilities",
    "body": "### What happened?\n\nThe **chromadb/chroma:latest** image have vulnerabilities Critical and High Vulnerabilities..\r\n\r\nI scanned the image using Trivy. I see **Critical: 1, High: 12, Medium: 15, Low: 85** Vulnerabilities.\r\n \r\nI attached the scan report for your reference\r\n \r\n[chroma-latest.pdf](https://github.com/user-attachments/files/17828637/chroma-latest.pdf)\n\n### Versions\n\nDocker image:\r\nchromadb/chroma:latest \n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-20T10:01:43+00:00",
    "closed_at": "2024-11-20T18:10:36+00:00",
    "updated_at": "2024-11-20T18:10:36+00:00",
    "author": "NavinKumar09",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 8.148055555555555,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-20T10:39:09+00:00",
        "body": "hey @NavinKumar09, thanks for reporting. Looking at the trivy scan of the latest Chroma `0.5.20` image I can see the following:\r\n\r\n- OS-related - Total: 111 (UNKNOWN: 0, LOW: 84, MEDIUM: 15, HIGH: 11, CRITICAL: 1)\r\n- Python related - Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\r\n- Rust related - Total: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\r\n\r\nThe critical OS is `CVE-2023-45853` (`zlib1g`). Given Chroma's code base I don' think exploiting the critical vuln is possible because:\r\n\r\n1. We don't use any compression to/from fastapi endpoints, if we did use it I think at the point python will use the system's zlib SO (default way to compile python)\r\n2. If compression is used by any library beyond the ingress point if fastapi then inputs are validated and bounds are checked\r\n\r\n\r\nFor completeness adding how the trivy scan works:\r\n\r\n```bash\r\nbrew install trivy # curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.57.1\r\ndocker pull chromadb/chroma:0.5.20 # or :latest\r\ntrivy image chromadb/chroma:0.5.20\r\n```\r\n\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3170"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3161,
    "title": "[Bug]: memory leak due to exception",
    "body": "### What happened?\n\nWhen the following exception is triggered, we noticed that the memory will not be released after this query end. In this case, after many such queries, the memory is used up.\r\n\r\n`                    if (result.size() != k)\r\n                         throw std::runtime_error(\r\n                             \"Cannot return the results in a contigious 2D array. Probably ef or M is too small\");\r\n` \r\n\r\n\r\n\n\n### Versions\n\nChromaV0.5.13\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-19T18:02:24+00:00",
    "closed_at": "2025-01-14T20:41:36+00:00",
    "updated_at": "2025-01-14T20:41:36+00:00",
    "author": "SarielMa",
    "author_type": "User",
    "comments_count": 3,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1346.6533333333334,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-20T12:20:01+00:00",
        "body": "@SarielMa, thanks for reporting this. Need to do a bit more digging whether the leak (if existing) happens in the pybind11 or in the python code."
      },
      {
        "author": "itaismith",
        "created_at": "2024-11-20T20:47:51+00:00",
        "body": "Hey @SarielMa! Can you share more information on your setup? Are you running this on a Windows machine by chance?"
      },
      {
        "author": "tazarov",
        "created_at": "2024-11-26T17:39:39+00:00",
        "body": "hey @SarielMa, do you have an observation as to how long it takes for the memory to be consumed? e.g. time or number of queries?\r\n\r\nI can demonstrably show that, indeed the hnsw lib has a memory leak when an exception is thrown. Here's the call stack sequence:\r\n\r\n- allocate result - \r\nhttps://github.com/chroma-core/hnswlib/blob/1aaa5e12320d0bf39844d4fb4fd9504c272c44e2/python_bindings/bindings.cpp#L689-L690\r\n- start parallel execution for each item in the query (most of the time this is just 1)\r\n- wait for threads to complete (https://github.com/chroma-core/hnswlib/blob/1aaa5e12320d0bf39844d4fb4fd9504c272c44e2/python_bindings/bindings.cpp#L76)\r\n- check for exceptions - if found rethrow it (https://github.com/chroma-core/hnswlib/blob/1aaa5e12320d0bf39844d4fb4fd9504c272c44e2/python_bindings/bindings.cpp#L80)\r\n- function exits without ever registering the `py::capsule` free callbacks - https://github.com/chroma-core/hnswlib/blob/1aaa5e12320d0bf39844d4fb4fd9504c272c44e2/python_bindings/bindings.cpp#L735-L738\r\n\r\nhere's some python code to reproduce exactly the error you encounter and once we find the right embedding to reproduce it with we spam query and printout some stats. Note that this runs for very long time (adjust the `x` loop):\r\n\r\n```py\r\nimport gc\r\nimport uuid\r\nimport tracemalloc\r\n\r\nimport chromadb\r\nimport numpy as np\r\nimport psutil\r\n\r\ntracemalloc.start()\r\nnp.random.seed(42)\r\nprocess = psutil.Process()\r\n\r\ndata = np.random.uniform(-1, 1, (1000, 500, 384))\r\n\r\nclient = chromadb.PersistentClient(\"contiguous2d\")\r\n# client = chromadb.HttpClient()\r\ncollection = client.get_or_create_collection(\"test_collection\")\r\nfor i in range(data.shape[0]):\r\n    try:\r\n        print(\"Iteration: \", str(i))\r\n        gc.collect()\r\n        ids = [f\"{uuid.uuid4()}\" for i in range(data[i].shape[0])]\r\n        collection.add(ids=ids, embeddings=data[i])\r\n        random_embeddings = [data[i][np.random.choice(data[i].shape[0])].tolist()]\r\n        collection.query(query_embeddings=data[i], n_results=10)\r\n        collection.delete(ids=ids)\r\n        gc.collect()\r\n    except Exception as e:\r\n        print(e)\r\n        snapshot1 = tracemalloc.take_snapshot()\r\n        memory_info = process.memory_info()\r\n\r\n        # Print the memory usage\r\n        print(f\"RSS: {memory_info.rss / (1024 ** 2):.2f} MB\")\r\n        print(f\"VMS: {memory_info.vms / (1024 ** 2):.2f} MB\")\r\n        for x in range(100000):\r\n            try:\r\n                # print(\"leak check \",x)\r\n                collection.query(query_embeddings=data[i], n_results=500)\r\n            except Exception as e1:\r\n                # Get the memory info\r\n                continue\r\n        memory_info = process.memory_info()\r\n\r\n        # Print the memory usage\r\n        print(f\"RSS: {memory_info.rss / (1024 ** 2):.2f} MB\")\r\n        print(f\"VMS: {memory_info.vms / (1024 ** 2):.2f} MB\")\r\n        snapshot2 = tracemalloc.take_snapshot()\r\n        stats = snapshot2.compare_to(snapshot1, 'lineno')\r\n        for stat in stats[:20]:  # Top 10 changes\r\n            print(stat)\r\n        raise e\r\n```\r\n\r\nRSS grows over time.\r\n\r\nI've also created a sample cpp code to reproduce the conditions - https://gist.github.com/tazarov/71fe6f2e8d5947dde998e83ee9a57d0a\r\n\r\nOverall yes there seems to be a leak when the exception is raised but the leak is quite small (120 bytes with defaults) for 99.99% of the cases. The following two criteria can affect the size of the leak:\r\n\r\n- very large `n_results` - `k` in the cpp binding\r\n- lots of queries `query_embeddings` (or `query_texts`) - `rows` in the cpp binding\r\n\r\nThe most common case involves 1 single query embedding and default `n_results=10`. This results in 10 * 8 bytes (on 64bit) for `labeltype` which is `size_t` and 10 * 4 bytes for `dist_t` which is `float` totaling 120 bytes per exception per query."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3161"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3153,
    "title": "[Feature Request]: $contains for metadata or allow type list for metadata and have $in for lists as filter option",
    "body": "### Describe the problem\n\nI would be awesome if you could use the $contains filter on metadata. Or if you could have a list as an allowed type for metadata, to then use a kind of $in operator.\n\n### Describe the proposed solution\n\nSo let's say I have a list of tags (\"Bestseller\", \"Beginner-Friendly\", \"Budget-Friendly\"). Now I have the metadata field \"Tags\" and there I would like to make the value of the field a list -> [\"Bestseller\", \"Beginner-Friendly\", \"Budget-Friendly\"]. Now if I want to look for all documents that are bestsellers, I would just have to do {\"Tags\": {\"$in\": \"Bestseller\"}}.\n\n### Alternatives considered\n\nOr the same for $contains. Where you would not have to have a list as the metadata field type, but you could have a string.\n\n### Importance\n\ni cannot use Chroma without it\n\n### Additional Information\n\nI love Chroma DB and have been using it for around a year now and this feature would be soo life saving!!!",
    "state": "closed",
    "created_at": "2024-11-17T19:06:43+00:00",
    "closed_at": "2025-01-06T20:41:01+00:00",
    "updated_at": "2025-01-06T20:41:02+00:00",
    "author": "pascalovrai",
    "author_type": "User",
    "comments_count": 3,
    "reactions_count": 0,
    "labels": "enhancement",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1201.5716666666667,
    "first_comments": [
      {
        "author": "Sicheng-Pan",
        "created_at": "2024-11-21T00:31:25+00:00",
        "body": "Hi! Currently Chroma does not support compound metadata value (such as a list). But for your use case it is possible to get around without using a list as value type. For example:\r\n- Given a document tagged as `BestSeller` and `Beginner-Friendly`, you can store the following metadata: `{\"tag:BestSeller\": True, \"tag:Beginner-Friendly\": True}`\r\n- When you want to query for all documents that is tagged \"BestSeller\", you can query the corresponding metadata key in the where clause: `{\"tag:BestSeller\": True}`"
      },
      {
        "author": "epinzur",
        "created_at": "2024-12-16T23:49:35+00:00",
        "body": "this seems related to https://github.com/chroma-core/chroma/issues/227 and maybe a duplicate of  https://github.com/chroma-core/chroma/issues/936"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-06T20:41:01+00:00",
        "body": "We have several issues asking for this feature. Tracking in https://github.com/chroma-core/chroma/issues/3415"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3153"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3151,
    "title": "[Install issue]: Run with Environment Variables",
    "body": "### What happened?\n\nI've tried many combinations of environment variables, but I still can't get chromadb to run in my docker container. Note: chroma runs fine if I do \"chroma run --host 0.0.0.0 --port 8000\n\n### Versions\n\nchromadb==0.5.18, python v3.12, ubi9.4\n\n### Relevant log output\n\n```shell\nENTRYPOINT [\"chroma\", \"run\"]\r\ndocker run -d -p 8000:8000 \\\r\n-e CHROMA_INTEGRATION_TEST_ONLY=1 \\\r\n-e CHROMA_API_IMPL=chromadb.api.fastapi.FastAPI \\\r\n-e CHROMA_SERVER_HOST=localhost \\\r\n-e CHROMA_SERVER_HTTP_PORT=8000 \\\r\n-e CHROMA_SERVER_NOFILE=65535 \\\r\n--add-host=localhost:host-gateway \\\r\n-v chroma:/app/.chroma \\\r\n--name chroma \\\r\n--restart always chroma\r\n[Errno 99] error while attempting to bind on address ('192.168.65.254', 8000): cannot assign requested address\r\n\r\n-e CHROMA_API_IMPL=rest \\\r\n-e CHROMA_SERVER_HOST=0.0.0.0 \\\r\n-e CHROMA_SERVER_HTTP_PORT=8000 \\\r\n-e CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.token_authn.TokenAuthenticationServerProvider \\\r\n-e CHROMA_AUTH_TOKEN_TRANSPORT_HEADER= \\\r\n-e CHROMA_SERVER_AUTHN_CREDENTIALS= \\\r\n-e CHROMA_CLIENT_AUTH_PROVIDER=chromadb.auth.token_authn.TokenAuthClientProvider \\\r\n-e CHROMA_AUTH_TOKEN_TRANSPORT_HEADER= \\\r\n-e CHROMA_CLIENT_AUTH_CREDENTIALS= \\\n```\n",
    "state": "closed",
    "created_at": "2024-11-17T06:57:13+00:00",
    "closed_at": "2025-01-03T20:30:38+00:00",
    "updated_at": "2025-01-03T20:30:38+00:00",
    "author": "scythetrigger",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1141.5569444444445,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-20T12:29:13+00:00",
        "body": "@scythetrigger, I think the issue is the `--add-host=localhost:host-gateway`. What this tells docker is to do a dns mapping for `localhost` to the gateway IP which in your case is `192.168.65.254`. Given that the the gateway IP is not owned by the container and its interfaces the failure to bind is kind of expected.\r\n\r\n\r\nAnother protip here remove `-e CHROMA_API_IMPL=rest` as this will also cause a failure, the option is no longer supported in Chroma."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3151"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3129,
    "title": "[Bug]: Cannot find reference 'SentenceTransformerEmbeddingFunction' in '__init__.py' ",
    "body": "### What happened?\r\n\r\nwhen I install chromadb via pip, then use below code, the code is from document: https://docs.trychroma.com/guides/embeddings\r\n\r\n`from chromadb.utils import embedding_functions`\r\n`sentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(model_name=\"all-mpnet-base-v2\")`\r\n\r\nin the pyCharm IDE, there is an error message:  Cannot find reference 'SentenceTransformerEmbeddingFunction' in ' __init__.py'  .  And the chromadb version is the latest 0.5.18\r\n\r\nIs something wrong in my environment? \r\n\r\n### Versions\r\n\r\nChroma v0.5.18, Python 3.12\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nCannot find reference 'SentenceTransformerEmbeddingFunction' in '__init__.py'  .\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-11-13T04:59:19+00:00",
    "closed_at": "2024-11-13T18:13:57+00:00",
    "updated_at": "2024-11-14T01:01:19+00:00",
    "author": "saaspeter",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 13.24388888888889,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-11-13T18:13:57+00:00",
        "body": "Hi there,\r\n\r\nTo use `SentenceTransformerEmbeddingFunction`, you can import it like this:\r\n\r\n```python\r\nfrom chromadb.utils.embedding_functions.sentence_transformer_embedding_function import \\\r\n    SentenceTransformerEmbeddingFunction\r\n```\r\n\r\nIn PyCharm, you can paste the class name where you want to use it, and then press Option+Return (or Alt+Enter on Windows) to prompt PyCharm to automatically add the correct import statement.\r\n\r\nIn general, each embedding function exists in its own module so you need to specify the module on the import path.\r\n"
      },
      {
        "author": "saaspeter",
        "created_at": "2024-11-14T01:01:18+00:00",
        "body": "@itaismith , thank you for the detailed explanation, it fixed my problem.  The usage in the doc worked in old version package, maybe we can update the official doc."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3129"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3113,
    "title": "[Bug]: Collection not returning id when querying using the exact same embedding used to add to collection",
    "body": "### What happened?\r\n\r\nI have populated a chroma collection with approximately 50,000 embeddings which are being pre-calculated then added using llama3.2 as such:\r\n\r\n```python\r\nembedding = ollama_client.embed(model=model_name, input=text_content)['embeddings']\r\ncollection.add(\r\n   embeddings=embedding,\r\n   ids=[file_path]\r\n) \r\n``` \r\n\r\nI have checked and my calculated embeddings are behaving deterministically. Therefore, when querying the collection with the same embedding I would expect the nearest result to be the same id that was just added (As the distance should be zero or very near zero). I am querying like this:\r\n\r\n```python\r\nresults = collection.query(\r\n   query_embeddings=embedding,\r\n   n_results=5,\r\n)\r\n```\r\n\r\nAfter running this test operation for each of my embeddings I have found that 56 / apprx 50,000 embeddings results in the incorrect file path being returned.\r\n\r\nFurther, this doesn't seem to be random, for example, it doesn't matter how many times I run the same query with an embedding that is returning an incorrect result - it still returns the incorrect result each time.\r\n\r\nI am now unsure on why this could be happening and whether this is a potential bug.\r\n\r\nHere is my full test code:\r\n\r\n```python\r\n# Parameters\r\nfile_path = 'ProgramData/5/63.txt' \r\nmodel_name = \"llama3.2\" \r\n\r\nCOLLECTION_NAME = \"POJ_DATASET_ollama_embedding\"\r\nclient = chromadb.HttpClient(host='localhost', port=8000)\r\ncollection = client.get_collection(name=COLLECTION_NAME)\r\n\r\n# Read the file content\r\nwith open(file_path, \"r\") as file:\r\n    text_content = file.read()\r\n\r\n# Generate embedding for file text\r\nollama_client = Client(host='http://localhost:11434')\r\nembedding = ollama_client.embed(model=model_name, input=text_content)['embeddings']\r\n\r\n# Add embedding to collection\r\ntry:\r\n    collection.add(\r\n        embeddings=embedding,\r\n        ids=[file_path]\r\n    )\r\n    print(\"Added to collection\")\r\n\r\n    doc_count = collection.count()\r\n    print(f\"Total documents in collection after add: {doc_count}\")\r\n\r\nexcept Exception as e:\r\n    print(f\"Error adding to collection: {e}\")\r\n\r\n\r\ntry:\r\n    results = collection.query(\r\n        query_embeddings=embedding,\r\n        n_results=5,\r\n    )\r\nexcept Exception as e:\r\n        print(f\"Error querying collection: {e}\")\r\n\r\nresult_paths = results[\"ids\"][0]\r\nresult_distances =  results[\"distances\"][0]\r\n\r\nprint(f\"Query path: {file_path}\")\r\nprint(f\"Result paths: {result_paths}\")\r\nprint(f\"Result distances: {result_distances}\")\r\n```\r\n\r\n### Versions\r\n\r\nPython 3.11.5\r\nchromadb 0.5.11\r\nllama3.2\r\nMacOS Sonoma 14.1.1\r\n\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nTotal documents in collection after add: 51752\r\nQuery path: ProgramData/5/63.txt\r\nResult paths: ['ProgramData/31/2034.txt', 'ProgramData/51/396.txt', 'ProgramData/22/544.txt', 'ProgramData/71/68.txt', 'ProgramData/48/666.txt']\r\nResult distances: [0.3231008052825928, 0.3234265446662903, 0.3266177773475647, 0.3289269804954529, 0.3314428925514221]\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-11-11T12:27:55+00:00",
    "closed_at": "2025-01-09T00:39:25+00:00",
    "updated_at": "2025-01-09T00:39:26+00:00",
    "author": "HughStanway",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1404.1916666666666,
    "first_comments": [
      {
        "author": "aseem-eduport",
        "created_at": "2024-11-13T19:54:47+00:00",
        "body": "I think I'm having the same issue.\r\nI loaded my vdb with 60000+ docs and their embeddings using a custom embedding function.\r\nWhen inspecting the DB embedding looks normal and .query return accurate value with correct distance.\r\nAfter compressing the folder(I'm using persistent client ) and transferring to local all my embeddings are missing."
      },
      {
        "author": "itaismith",
        "created_at": "2024-11-15T18:35:03+00:00",
        "body": "Hi there, we are taking a look at this. In the meantime I recommend updating your Chroma version to 0.5.18, and also check out #2675."
      },
      {
        "author": "HughStanway",
        "created_at": "2024-11-15T22:33:38+00:00",
        "body": "Hi, thanks for your response.\r\n\r\nI have updated my Chroma version to 0.5.18 but this still results in the same output as before:\r\n\r\n```shell\r\nTotal documents in collection after add: 51752\r\nQuery path: ProgramData/5/63.txt\r\nResult paths: ['ProgramData/31/2034.txt', 'ProgramData/51/396.txt', 'ProgramData/22/544.txt', 'ProgramData/71/68.txt', 'ProgramData/48/666.txt']\r\nResult distances: [0.3231008052825928, 0.3234265446662903, 0.3266177773475647, 0.3289269804954529, 0.3314428925514221]\r\n```\r\n\r\nAs for your other suggestion I already have `ef_search` set to a value of 100. My collection is setup as:\r\n\r\n```python\r\ncollection = client.create_collection(\r\n            name=COLLECTION_NAME,\r\n            metadata={\r\n                \"hnsw:search_ef\": 100,\r\n                \"hnsw:space\": \"cosine\"\r\n           },\r\n)\r\n```"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-09T00:39:25+00:00",
        "body": "Hi @HughStanway. Sorry for not responding sooner. Ultimately, to get better recall and accuracy you would have to tweak the various HNSW until they fit your needs. For example, I just reproduced your set up by making a collection with 50,000 embeddings of 2048 dimensions, and was able to get accurate results (querying using an embedding from the collection itself) by setting `construction_ef` to 1,000. Hope this helps. If trying many different search/construction values does not work for please feel free to submit a new issue and we can coordinate a time for us to take a closer look."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3113"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3076,
    "title": "[Bug]: Type of Collection not exported in TypeScript",
    "body": "### What happened?\n\nIn previous versions, I could import \"Collection\" and use its type. In version 1.9.2 I can't import Collection anymore.\r\n\r\nI see that type: CollectionType is exported, but that type does not contain methods such as: add, query.\r\n\r\nThis is a scenario where I need a type for collection:\r\n\r\n```typescript\r\nlet someCol: Collection;\r\n\r\nif(foo){\r\n  someCol = chromaClient.getOrCreateCollection(\"X\")\r\n}else{\r\n  someCol = chromaClient.getOrCreateCollection(\"Y\")\r\n}\r\n```\r\n\r\n\n\n### Versions\n\nJS chromadb: 1.9.2\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-06T09:15:04+00:00",
    "closed_at": "2025-01-03T04:41:48+00:00",
    "updated_at": "2025-01-03T04:41:49+00:00",
    "author": "andriadze",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1387.4455555555555,
    "first_comments": [
      {
        "author": "andriadze",
        "created_at": "2024-11-06T09:22:29+00:00",
        "body": "Opened a PR for this issue."
      },
      {
        "author": "preston",
        "created_at": "2024-11-11T21:03:53+00:00",
        "body": "Anyone know if this'll be fixed soon?"
      },
      {
        "author": "emmettprexus",
        "created_at": "2024-11-23T17:04:11+00:00",
        "body": "I ran into this issue as well 😑. It would be great to have this resolved. For now, I'm patching the compiled file, which doesn't feel ideal 😅."
      },
      {
        "author": "promentol",
        "created_at": "2024-12-19T14:25:21+00:00",
        "body": "For anybody who is working with Typescript this is major issue, please accept the PR ))"
      },
      {
        "author": "preston",
        "created_at": "2024-12-19T15:30:35+00:00",
        "body": "Could someone *please* add this? It's a major probably and should be a simple fix."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3076"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3073,
    "title": "[Bug]: `/api/v2/` routes missing in 0.5.13 docker image",
    "body": "### What happened?\n\nNone of the API v2 routes are initialized. On the other hand, building the same version using a `Dockerfile` is able to load the routes just fine. \r\n\r\nTo reproduce: \r\n```\r\ndocker pull chromadb/chroma:0.5.13\r\ndocker run -p 8000:8000 chromadb/chroma:0.5.13\r\n```\r\nVisit http://127.0.0.1/docs and you'll find no routes for v2. It breaks basic authentication at the very least. \r\n\r\nI can confirm that v.0.5.18 docker image has the v2 routes. \n\n### Versions\n\nChroma v0.5.13\r\nhttps://hub.docker.com/layers/chromadb/chroma/0.5.13/images/sha256-486f14590c21579fde375aa1a4b17d9bedcf9db37e5b0f0797cd299937d94662?context=explore \n\n### Relevant log output\n\n```shell\ndocker-compose -f docker-compose-image.yml up\r\nWARN[0000] /Users/dev01/Work/NxGen_Insights_Prototype/chroma/docker-compose-image.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion\r\nWARN[0000] Found orphan containers ([chroma-server-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\r\n[+] Running 1/0\r\n ✔ Container chroma-chromadb-1  Created                                                                                                                                                                                                         0.0s\r\nAttaching to chromadb-1\r\nchromadb-1  | Starting 'uvicorn chromadb.app:app' with args: --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30\r\nchromadb-1  | WARNING:  [06-11-2024 00:46:28] chroma_server_nofile is set to 65536, but this is less than current soft limit of 1048576. chroma_server_nofile will not be set.\r\nchromadb-1  | INFO:     [06-11-2024 00:46:28] Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component System\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component OpenTelemetryClient\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component SqliteDB\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component QuotaEnforcer\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component Posthog\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component SimpleRateLimitEnforcer\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component LocalSegmentManager\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component SegmentAPI\r\nchromadb-1  | DEBUG:    [06-11-2024 00:46:28] Starting component BasicAuthenticationServerProvider\r\nchromadb-1  | INFO:     [06-11-2024 00:46:28] Started server process [1]\r\nchromadb-1  | INFO:     [06-11-2024 00:46:28] Waiting for application startup.\r\nchromadb-1  | INFO:     [06-11-2024 00:46:28] Application startup complete.\r\nchromadb-1  | INFO:     [06-11-2024 00:46:28] Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\r\nchromadb-1  | INFO:     [06-11-2024 00:46:57] 127.0.0.1:38792 - \"GET /api/v1/heartbeat HTTP/1.1\" 200\r\nchromadb-1  | INFO:     [06-11-2024 00:47:25] 192.168.65.1:31845 - \"GET /api/v2/auth/identity HTTP/1.1\" 404\r\nchromadb-1  | INFO:     [06-11-2024 00:47:28] 127.0.0.1:38026 - \"GET /api/v1/heartbeat HTTP/1.1\" 200\n```\n",
    "state": "closed",
    "created_at": "2024-11-06T00:59:26+00:00",
    "closed_at": "2024-11-07T17:09:00+00:00",
    "updated_at": "2024-12-28T11:01:20+00:00",
    "author": "heisenbugx90",
    "author_type": "User",
    "comments_count": 3,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 40.159444444444446,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-11-07T17:08:29+00:00",
        "body": "Hey there, we introduced v2 routes only in version 0.5.16. You should be able to resolve this by pulling our latest Docker image (0.5.18)"
      },
      {
        "author": "ssifood",
        "created_at": "2024-11-13T06:33:15+00:00",
        "body": "i;m not working in docker \r\nimage: chromadb/chroma:0.5.18\r\nimage: chromadb/chroma:latest\r\n\r\n\r\nhttp://[serverip]:11813/api/v2"
      },
      {
        "author": "sinoport",
        "created_at": "2024-12-16T03:20:42+00:00",
        "body": "> Hey there, we introduced v2 routes only in version 0.5.16. You should be able to resolve this by pulling our latest Docker image (0.5.18)\r\n\r\nVery similar issue\r\n\r\nChroma installed and running on Ubuntu 20.04\r\npip install chromadb==0.5.23\r\nchroma run --host 10.89.0.103 --port 89 --path ...\r\n\r\nCreation of chroma client by:\r\nchroma_client = chromadb.HttpClient(host=\"10.89.0.103\", port=\"89\")\r\n\r\nGot error:\r\n\"GET /api/v2/auth/identity HTTP/1.1\" 404"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3073"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3060,
    "title": "[Bug]: collection.query and peek error in version 0.5.17",
    "body": "### What happened?\n\nCalling `collection.query` or `collection.peek` in client/server mode breaks when server is running 0.5.17, whereas they work in 0.5.16. Minimal example:\r\n```\r\nimport chromadb\r\n\r\nclient = chromadb.HttpClient(host='localhost', ssl=False, port=8000)\r\n\r\ncollection = client.create_collection(name=\"test\")\r\n\r\ncollection.add(\r\n    documents=[\r\n        \"This is a document about pineapple\",\r\n        \"This is a document about oranges\"\r\n    ],\r\n    ids=[\"id1\", \"id2\"]\r\n)\r\n\r\nprint(collection.get('id1')) # <----- This works\r\n\r\nprint(collection.query(query_texts=['hawaii'])) #  <----- But this fails\r\n```\n\n### Versions\n\n0.5.17 (run locally with Docker)\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/api/base_http_client.py\", line 99, in _raise_chroma_error\r\n    resp.raise_for_status()\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/httpx/_models.py\", line 763, in raise_for_status\r\n    raise HTTPStatusError(message, request=request, response=self)\r\nhttpx.HTTPStatusError: Client error '400 Bad Request' for url 'http://localhost:8000/api/v2/tenants/default_tenant/databases/default_database/collections/c6b33238-fda9-4d71-a834-bc22eab5efb8/query'\r\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/henry/repos/llm/example.py\", line 17, in <module>\r\n    print(collection.query(query_texts=['hawaii'])) #  <----- But this fails\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/api/models/Collection.py\", line 224, in query\r\n    query_results = self._client._query(\r\n                    ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 146, in wrapper\r\n    return f(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/api/fastapi.py\", line 528, in _query\r\n    resp_json = self._make_request(\r\n                ^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/api/fastapi.py\", line 90, in _make_request\r\n    BaseHTTPClient._raise_chroma_error(response)\r\n  File \"/Users/henry/Library/Caches/pypoetry/virtualenvs/llm-kCwWOmYK-py3.12/lib/python3.12/site-packages/chromadb/api/base_http_client.py\", line 103, in _raise_chroma_error\r\n    raise Exception(f\"{resp.text} (trace ID: {trace_id})\")\r\nException: {\"error\":\"InvalidArgumentError\",\"message\":\"Expected where to have exactly one operator, got {}\"} (trace ID: 0)\n```\n",
    "state": "closed",
    "created_at": "2024-11-04T16:51:45+00:00",
    "closed_at": "2024-11-05T18:52:08+00:00",
    "updated_at": "2024-11-06T13:09:36+00:00",
    "author": "scotchka",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 26.00638888888889,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-11-05T07:18:27+00:00",
        "body": "Hey @scotchka, does your chroma client run version 0.5.17 as well?"
      },
      {
        "author": "scotchka",
        "created_at": "2024-11-05T12:02:36+00:00",
        "body": "@itaismith Ah, updating the client solves the problem. Thanks! But, if client and server need to be on the same version, how would one upgrade in production without downtime?"
      },
      {
        "author": "itaismith",
        "created_at": "2024-11-05T18:52:08+00:00",
        "body": "Great! There are many ways to achieve this! I recommend taking this to our Discord where you can share more information about your setup and we can give you the right direction."
      },
      {
        "author": "FanLiang7943",
        "created_at": "2024-11-06T13:09:34+00:00",
        "body": "I found same issue by using 0.5.18 and .17. When doing query, 400 error returned with no result."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3060"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3058,
    "title": "[Bug]: [Windows] ChromaDB crashes when querying a collection with more than 99 records after running normally for two months!",
    "body": "### What happened?\r\n\r\nChromaDB 0.5.0 suddenly crashed one morning due to a query after running normally for two months.\r\nThe last few logs are (The last one is \"Starting component PersistentLocalHnswSegment\" everytime when it crashes):\r\n```\r\n[32mINFO[0m:     [04-11-2024 12:19:31] myIP:61952 - \"GET /api/v1/collections/redmine?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:21:43] myIP:62055 - \"GET /api/v1/pre-flight-checks HTTP/1.1\" 200\r\n[36mDEBUG[0m:    [04-11-2024 12:21:43] Starting component PersistentLocalHnswSegment\r\n```\r\nI eventually discovered that the reason was that the collection I was querying had more than 99 records, while another collection with only 83 records didn't have this issue. However, this doesn't make sense because this collection had been used normally with over a thousand records for two whole months!\r\n\r\nYes, there are some similar problems reported (such as https://github.com/chroma-core/chroma/issues/2513).\r\nHowever, this time the situation is somewhat special. Two months ago, I installed and used ChromaDB, and after using it for a week, I encountered a similar issue. At that time, the database I created using chromadb.PersistentClient() would silently crash without any warning when inserting more than 99 records.\r\nSo, I followed the solution from the aforementioned issue(https://github.com/chroma-core/chroma/issues/2513) and downgraded ChromaDB to version 0.5.0 and hnswlib to 0.7.3, but it was of no use. Later, I accidentally discovered that when I switched to using chromadb.HttpClient() to start the database, everything returned to normal. Although the issue wasn't completely resolved, I felt that as long as the program could run, it was fine.\r\nTherefore, ChromaDB worked normally for two months, then suddenly crashed during a query last Friday. Moreover, I can no longer insert any data into the database if the target collection already has more than 99 records or if my insertion would exceed 99 records.\r\nPeople often say that when God closes a door, He opens a window. Yes, I once had that window, which was chromadb.HttpClient(). Now, this last window has been mercilessly closed. It was still working normally on Thursday night—it ran smoothly for two months, and the next day when I returned, it crashed? What the hell is that?! XD\r\n\r\nAnd you know what? The exact same code and the exact same ChromaDB now work perfectly in a Linux virtual machine on my Windows system. Although it can work in a Linux virtual machine's Docker, this still causes unnecessary trouble for me when testing the program on the Windows system. Anyway, I hope this issue gets resolved soon (maybe when I come back tomorrow morning, it will suddenly work again, since if it can suddenly stop working, it might just as suddenly start working again).\r\n\r\n### Versions\r\n\r\nChroma 0.5.0\r\nhnswlib 0.7.3\r\npython 3.12.6\r\nWindows10 Corp 22H2\r\nCPU: Intel(R) Core(TM) i7-9700F CPU @ 3.00GHz\r\nRAM: 32.0 GB\r\n\r\n\r\n### Relevant log output\r\n\r\n```shell\r\n[32mINFO[0m:     [04-11-2024 12:19:03] Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\r\n[32mINFO[0m:     [04-11-2024 12:19:29] myIP:61951 - \"GET /api/v1/tenants/default_tenant HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:29] myIP:61951 - \"GET /api/v1/databases/default_database?tenant=default_tenant HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:30] myIP:61952 - \"POST /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:30] myIP:61952 - \"POST /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:30] myIP:61952 - \"POST /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:31] myIP:61952 - \"POST /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:19:31] myIP:61952 - \"GET /api/v1/collections/redmine?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\n[32mINFO[0m:     [04-11-2024 12:21:43] myIP:62055 - \"GET /api/v1/pre-flight-checks HTTP/1.1\" 200\r\n[36mDEBUG[0m:    [04-11-2024 12:21:43] Starting component PersistentLocalHnswSegment\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-11-04T07:34:53+00:00",
    "closed_at": "2024-11-12T02:19:02+00:00",
    "updated_at": "2024-11-12T02:19:02+00:00",
    "author": "SchwarzeFahne",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "SchwarzeFahne",
    "resolution_time_hours": 186.73583333333335,
    "first_comments": [
      {
        "author": "SchwarzeFahne",
        "created_at": "2024-11-04T07:45:13+00:00",
        "body": "``` python\r\ndatabase = chromadb.HttpClient(DB_HOST, DB_PORT)\r\nprint(database.get_collection(COLLECTION_NAME).query(query_embeddings=embedding_text(\"some_text\"), n_results=5))\r\n```\r\nSimple code, Big problem.\r\nIt has been running for two months, and now collapses at the slightest touch."
      },
      {
        "author": "tazarov",
        "created_at": "2024-11-04T12:15:44+00:00",
        "body": "@SchwarzeFahne, sorry to hear about your troubles. These kind of issues are extremely frustrating. The 100+ record thing is related to default BruteForce (buffer) index in Chroma which holds up to 100 uncommitted embeddings in memory and performs KNN search by going thru all the vectors. The issue arises from HNSW index which is used when you have more than the default buffer size.\r\n\r\nThe problem with the HNSW running on Windows machines is pretty annoying and does not entirely depend on Chroma hnswlib version. Over time various windows configuration have managed to run Chroma whereas other has failed (like in your case). Changing python version and applying the latest Windows patches worked for some (if you haven't give it a try, python 3.11 + latest patches).\r\n\r\nOn a related note, I think that Linux is the only proper way to run Chroma in production or at least more serious workloads, but of experimentation Windows is a perfectly valid choice too.\r\n\r\nThat said there is a workaround you can use to fix the problem - bump your `hnsw:batch_size` to a figure that is well above expected number of embeddings. Yes the queries might be a bit slower (especially on large datasets), but it will work just fine for experimentation on Windows machines.\r\n\r\n```py\r\nimport chromadb\r\n\r\n\r\nclient = chromadb.PersistentClient(\"path/to/db\")\r\n\r\ncollection = client.get_or_create_collection(\"my_collection\",metadata={\"hnsw:batch_size\":10000})\r\n# add data to the collection and query it\r\n\r\n```\r\n\r\nMore info [here](https://cookbook.chromadb.dev/core/configuration/#hnswbatch_size).\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-11-04T13:01:37+00:00",
        "body": "@SchwarzeFahne, you can also rebuild the HNSW lib on your system. Are you using WLS or PS for running your apps?\r\n\r\nFor WLS:\r\n\r\n```bash\r\nsudo apt update && apt install build-essential cmake autoconf\r\npython -m venv venv\r\nsource venv/bin/activate\r\npip install --no-binary :all: chroma-hnswlib\r\n```\r\n"
      },
      {
        "author": "SchwarzeFahne",
        "created_at": "2024-11-05T07:54:24+00:00",
        "body": "> @SchwarzeFahne, sorry to hear about your troubles. These kind of issues are extremely frustrating. The 100+ record thing is related to default BruteForce (buffer) index in Chroma which holds up to 100 uncommitted embeddings in memory and performs KNN search by going thru all the vectors. The issue arises from HNSW index which is used when you have more than the default buffer size.\r\n> \r\n> The problem with the HNSW running on Windows machines is pretty annoying and does not entirely depend on Chroma hnswlib version. Over time various windows configuration have managed to run Chroma whereas other has failed (like in your case). Changing python version and applying the latest Windows patches worked for some (if you haven't give it a try, python 3.11 + latest patches).\r\n> \r\n> On a related note, I think that Linux is the only proper way to run Chroma in production or at least more serious workloads, but of experimentation Windows is a perfectly valid choice too.\r\n> \r\n> That said there is a workaround you can use to fix the problem - bump your to a figure that is well above expected number of embeddings. Yes the queries might be a bit slower (especially on large datasets), but it will work just fine for experimentation on Windows machines.`hnsw:batch_size`\r\n> \r\n> ```python\r\n> import chromadb\r\n> \r\n> \r\n> client = chromadb.PersistentClient(\"path/to/db\")\r\n> \r\n> collection = client.get_or_create_collection(\"my_collection\",metadata={\"hnsw:batch_size\":10000})\r\n> # add data to the collection and query it\r\n> ```\r\n> \r\n> More info [here](https://cookbook.chromadb.dev/core/configuration/#hnswbatch_size).\r\n\r\nThank you for your help. Since I can't upgrade the Windows patches at the moment, I tried adjusting the hnsw:batch_size method. Indeed, after adjusting the buffer size, ChromaDB is working again on my Windows system just like it did in the past two months. Thanks again!\r\n\r\nHowever, I am puzzled because over the past few dozen days, ChromaDB never crashed because of this issue until it suddenly happened last Friday, like a sudden acute illness. Before that, even with thousands of records in the collection and sometimes inserting thousands of records at once, ChromaDB was functioning normally. How could it suddenly crash one day?\r\nMoreover, two months ago, I only encountered crashes when inserting more than 99 records while using the PersistentClient() method to access ChromaDB, whereas there were no such issues with the HttpClient(). It's only recently that this problem has manifested, which is quite perplexing.\r\nMy current concern is that my ChromaDB used in production is indeed Linux. But if users access it with clients on Windows systems, could it also suddenly crash one day?"
      },
      {
        "author": "SchwarzeFahne",
        "created_at": "2024-11-05T08:08:07+00:00",
        "body": "@tazarov \r\nSorry to bother you again. I have another small issue which, although currently minor, might be a bug. When I start ChromaDB on a Windows system and connect using the HttpClient() method, the list_collections function works fine. However, when I start ChromaDB on a Linux system and connect from a Windows system using the HttpClient() method, calling list_collections gives me this message in the terminal. What is causing the program to terminate unexpectedly?\r\n```\r\nTraceback (most recent call last):\r\n  File \"d:\\Workshop\\projects\\ai_assistant\\DatabaseManager.py\", line 486, in <module>\r\n    manager.list_collections()\r\n  File \"d:\\Workshop\\projects\\ai_assistant\\DatabaseManager.py\", line 67, in list_collections\r\n    collections = self.__database.list_collections()\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\me\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\client.py\", line 177, in list_collections\r\n    return self._server.list_collections(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\me\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 143, in wrapper\r\n    return f(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\me\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\fastapi.py\", line 212, in list_collections\r\n    collections.append(Collection(self, **json_collection))\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: Collection.__init__() got an unexpected keyword argument 'configuration_json'\r\n```\r\nTo clarify, I am currently using ChromaDB 0.5.0. If this issue is due to the fact that I am using a somewhat older version, please let me know, and I will upgrade to see if it resolves the problem."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3058"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3057,
    "title": "[Bug]: Issue with Token Authentication Using AsyncHttpClient ",
    "body": "### What happened?\r\n\r\nHello, I'm following the official documentation to set up token authentication for my Chroma server. Authentication works correctly with HttpClient, but fails when using AsyncHttpClient. Does anyone know what's the issue?\r\n\r\nSucceeded with Synchronous Mode\r\n```python\r\nCHROMA_ADMIN_TOKEN='admin-token'\r\n\r\nclient = chromadb.HttpClient(\r\n    host=CHROMA_HOST,\r\n    port=CHROMA_PORT,\r\n    settings=Settings(\r\n        chroma_client_auth_provider=\"chromadb.auth.token_authn.TokenAuthClientProvider\",\r\n        chroma_client_auth_credentials=CHROMA_ADMIN_TOKEN,\r\n    ),\r\n    ssl=False,\r\n)\r\n\r\nprint(client.heartbeat())\r\n```\r\n\r\nFailed with Asynchronous Mode\r\n```python\r\nCHROMA_ADMIN_TOKEN='admin-token'\r\n\r\nclient = await chromadb.AsyncHttpClient(\r\n    host=CHROMA_HOST,\r\n    port=CHROMA_PORT,\r\n    settings=Settings(\r\n        chroma_client_auth_provider=\"chromadb.auth.token_authn.TokenAuthClientProvider\",\r\n        chroma_client_auth_credentials=CHROMA_ADMIN_TOKEN,\r\n    ),\r\n)\r\nprint(await client.heartbeat())\r\n```\r\n```log\r\n---------------------------------------------------------------------------\r\nChromaAuthError                           Traceback (most recent call last)\r\nCell In[52], line 1\r\n----> 1 client = chromadb.HttpClient(\r\n      2     host=CHROMA_HOST,\r\n      3     port=CHROMA_PORT,\r\n      4     settings=Settings(\r\n      5         chroma_client_auth_provider=\"chromadb.auth.token_authn.TokenAuthClientProvider\",\r\n      6         chroma_client_auth_credentials='CHROMA_ADMIN_TOKEN',\r\n      7         # chroma_client_auth_credentials=CHROMA_ADMIN_TOKEN,\r\n      8     ),\r\n      9     ssl=False,\r\n     10 )\r\n     12 print(client.heartbeat())\r\n\r\nFile ~/Library/Caches/pypoetry/virtualenvs/chroma-example-OeFIc-7i-py3.11/lib/python3.11/site-packages/chromadb/__init__.py:204, in HttpClient(host, port, ssl, headers, settings, tenant, database)\r\n    201 settings.chroma_server_ssl_enabled = ssl\r\n    202 settings.chroma_server_headers = headers\r\n--> 204 return ClientCreator(tenant=tenant, database=database, settings=settings)\r\n\r\nFile ~/Library/Caches/pypoetry/virtualenvs/chroma-example-OeFIc-7i-py3.11/lib/python3.11/site-packages/chromadb/api/client.py:65, in Client.__init__(self, tenant, database, settings)\r\n     62 # Get the root system component we want to interact with\r\n     63 self._server = self._system.instance(ServerAPI)\r\n---> 65 user_identity = self.get_user_identity()\r\n     67 maybe_tenant, maybe_database = maybe_set_tenant_and_database(\r\n...\r\n---> 96     raise chroma_error\r\n     98 try:\r\n     99     resp.raise_for_status()\r\n\r\nChromaAuthError: Forbidden\r\n```\r\n\r\nMy Chroma server config:\r\nref: https://docs.trychroma.com/deployment/docker#static-api-token-authentication\r\n\r\nauthz.yaml\r\n```yaml\r\nroles_mapping:\r\n  admin:\r\n    actions:\r\n      [\r\n        \"system:reset\",\r\n        \"tenant:create_tenant\",\r\n        \"tenant:get_tenant\",\r\n        \"db:create_database\",\r\n        \"db:get_database\",\r\n        \"db:list_collections\",\r\n        \"collection:get_collection\",\r\n        \"db:create_collection\",\r\n        \"db:get_or_create_collection\",\r\n        \"collection:delete_collection\",\r\n        \"collection:update_collection\",\r\n        \"collection:add\",\r\n        \"collection:delete\",\r\n        \"collection:get\",\r\n        \"collection:query\",\r\n        \"collection:peek\",\r\n        \"collection:update\",\r\n        \"collection:upsert\",\r\n        \"collection:count\",\r\n      ]\r\n# `users` config is used by both TokenAuthenticationServerPro vider and SimpleRBACAuthorizationServerProvider.\r\n# - TokenAuthenticationProvider only needs the id and tokens.\r\n# - SimpleRBACAuthorizationProvider only needs the id and the role.\r\nusers:\r\n  - id: user@example.com\r\n    role: admin\r\n    tokens:\r\n      - admin-token\r\n```\r\n\r\ndocker container env:\r\n```env\r\nCHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/authz/authz.yaml\r\nCHROMA_SERVER_AUTHZ_CONFIG_FILE=/chroma/authz/authz.yaml\r\nCHROMA_SERVER_AUTHN_PROVIDER=\"chromadb.auth.token_authn.TokenAuthenticationServerProvider\"\r\nCHROMA_SERVER_AUTHZ_PROVIDER=\"chromadb.auth.simple_rbac_authz.SimpleRBACAuthorizationProvider\"\r\n```\r\n\r\n### Versions\r\ndocker image: ghcr.io/chroma-core/chroma:0.5.17\r\nchromadb-client: 0.5.17\r\nPython: 3.11.6\r\n",
    "state": "closed",
    "created_at": "2024-11-02T08:11:08+00:00",
    "closed_at": "2025-01-03T04:40:46+00:00",
    "updated_at": "2025-01-03T04:40:47+00:00",
    "author": "swy641205",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1484.493888888889,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-11-02T10:21:09+00:00",
        "body": "hey @swy641205, this is a duplicate of #2488, It should be fixed with #2489"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T04:40:47+00:00",
        "body": "Tracking in #2488 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3057"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3049,
    "title": "[Bug]: Multimodal got some bugs in PersistentClient.get_or_create_collection().add() function",
    "body": "### What happened?\n\nWhen you try to add some images using uris or images param in add() function. It will raise error: ValueError: Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got [tensor([ 7.0546e-03, ..])] in add.\r\nWhat is happening?\n\n### Versions\n\nPython 3.11.10\r\nchromadb==0.5.17\r\n\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last):\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 90, in wrapper\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 213, in _validate_and_prepare_add_request\r\n    add_embeddings = self._embed_record_set(record_set=add_records)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 522, in _embed_record_set\r\n    return self._embed(\r\n           ^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 539, in _embed\r\n    return self._embedding_function(input=input)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\types.py\", line 462, in __call__\r\n    return validate_embeddings(cast(Embeddings, normalize_embeddings(result)))\r\n                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\types.py\", line 82, in normalize_embeddings\r\n    raise ValueError(\r\nValueError: Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got [tensor([ 7.0546e-03,  2.7798e-\r\n02, -1.4129e-02, -2.3064e-02, -3.4075e-02, -4.0889e-02,  2.0845e-02,  1.2492e-02,  1.4057e-02, -3.0658e-02,  9.9958e-03, -2.7493e-02,  6.8215e-03, -1.3511e-02, -8.1812e-02, -5.6204e-02, -4.7312e-02, -1.2204e-02,  2.6173e-04,  2.1106e-02, -5.0510e-02,  1.0240e-02, -2.3872e-04,  1.3065e-02,\r\n        -3.7210e-02,  5.4390e-02, -3.4175e-02, -1.4482e-02, -2.8366e-02,  5.3688e-02,  9.1358e-02, -5.0987e-02, -5.3858e-02,  3.2919e-02,  2.1733e-03, -1.0039\r\ne-02,  6.9736e-03, -5.3676e-02, -3.9755e-02, -2.7536e-02,  8.3122e-03,  3.8631e-02,  1.3231e-02,  2.2518e-02,  4.3125e-02,  6.3657e-02, -1.0697e-02, -4.8750e-02,\r\n        -9.6144e-03,  1.5256e-02,  3.5317e-02, -2.2992e-02, -5.7255e-02, -1.7809e-02, -5.3524e-02,  5.9577e-02,  3.0356e-02,  5.8122e-02, -2.1739e-02, -2.3600\r\ne-02, -1.0967e-02,  4.5175e-03, -1.0131e-02,  2.7114e-02,  7.8019e-03, -3.6364e-02,  4.4199e-02,  9.3075e-03, -1.1930e-02, -9.6172e-03, -6.4546e-02, -5.1719e-03,\r\n        -3.4803e-02,  2.4147e-02,  4.2526e-02, -1.6626e-02,  1.1979e-02,  2.6774e-03, -2.9456e-02, -3.5689e-03, -1.6166e-02,  9.5828e-03,  1.3493e-02, -3.4627\r\ne-02,  2.4293e-02, -5.1425e-03, -6.7174e-02,  2.2755e-02,  1.7590e-02, -1.6247e-03, -1.3353e-02, -2.1790e-02, -3.0535e-02,  1.1045e-02,  1.4847e-02,  4.4982e-03,\r\n        -3.0287e-02,  1.5820e-02,  3.2322e-02,  9.7737e-03,  6.8827e-02, -2.6249e-02,  1.2654e-03, -1.1610e-02,  2.0377e-02,  3.3282e-02, -4.7554e-02, -1.5392\r\ne-02,  1.0673e-02, -1.5214e-02, -2.0876e-02,  3.5640e-02, -4.9721e-03,  4.2421e-02, -4.4341e-03,  7.2304e-02, -2.6475e-02,  1.8112e-02,  2.4433e-02,  4.8917e-02,\r\n        -3.0573e-02,  5.4348e-02,  4.5276e-02,  9.3468e-03,  8.0464e-02,  1.2944e-02,  1.1155e-02,  1.5984e-02, -2.6315e-02,  1.4565e-02,  7.7121e-03,  3.0832\r\ne-02, -2.5616e-02,  3.3050e-02,  6.7871e-03,  1.3593e-02,  2.8317e-02, -5.0663e-02, -2.4557e-02,  4.8060e-02, -2.2745e-02, -4.5718e-02, -2.5822e-02, -3.3731e-02,\r\n        -4.6024e-02, -1.6787e-02,  5.7077e-02,  6.3086e-02, -4.7862e-03,  9.5965e-03, -4.3173e-03, -4.7669e-02,  3.2048e-01,  1.3977e-02,  2.1916e-02, -4.6448\r\ne-03,  1.3508e-02, -5.4929e-03,  8.4308e-03,  2.2587e-02, -1.0066e-02, -2.4296e-02,  2.5079e-02, -4.6261e-02,  3.1517e-02,  1.3365e-02, -4.6182e-02, -5.0979e-04,\r\n        -2.2366e-02, -3.4727e-02,  2.0298e-02, -9.9847e-03,  1.6118e-02, -1.4761e-02, -4.9657e-02,  1.9441e-02, -7.2110e-02, -6.2928e-02,  1.1440e-02,  1.7448\r\ne-02,  4.3879e-02,  2.7965e-03,  2.8947e-02,  2.0780e-03, -8.0759e-02,  6.7159e-02,  1.4054e-01,  1.8925e-02, -1.9033e-02, -5.4193e-02, -1.2772e-02, -2.7395e-02,\r\n        -3.9711e-02,  1.4082e-03,  9.3485e-03, -3.1488e-02, -2.7749e-02,  1.8589e-02, -4.4740e-02,  6.1811e-03,  5.9242e-02,  4.8626e-02,  1.6324e-02, -1.9498\r\ne-03,  1.1987e-02, -4.8452e-02, -1.4547e-02, -2.5637e-02,  2.8577e-02,  9.4085e-03,  1.8647e-02,  2.6455e-02,  7.6148e-03, -4.3452e-03,  8.6869e-03,  2.1579e-03,\r\n         2.0694e-02, -9.2769e-03, -1.3550e-02, -8.1884e-02,  6.1883e-02, -5.2669e-02,  1.2579e-03, -2.1726e-02, -6.3232e-02, -3.8668e-03, -5.0838e-02, -6.2024\r\ne-03,  9.9287e-03, -2.8454e-02,  8.0647e-03, -3.3681e-02,  6.3067e-02, -2.2370e-02,  3.4038e-02, -3.5253e-03,  3.4762e-02,  5.3668e-03, -7.8753e-03,  3.0504e-02,\r\n        -6.7929e-02, -9.3244e-02,  2.3970e-02,  9.6121e-03,  1.4623e-02, -2.0636e-02,  2.4577e-02, -1.0429e-01, -1.0477e-02,  1.6411e-02, -5.8627e-03, -2.5963\r\ne-02, -1.9717e-02, -6.4610e-02, -3.2607e-03, -3.1705e-02, -2.7922e-03,  1.4392e-02,  4.8417e-02, -6.9214e-03, -8.6612e-03,  5.3716e-02,  5.1901e-02, -2.7012e-03,\r\n        -6.1967e-02, -3.3798e-02,  8.3685e-03, -9.5765e-03,  4.3955e-02,  1.0507e-02,  8.7818e-02,  4.8093e-03,  4.1367e-02,  1.0023e-02, -5.1928e-02, -3.7649\r\ne-02,  1.5845e-02, -3.1247e-02, -5.9479e-02,  6.3255e-02, -3.6091e-02,  4.3900e-02, -3.1318e-02, -9.7860e-03, -1.5064e-02, -2.7886e-02, -2.9148e-02, -8.4275e-03,\r\n         3.7353e-02, -5.8393e-02,  6.3081e-02, -8.2666e-02,  4.3796e-03, -1.7834e-03,  1.7758e-02, -4.7139e-02,  3.6834e-02,  7.8259e-02, -2.8243e-02, -6.0214\r\ne-03, -5.3319e-02,  7.0625e-02, -4.4562e-02, -2.7128e-02,  6.4015e-03,  3.7859e-02, -8.8032e-02, -3.2069e-01, -3.7194e-02, -2.1674e-02, -1.6664e-02, -9.4654e-02,\r\n        -1.1569e-02,  1.4694e-02, -2.2343e-02, -1.9613e-02, -1.3285e-02,  6.0532e-03,  2.0996e-02, -6.2149e-03,  1.1626e-02,  1.0443e-02, -1.6254e-02, -1.2194\r\ne-01,  9.4573e-02, -3.4425e-02,  5.9321e-02,  2.2079e-02, -2.9634e-02, -3.5736e-02, -7.0957e-02, -5.3968e-02, -3.1174e-02,  3.2809e-02, -2.4994e-02, -9.5620e-04,\r\n        -1.1161e-02,  2.2980e-02,  3.7943e-02,  3.5953e-02,  6.0873e-02,  5.8187e-02,  6.0333e-04, -5.1136e-03, -8.0136e-02, -4.3869e-03,  4.2375e-02,  5.3841\r\ne-02, -3.3193e-02, -1.0991e-01,  1.1229e-01, -5.3761e-03,  2.2466e-02, -2.3050e-03, -1.6992e-01,  3.8914e-03,  1.3021e-04,  3.1569e-02,  2.8123e-02, -1.6237e-02,\r\n         2.1032e-02,  5.5480e-02, -4.3134e-03, -3.1260e-02, -1.2109e-03, -3.4069e-02,  5.1580e-03,  2.7354e-02, -4.2091e-02,  2.3022e-03,  2.3504e-02, -2.3753\r\ne-02,  3.0504e-02, -1.3888e-03, -1.6186e-02, -1.6388e-02, -3.1179e-02,  1.8518e-02,  2.8274e-03,  1.2114e-02, -2.5601e-02,  7.9802e-02, -3.2584e-02, -2.4831e-02,\r\n         2.3158e-02,  8.3100e-02,  1.0370e-02, -2.4385e-02, -1.2227e-02, -1.8024e-02,  2.2184e-02,  4.7992e-02,  2.9249e-02,  3.6624e-02, -2.4549e-01,  1.3125\r\ne-03, -1.2730e-01,  5.1091e-02, -1.7200e-02,  1.6571e-02, -3.4616e-02,  4.1898e-03, -8.7459e-03,  3.9765e-02, -2.8192e-03, -1.7594e-02,  1.7399e-02,  2.8171e-02,\r\n         3.2571e-02,  4.1427e-02,  3.2065e-02,  8.7444e-03,  1.0798e-01, -6.2671e-03, -5.3435e-03,  1.7344e-03,  3.4296e-02, -4.5114e-02, -2.3229e-02, -1.9581\r\ne-02, -1.7913e-02, -1.9997e-02, -1.7188e-03, -3.3473e-02,  1.2770e-02, -2.8109e-02,  1.3351e-02, -7.3882e-02, -1.9871e-02,  2.2955e-03,  4.5126e-02,  9.8529e-02,\r\n        -2.3831e-02, -1.9275e-03, -8.0702e-03,  3.7513e-02,  1.9818e-02, -8.5888e-03, -3.9876e-03,  8.5557e-03,  3.2278e-02,  2.0446e-02,  6.0502e-02, -2.9444\r\ne-03,  6.4596e-02, -3.4091e-02, -3.6234e-02,  3.8234e-03,  6.3304e-03, -1.3753e-02,  2.9811e-02, -2.5702e-02,  3.3704e-03,  1.2177e-03,  3.3885e-03,  5.5317e-04,\r\n        -1.7297e-02,  2.2287e-02, -7.8123e-03, -6.1711e-03, -2.9327e-02,  8.2526e-03,  2.7766e-02, -1.9767e-02, -6.8211e-03, -2.5783e-02, -2.1004e-02, -4.0347\r\ne-03, -1.0321e-02, -3.8760e-02, -2.8216e-02, -2.2027e-02, -5.0815e-02, -4.0074e-04,  3.1880e-02,  5.3395e-02,  3.3419e-02, -3.2903e-03,  7.8956e-02, -3.8354e-02,\r\n        -2.2941e-02,  5.9165e-03,  2.2521e-02,  4.3019e-02,  4.9043e-03, -2.9848e-02, -1.5494e-02, -1.1483e-02, -2.3085e-02, -2.5963e-02,  1.3188e-01,  6.6985\r\ne-04,  1.2686e-01, -1.2288e-02,  8.0665e-03,  2.9949e-02,  4.0669e-02,  3.7188e-02,  5.1223e-03, -3.5146e-02, -4.6125e-02, -4.9283e-02,  1.1983e-02, -5.8064e-02,\r\n        -3.1766e-02,  2.7402e-02,  1.2459e-02,  3.2457e-02,  3.1878e-02, -6.5035e-02,  5.0424e-03,  2.0935e-02])]\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\Smart_home_face_recognition\\app.py\", line 11, in <module>\r\n    vector_tracker = FaceDB()\r\n                     ^^^^^^^^\r\n  File \"D:\\Smart_home_face_recognition\\app\\chroma_db.py\", line 38, in __init__\r\n    self.load_and_delete_users()\r\n  File \"D:\\Smart_home_face_recognition\\app\\chroma_db.py\", line 57, in load_and_delete_users\r\n    self.add_user_to_db(user_name, images_uri)\r\n  File \"D:\\Smart_home_face_recognition\\app\\chroma_db.py\", line 128, in add_user_to_db\r\n    self.db.add(\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\Collection.py\", line 81, in add\r\n    add_request = self._validate_and_prepare_add_request(\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 93, in wrapper\r\n    raise type(e)(msg).with_traceback(e.__traceback__)\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 90, in wrapper\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 213, in _validate_and_prepare_add_request\r\n    add_embeddings = self._embed_record_set(record_set=add_records)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 522, in _embed_record_set\r\n    return self._embed(\r\n           ^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\models\\CollectionCommon.py\", line 539, in _embed\r\n    return self._embedding_function(input=input)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\types.py\", line 462, in __call__\r\n    return validate_embeddings(cast(Embeddings, normalize_embeddings(result)))\r\n                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\anaconda3\\envs\\face_smart_house\\Lib\\site-packages\\chromadb\\api\\types.py\", line 82, in normalize_embeddings\r\n    raise ValueError(\r\nValueError: Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got [tensor([ 7.0546e-03,  2.7798e-\r\n02, -1.4129e-02, -2.3064e-02, -3.4075e-02, -4.0889e-02,  2.0845e-02,  1.2492e-02,  1.4057e-02, -3.0658e-02,  9.9958e-03, -2.7493e-02,  6.8215e-03, -1.3511e-02, -8.1812e-02, -5.6204e-02, -4.7312e-02, -1.2204e-02,  2.6173e-04,  2.1106e-02, -5.0510e-02,  1.0240e-02, -2.3872e-04,  1.3065e-02,\r\n        -3.7210e-02,  5.4390e-02, -3.4175e-02, -1.4482e-02, -2.8366e-02,  5.3688e-02,  9.1358e-02, -5.0987e-02, -5.3858e-02,  3.2919e-02,  2.1733e-03, -1.0039\r\ne-02,  6.9736e-03, -5.3676e-02, -3.9755e-02, -2.7536e-02,  8.3122e-03,  3.8631e-02,  1.3231e-02,  2.2518e-02,  4.3125e-02,  6.3657e-02, -1.0697e-02, -4.8750e-02,\r\n        -9.6144e-03,  1.5256e-02,  3.5317e-02, -2.2992e-02, -5.7255e-02, -1.7809e-02, -5.3524e-02,  5.9577e-02,  3.0356e-02,  5.8122e-02, -2.1739e-02, -2.3600\r\ne-02, -1.0967e-02,  4.5175e-03, -1.0131e-02,  2.7114e-02,  7.8019e-03, -3.6364e-02,  4.4199e-02,  9.3075e-03, -1.1930e-02, -9.6172e-03, -6.4546e-02, -5.1719e-03,\r\n        -3.4803e-02,  2.4147e-02,  4.2526e-02, -1.6626e-02,  1.1979e-02,  2.6774e-03, -2.9456e-02, -3.5689e-03, -1.6166e-02,  9.5828e-03,  1.3493e-02, -3.4627\r\ne-02,  2.4293e-02, -5.1425e-03, -6.7174e-02,  2.2755e-02,  1.7590e-02, -1.6247e-03, -1.3353e-02, -2.1790e-02, -3.0535e-02,  1.1045e-02,  1.4847e-02,  4.4982e-03,\r\n        -3.0287e-02,  1.5820e-02,  3.2322e-02,  9.7737e-03,  6.8827e-02, -2.6249e-02,  1.2654e-03, -1.1610e-02,  2.0377e-02,  3.3282e-02, -4.7554e-02, -1.5392\r\ne-02,  1.0673e-02, -1.5214e-02, -2.0876e-02,  3.5640e-02, -4.9721e-03,  4.2421e-02, -4.4341e-03,  7.2304e-02, -2.6475e-02,  1.8112e-02,  2.4433e-02,  4.8917e-02,\r\n        -3.0573e-02,  5.4348e-02,  4.5276e-02,  9.3468e-03,  8.0464e-02,  1.2944e-02,  1.1155e-02,  1.5984e-02, -2.6315e-02,  1.4565e-02,  7.7121e-03,  3.0832\r\ne-02, -2.5616e-02,  3.3050e-02,  6.7871e-03,  1.3593e-02,  2.8317e-02, -5.0663e-02, -2.4557e-02,  4.8060e-02, -2.2745e-02, -4.5718e-02, -2.5822e-02, -3.3731e-02,\r\n        -4.6024e-02, -1.6787e-02,  5.7077e-02,  6.3086e-02, -4.7862e-03,  9.5965e-03, -4.3173e-03, -4.7669e-02,  3.2048e-01,  1.3977e-02,  2.1916e-02, -4.6448\r\ne-03,  1.3508e-02, -5.4929e-03,  8.4308e-03,  2.2587e-02, -1.0066e-02, -2.4296e-02,  2.5079e-02, -4.6261e-02,  3.1517e-02,  1.3365e-02, -4.6182e-02, -5.0979e-04,\r\n        -2.2366e-02, -3.4727e-02,  2.0298e-02, -9.9847e-03,  1.6118e-02, -1.4761e-02, -4.9657e-02,  1.9441e-02, -7.2110e-02, -6.2928e-02,  1.1440e-02,  1.7448\r\ne-02,  4.3879e-02,  2.7965e-03,  2.8947e-02,  2.0780e-03, -8.0759e-02,  6.7159e-02,  1.4054e-01,  1.8925e-02, -1.9033e-02, -5.4193e-02, -1.2772e-02, -2.7395e-02,\r\n        -3.9711e-02,  1.4082e-03,  9.3485e-03, -3.1488e-02, -2.7749e-02,  1.8589e-02, -4.4740e-02,  6.1811e-03,  5.9242e-02,  4.8626e-02,  1.6324e-02, -1.9498\r\ne-03,  1.1987e-02, -4.8452e-02, -1.4547e-02, -2.5637e-02,  2.8577e-02,  9.4085e-03,  1.8647e-02,  2.6455e-02,  7.6148e-03, -4.3452e-03,  8.6869e-03,  2.1579e-03,\r\n         2.0694e-02, -9.2769e-03, -1.3550e-02, -8.1884e-02,  6.1883e-02, -5.2669e-02,  1.2579e-03, -2.1726e-02, -6.3232e-02, -3.8668e-03, -5.0838e-02, -6.2024\r\ne-03,  9.9287e-03, -2.8454e-02,  8.0647e-03, -3.3681e-02,  6.3067e-02, -2.2370e-02,  3.4038e-02, -3.5253e-03,  3.4762e-02,  5.3668e-03, -7.8753e-03,  3.0504e-02,\r\n        -6.7929e-02, -9.3244e-02,  2.3970e-02,  9.6121e-03,  1.4623e-02, -2.0636e-02,  2.4577e-02, -1.0429e-01, -1.0477e-02,  1.6411e-02, -5.8627e-03, -2.5963\r\ne-02, -1.9717e-02, -6.4610e-02, -3.2607e-03, -3.1705e-02, -2.7922e-03,  1.4392e-02,  4.8417e-02, -6.9214e-03, -8.6612e-03,  5.3716e-02,  5.1901e-02, -2.7012e-03,\r\n        -6.1967e-02, -3.3798e-02,  8.3685e-03, -9.5765e-03,  4.3955e-02,  1.0507e-02,  8.7818e-02,  4.8093e-03,  4.1367e-02,  1.0023e-02, -5.1928e-02, -3.7649\r\ne-02,  1.5845e-02, -3.1247e-02, -5.9479e-02,  6.3255e-02, -3.6091e-02,  4.3900e-02, -3.1318e-02, -9.7860e-03, -1.5064e-02, -2.7886e-02, -2.9148e-02, -8.4275e-03,\r\n         3.7353e-02, -5.8393e-02,  6.3081e-02, -8.2666e-02,  4.3796e-03, -1.7834e-03,  1.7758e-02, -4.7139e-02,  3.6834e-02,  7.8259e-02, -2.8243e-02, -6.0214\r\ne-03, -5.3319e-02,  7.0625e-02, -4.4562e-02, -2.7128e-02,  6.4015e-03,  3.7859e-02, -8.8032e-02, -3.2069e-01, -3.7194e-02, -2.1674e-02, -1.6664e-02, -9.4654e-02,\r\n        -1.1569e-02,  1.4694e-02, -2.2343e-02, -1.9613e-02, -1.3285e-02,  6.0532e-03,  2.0996e-02, -6.2149e-03,  1.1626e-02,  1.0443e-02, -1.6254e-02, -1.2194\r\ne-01,  9.4573e-02, -3.4425e-02,  5.9321e-02,  2.2079e-02, -2.9634e-02, -3.5736e-02, -7.0957e-02, -5.3968e-02, -3.1174e-02,  3.2809e-02, -2.4994e-02, -9.5620e-04,\r\n        -1.1161e-02,  2.2980e-02,  3.7943e-02,  3.5953e-02,  6.0873e-02,  5.8187e-02,  6.0333e-04, -5.1136e-03, -8.0136e-02, -4.3869e-03,  4.2375e-02,  5.3841\r\ne-02, -3.3193e-02, -1.0991e-01,  1.1229e-01, -5.3761e-03,  2.2466e-02, -2.3050e-03, -1.6992e-01,  3.8914e-03,  1.3021e-04,  3.1569e-02,  2.8123e-02, -1.6237e-02,\r\n         2.1032e-02,  5.5480e-02, -4.3134e-03, -3.1260e-02, -1.2109e-03, -3.4069e-02,  5.1580e-03,  2.7354e-02, -4.2091e-02,  2.3022e-03,  2.3504e-02, -2.3753\r\ne-02,  3.0504e-02, -1.3888e-03, -1.6186e-02, -1.6388e-02, -3.1179e-02,  1.8518e-02,  2.8274e-03,  1.2114e-02, -2.5601e-02,  7.9802e-02, -3.2584e-02, -2.4831e-02,\r\n         2.3158e-02,  8.3100e-02,  1.0370e-02, -2.4385e-02, -1.2227e-02, -1.8024e-02,  2.2184e-02,  4.7992e-02,  2.9249e-02,  3.6624e-02, -2.4549e-01,  1.3125\r\ne-03, -1.2730e-01,  5.1091e-02, -1.7200e-02,  1.6571e-02, -3.4616e-02,  4.1898e-03, -8.7459e-03,  3.9765e-02, -2.8192e-03, -1.7594e-02,  1.7399e-02,  2.8171e-02,\r\n         3.2571e-02,  4.1427e-02,  3.2065e-02,  8.7444e-03,  1.0798e-01, -6.2671e-03, -5.3435e-03,  1.7344e-03,  3.4296e-02, -4.5114e-02, -2.3229e-02, -1.9581\r\ne-02, -1.7913e-02, -1.9997e-02, -1.7188e-03, -3.3473e-02,  1.2770e-02, -2.8109e-02,  1.3351e-02, -7.3882e-02, -1.9871e-02,  2.2955e-03,  4.5126e-02,  9.8529e-02,\r\n        -2.3831e-02, -1.9275e-03, -8.0702e-03,  3.7513e-02,  1.9818e-02, -8.5888e-03, -3.9876e-03,  8.5557e-03,  3.2278e-02,  2.0446e-02,  6.0502e-02, -2.9444\r\ne-03,  6.4596e-02, -3.4091e-02, -3.6234e-02,  3.8234e-03,  6.3304e-03, -1.3753e-02,  2.9811e-02, -2.5702e-02,  3.3704e-03,  1.2177e-03,  3.3885e-03,  5.5317e-04,\r\n        -1.7297e-02,  2.2287e-02, -7.8123e-03, -6.1711e-03, -2.9327e-02,  8.2526e-03,  2.7766e-02, -1.9767e-02, -6.8211e-03, -2.5783e-02, -2.1004e-02, -4.0347\r\ne-03, -1.0321e-02, -3.8760e-02, -2.8216e-02, -2.2027e-02, -5.0815e-02, -4.0074e-04,  3.1880e-02,  5.3395e-02,  3.3419e-02, -3.2903e-03,  7.8956e-02, -3.8354e-02,\r\n        -2.2941e-02,  5.9165e-03,  2.2521e-02,  4.3019e-02,  4.9043e-03, -2.9848e-02, -1.5494e-02, -1.1483e-02, -2.3085e-02, -2.5963e-02,  1.3188e-01,  6.6985\r\ne-04,  1.2686e-01, -1.2288e-02,  8.0665e-03,  2.9949e-02,  4.0669e-02,  3.7188e-02,  5.1223e-03, -3.5146e-02, -4.6125e-02, -4.9283e-02,  1.1983e-02, -5.8064e-02,\r\n        -3.1766e-02,  2.7402e-02,  1.2459e-02,  3.2457e-02,  3.1878e-02, -6.5035e-02,  5.0424e-03,  2.0935e-02])] in add.\n```\n",
    "state": "closed",
    "created_at": "2024-11-01T08:41:13+00:00",
    "closed_at": "2024-11-01T20:22:43+00:00",
    "updated_at": "2024-11-01T20:23:05+00:00",
    "author": "ShynBui",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 11.691666666666666,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-11-01T20:22:43+00:00",
        "body": "Tracking in #3047 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3049"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3047,
    "title": "[Bug]: I can't add text to the multimodal database like the tutorial",
    "body": "### What happened?\n\nI can't add text to the multimodal database like the tutorial:\r\n\r\n```\r\nimport chromadb\r\nfrom chromadb.utils.data_loaders import ImageLoader\r\nfrom chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction\r\n\r\nclient = chromadb.Client()\r\ndata_loader = ImageLoader()\r\nembedding_function = OpenCLIPEmbeddingFunction()\r\n\r\ncollection = client.create_collection(\r\n    name='multimodal_collection',\r\n    embedding_function=embedding_function,\r\n    data_loader=data_loader\r\n)\r\n\r\ncollection.add(\r\n    ids=['id1', 'id2', 'id3'],\r\n    documents=[\"This is a document\", \"This is another document\", \"This is a third document\"]\r\n)\r\n```\r\n\r\nAn error will occur:\r\n\r\n```\r\nValueError: Expected embeddings to be a list of floats or ints, a list of lists, a numpy array, or a list of numpy arrays, got [tensor([ 4.5285e-03, -1.9030e-02, ....\r\n```\r\n\n\n### Versions\n\nChroma 0.5.17\r\nPython 3.11.9\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-11-01T06:13:54+00:00",
    "closed_at": "2024-11-05T19:56:04+00:00",
    "updated_at": "2024-11-05T19:56:04+00:00",
    "author": "ForestsKing",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 109.70277777777778,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/3047"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3032,
    "title": "[Bug]: [Docs] reference link target URL is showing 404 error",
    "body": "### What happened?\n\ngithub link given in [docs-integration-llamaindex](docs/docs.trychroma.com/pages/integrations/llamaindex.md) needs to be updated to [updated-ref](docs/docs/examples/vector_stores/ChromaIndexDemo.ipynb)\n\n### Versions\n\nmain branch\n\n### Relevant log output\n\n```shell\nonly docs reference change\n```\n",
    "state": "closed",
    "created_at": "2024-10-30T04:19:38+00:00",
    "closed_at": "2024-10-30T17:11:52+00:00",
    "updated_at": "2024-10-30T17:11:52+00:00",
    "author": "joshuamosesb",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 12.870555555555555,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-10-30T17:11:52+00:00",
        "body": "Thanks for catching this! Fixed in #3034 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3032"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 3011,
    "title": "[Bug]: The search speed is lower at 0.5.15 than 0.5.0",
    "body": "### What happened?\n\nHi, I was testing the performance of Chroma recently and I found that when searching with 0.5.15 on my environment, it was significantly slower than 0.5.0.\r\n\r\nMy Hardware Platforms:\r\nCPU: 11th Gen Intel(R) Croe(TM) i5-1135G7 @ 2.40GHz\r\nArchitecture: x86\r\nNumber of cores: 4\r\nNumber of threads: 8\r\nRAM: 16G\r\nMemory frequency: 3200\r\n\r\nMy test data:\r\nHNSW parameter: the default parameter\r\nVector dimension: 1024\r\nThe amount of data: 1,000,000\r\n\r\nCode of crate collection：\r\n```\r\nimport chromadb\r\nimport numpy as np\r\nimport time\r\nfrom datetime import datetime\r\n\r\nnum_vector = 2500\r\ndimension = 1024\r\nid = 0\r\n\r\npath = \"/home/wangweinan/prj/demo/test-chroma/db\"\r\nclient = chromadb.PersistentClient(path=path)\r\nclient.create_collection(name=\"collection_test_1024_100w\", metadata={\"hnsw:space\": \"cosine\"})\r\n\r\ncollection = client.get_collection(name=\"collection_test_1024_100w\")\r\n\r\nfor i in range(400):\r\n    vectors = np.random.rand(num_vector, dimension).astype(np.float32)\r\n    ids = [f\"{id + j}\" for j in range(num_vector)]\r\n    id = int(ids[-1]) + 1\r\n\r\n    print(\"finish generate vectors: \", vectors.shape)\r\n\r\n    start_time = time.time()\r\n    print(\"start add vectors \", datetime.now().strftime(\"%H:%M:%S\"))\r\n    collection.add(ids=ids, embeddings=vectors)\r\n    finish_time = time.time()\r\n    print(\"finish add vectors, current time: \", datetime.now().strftime(\"%H:%M:%S\"), \"use time: \", (finish_time - start_time) * 1000)\r\n    result = collection.get()\r\n    print(len(result[\"ids\"]))\r\n\r\n```\r\n\r\ncode of test search:\r\n```\r\n\r\npath = \"/home/wangweinan/prj/demo/test-chroma/db\"\r\nclient = chromadb.PersistentClient(path=path)\r\ncollection = client.get_collection(name=\"collection_test_1024_100w\")\r\n\r\nembeddings = np.random.rand(1, dimension).astype(np.float32)\r\n\r\nstart_time = time.time()\r\n\r\ncollection.query(\r\n    query_embeddings=embeddings,\r\n    n_results=10\r\n)\r\n\r\nfinish_time = time.time()\r\nprint(\"finish query, current time: \", datetime.now().strftime(\"%H:%M:%S\"), \"use time: \", (finish_time - start_time) * 1000)\r\n\r\n# The index is loaded on the first search, which is slow, \r\n# so the search is done twice in a row and the time taken for the second time is recorded\r\n\r\nembeddings = np.random.rand(1, dimension).astype(np.float32)\r\n\r\nstart_time = time.time()\r\n\r\ncollection.query(\r\n    query_embeddings=embeddings,\r\n    n_results=10\r\n)\r\n\r\nfinish_time = time.time()\r\nprint(\"finish query, current time: \", datetime.now().strftime(\"%H:%M:%S\"), \"use time: \", (finish_time - start_time) * 1000)\r\n\r\n```\r\n\r\nin chroma 0.5.0, i get output like:\r\n```\r\nwangweinan@wangweinan-pc:~/prj/demo/test-chroma$ python3 ./test-chroma.py \r\nfinish query, current time:  20:47:42 use time:  1790.0738716125488\r\nfinish query, current time:  20:47:42 use time:  5.855798721313477\r\n```\r\n\r\nbut int chroma 0.5.15, i get output like:\r\n```\r\n⚠️ It looks like you upgraded from a version below 0.6 and could benefit from vacuuming your database. Run chromadb utils vacuum --help for more information.\r\nfinish query, current time:  20:50:12 use time:  5732.906341552734\r\nfinish query, current time:  20:50:16 use time:  3389.677047729492\r\n```\r\n\n\n### Versions\n\nChroma 0.5.0 and 0.5.15, Python 3.8, Linux 5.10.0-9-generic\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-28T12:58:17+00:00",
    "closed_at": "2024-10-30T23:22:26+00:00",
    "updated_at": "2024-10-30T23:22:26+00:00",
    "author": "Amphetaminewei",
    "author_type": "User",
    "comments_count": 3,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 58.4025,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-29T10:48:28+00:00",
        "body": "@Amphetaminewei, interesting observation. Let me try to reproduce your results."
      },
      {
        "author": "AndersPier",
        "created_at": "2024-10-30T12:32:25+00:00",
        "body": "just vacuumed my vectordb with this command.\r\nmy open-webui container is called open-webui, switch the name to appropriate name of your open-webui containername.\r\n\r\nif running docker:\r\ndocker exec -it open-webui bash -c \"chroma utils vacuum --force --path /app/backend/data/vector_db\""
      },
      {
        "author": "itaismith",
        "created_at": "2024-10-30T23:22:26+00:00",
        "body": "@Amphetaminewei thanks for pointing this out! We issued a fix in #3035. It will be available shortly in version 0.5.17."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/3011"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2992,
    "title": "[Bug]: <chroma-hnswlib>.add_items() execution crash!",
    "body": "### What happened?\r\n\r\nHi there,\r\nI started using `chromadb` as `haystack` integration `chroma-haystack` to test its performance.\r\nIt was working as expected until latest update, now it exits the execution witouth any error code, first thought it casued by Haystack integration ( chroma-haystack) and open an issue there. but turns out [their code](https://github.com/deepset-ai/haystack-core-integrations/blob/main/integrations/chroma/example/example.py) works well.\r\nSo I traced the whole source code (including yours) and find that the code execution exited at[ this line](https://github.com/chroma-core/chroma/blob/4db4afb78925b77c779dc3f171aee7526b675b79/chromadb/segment/impl/vector/local_hnsw.py#L279) in your code, and since `chroma-hnswlib` repo has no issue opening section, opened this here.\r\nAlso since **couldn't find your log files**, attached screen shots to be clearer.\r\n\r\n![image](https://github.com/user-attachments/assets/cd3baddb-a612-4eba-952e-33866ef0177b)\r\n\r\nTo make sure it's not a false positive, run the[ example code from your repo](https://github.com/chroma-core/hnswlib/blob/master/examples/python/example.py) and got the same result, exit with no error code, [at](https://github.com/chroma-core/hnswlib/blob/1aaa5e12320d0bf39844d4fb4fd9504c272c44e2/examples/python/example.py#L44) `add_items()` after print() statement\r\n\r\n![image](https://github.com/user-attachments/assets/397d5787-e758-4d6e-9c35-d58012ef2010)\r\n\r\n\r\n**(edit):\r\neven downgrading `chroma `to 0.5.11 , doesn't solve the problem! (`hnswlib `version pinned, i realized)**\r\n\r\n### Versions\r\n\r\nChroma 0.5.15 - Python 3.8.10 - Win10 x86_64\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-10-23T12:25:26+00:00",
    "closed_at": "2024-10-29T17:25:36+00:00",
    "updated_at": "2024-10-29T17:25:36+00:00",
    "author": "farzbood",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 149.00277777777777,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-10-29T17:19:38+00:00",
        "body": "Hey @farzbood! Seems related to [this](https://github.com/chroma-core/chroma/issues/2513) open issue on Windows. We have seen cases in which a Windows update resolves this issue, but we are still investigating to provide a better solution. Feel free to reopen if you have more information! "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2992"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2988,
    "title": "[Bug]: Issues importing chromadb  UnhandledSchemeError: Reading from \"https://unpkg.com/@xenova/transformers@2.13.2\"",
    "body": "### What happened?\n\nHi, Im trying to import chromadb into my nextjs server but getting the issue UnhandledSchemeError: Reading from \"https://unpkg.com/@xenova/transformers@2.13.2\", I tried to mark this as external modules but it doesn't work. Is there any workaround? Thank you!\r\n\r\n\n\n### Versions\n\nchromadb: 1.9.2, node v22.10.0\n\n### Relevant log output\n\n```shell\n⨯ https://unpkg.com/@xenova/transformers@2.13.2\r\nModule build failed: UnhandledSchemeError: Reading from \"https://unpkg.com/@xenova/transformers@2.13.2\" is not handled by plugins (Unhandled scheme).\r\nWebpack supports \"data:\" and \"file:\" URIs by default.\r\nYou may need an additional plugin to handle \"https:\" URIs.\r\nImport trace for requested module:\r\nhttps://unpkg.com/@xenova/transformers@2.13.2\r\n./node_modules/.pnpm/chromadb@1.9.1_openai@4.68.1_zod@3.23.8_/node_modules/chromadb/dist/chromadb.mjs\n```\n",
    "state": "closed",
    "created_at": "2024-10-22T15:33:02+00:00",
    "closed_at": "2025-01-07T07:45:21+00:00",
    "updated_at": "2025-01-07T07:45:22+00:00",
    "author": "ashbuilds",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1840.2052777777778,
    "first_comments": [
      {
        "author": "CarmineXmX",
        "created_at": "2024-10-23T16:24:04+00:00",
        "body": "same problem"
      },
      {
        "author": "BrianMwangi21",
        "created_at": "2024-10-23T17:29:21+00:00",
        "body": "Any new feedback on this ? Getting the same issue.\r\n"
      },
      {
        "author": "fortysevenlabs",
        "created_at": "2024-10-26T06:33:03+00:00",
        "body": "If we are using an alternative embedding like OpenAI, why does @xenova/transformers / chromadb-default-embeddings even need to be installed? Can we make this optional as well?"
      },
      {
        "author": "ashbuilds",
        "created_at": "2024-10-26T10:22:36+00:00",
        "body": "This is my workaround for now, but would be great if this can be optional. \r\n``` // next.config.mjs\r\n\r\n  webpack: (config, { isServer }) => {\r\n    config.externals = config.externals || [];\r\n    \r\n    // TODO: Workaround for issue : https://github.com/chroma-core/chroma/issues/2988\r\n    config.externals.push({\r\n      'https://unpkg.com/@xenova/transformers@2.13.2': 'transformers',\r\n    });\r\n    return config;\r\n  }\r\n  ```"
      },
      {
        "author": "ChrisCates",
        "created_at": "2024-11-10T05:23:59+00:00",
        "body": "The workaround mentioned by @ashbuilds didn't work by just doing that alone.\r\nHowever, it worked when I simply just installed the dependencies.\r\n\r\n```\r\ncohere-ai\r\n@xenova/transformers\r\nchromadb-default-embed\r\n```\r\n\r\nI'd like to avoid having to install dependencies... and then still have it direct to a CDN, I'll throw a PR at Chroma tomorrow to make sure that you dont need chroma's dependencies in your own package.json."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2988"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2979,
    "title": "[Bug]: Global Overwrite of OpenAI API Key During Text Embedding Execution",
    "body": "### What happened?\n\nWhen the `OpenAIEmbeddingFunction()` is executed, the api_key provided as an argument overwrites the openai.api_key that is referenced globally throughout the application. This behavior prevents the application from being able to differentiate between the API key used for embeddings and the API key used for regular chat operations.\r\n\r\nHere's a snippet of the affected code:\r\n```py\r\napp.logger.info(f\"openai.api_key: {openai.api_key[-4:]}\")\r\napp.logger.info(f\"ANOHTER_OPENAI_API_KEY: {ANOTHER_OPENAI_API_KEY[-4:]}\")\r\n\r\nembedding_function = embedding_functions.OpenAIEmbeddingFunction(\r\n    api_key=ANOTHER_OPENAI_API_KEY, model_name=EMBEDDING_MODEL\r\n)\r\n\r\napp.logger.info(f\"openai.api_key: {openai.api_key[-4:]}\")\r\n```\r\n\r\n\n\n### Versions\n\nchroma v0.5.5\r\nflask v2.3.2\r\npython 3.11.6\n\n### Relevant log output\n\n```shell\n2024-10-21 17:34:25 [2024-10-21 08:34:25,464] INFO in internal_chatbot_documents_controller: openai.api_key: pTV4\r\n2024-10-21 17:34:25 [2024-10-21 08:34:25,464] INFO in internal_chatbot_documents_controller: ANOHTER_OPENAI_API_KEY: -EsA\r\n2024-10-21 17:34:25 [2024-10-21 08:34:25,483] INFO in internal_chatbot_documents_controller: openai.api_key: -EsA\n```\n",
    "state": "closed",
    "created_at": "2024-10-21T08:45:50+00:00",
    "closed_at": "2025-01-03T04:39:56+00:00",
    "updated_at": "2025-01-03T04:39:56+00:00",
    "author": "watanabeycr7",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1771.9016666666666,
    "first_comments": [
      {
        "author": "watanabeycr7",
        "created_at": "2024-10-21T08:53:04+00:00",
        "body": "I've identified the issue and have a possible solution in mind. I'll begin working on a PR to address this."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2979"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2977,
    "title": "[Bug]: ChromaServerError: The server encountered an error while handling the request.",
    "body": "### What happened?\n\nRunning Chroma 0.5.15 via official docker image.\r\n\r\nError from client code:\r\n```\r\nChromaServerError: The server encountered an error while handling the request.\r\n    at parseServerError (/Users/galer7/p/<project>/node_modules/.pnpm/chromadb@1.9.2_cohere-ai@7.13.0_encoding@0.1.13__encoding@0.1.13_openai@4.68.0_encoding@0.1.13_zod@3.23.8_/node_modules/chromadb/src/ChromaFetch.ts:35:10)\r\n    at chromaFetch (/Users/galer7/p/<project>/node_modules/.pnpm/chromadb@1.9.2_cohere-ai@7.13.0_encoding@0.1.13__encoding@0.1.13_openai@4.68.0_encoding@0.1.13_zod@3.23.8_/node_modules/chromadb/src/ChromaFetch.ts:75:17)\r\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\r\n    at async Collection.add (/Users/galer7/p/<project>/node_modules/.pnpm/chromadb@1.9.2_cohere-ai@7.13.0_encoding@0.1.13__encoding@0.1.13_openai@4.68.0_encoding@0.1.13_zod@3.23.8_/node_modules/chromadb/src/Collection.ts:73:5)\r\n    at async main (/Users/galer7/p/<project>/server/scripts/ingest-notion.ts:49:5) {\r\n  cause: undefined\r\n}\r\n```\r\n\r\nError from the server in docker:\r\n```\r\nINFO:     [19-10-2024 00:04:36] 192.168.215.0:59783 - \"POST /api/v1/collections/27c16ee6-d4bd-4afd-b75b-499ec3d25394/add HTTP/1.1\" 500\r\n```\r\n\r\nIt only happens when I add data. My first instinct was the default embedding function.\r\n\r\nNo other error messages...\n\n### Versions\n\nChroma 0.5.15, Docker, Mac 14.6.1\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-19T00:10:40+00:00",
    "closed_at": "2025-01-07T07:47:18+00:00",
    "updated_at": "2025-01-07T07:47:18+00:00",
    "author": "galer7",
    "author_type": "User",
    "comments_count": 5,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1927.6105555555555,
    "first_comments": [
      {
        "author": "galer7",
        "created_at": "2024-10-19T08:07:28+00:00",
        "body": "this is my `ChromaService`, I think it's pretty basic\r\n\r\n```ts\r\nimport { ChromaClient, IncludeEnum } from \"chromadb\";\r\nimport { log } from \"../decorators/logger\";\r\nexport interface Document {\r\n  text: string;\r\n  embedding: number[];\r\n  metadata: Record<string, any>;\r\n}\r\n\r\ntype Collection = ReturnType<ChromaClient[\"getOrCreateCollection\"]>;\r\n\r\nexport class ChromaService {\r\n  private client: ChromaClient;\r\n\r\n  constructor(\r\n    private collectionName: string = process.env.CHROMA_COLLECTION_NAME!\r\n  ) {\r\n    this.client = new ChromaClient({\r\n      path: process.env.CHROMA_URL!,\r\n    });\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async getCollection(): Promise<Collection> {\r\n    return this.client.getOrCreateCollection({\r\n      name: this.collectionName,\r\n    });\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async addDocuments(documents: Document[]): Promise<void> {\r\n    const ids = documents.map((_, index) => `doc_${index}`);\r\n    const embeddings = documents.map((doc) => doc.embedding);\r\n    const metadatas = documents.map((doc) => doc.metadata);\r\n    const texts = documents.map((doc) => doc.text);\r\n\r\n    const collection = await this.getCollection();\r\n\r\n    return collection.add({\r\n      ids,\r\n      embeddings,\r\n      metadatas,\r\n      documents: texts,\r\n    });\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async deleteDocuments(ids: string[]): Promise<string[]> {\r\n    const collection = await this.getCollection();\r\n\r\n    return collection.delete({ ids });\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async queryByVector(\r\n    vector: number[],\r\n    limit: number = 1\r\n  ): Promise<Document[]> {\r\n    const collection = await this.getCollection();\r\n    const results = await collection.query({\r\n      queryEmbeddings: [vector],\r\n      nResults: limit,\r\n      include: [\r\n        \"metadatas\" as IncludeEnum,\r\n        \"documents\" as IncludeEnum,\r\n        \"distances\" as IncludeEnum,\r\n      ],\r\n    });\r\n\r\n    return results.documents[0].map((text, index) => ({\r\n      text: text!,\r\n      embedding: vector, // Note: Chroma doesn't return the original embedding\r\n      metadata: results.metadatas[index],\r\n    }));\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async queryByText(text: string, limit: number = 1): Promise<Document[]> {\r\n    const collection = await this.getCollection();\r\n    const results = await collection.query({\r\n      queryTexts: [text],\r\n      nResults: limit,\r\n      include: [\r\n        \"metadatas\" as IncludeEnum,\r\n        \"documents\" as IncludeEnum,\r\n        \"distances\" as IncludeEnum,\r\n      ],\r\n    });\r\n\r\n    return results.documents[0].map((text, index) => ({\r\n      text: text!,\r\n      embedding: [], // Note: Chroma doesn't return the embedding\r\n      metadata: results.metadatas[0][index]!,\r\n    }));\r\n  }\r\n\r\n  @log(\"ChromaService\")\r\n  async queryByMetadata(metadata: Record<string, any>): Promise<Document[]> {\r\n    const collection = await this.getCollection();\r\n    const results = await collection.get({\r\n      where: metadata,\r\n      include: [\"metadatas\" as IncludeEnum, \"documents\" as IncludeEnum],\r\n    });\r\n\r\n    return results.documents.map((text, index) => ({\r\n      text: text!,\r\n      embedding: [], // Note: Chroma doesn't return the embedding by default\r\n      metadata: results.metadatas[index]!,\r\n    }));\r\n  }\r\n}\r\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-20T07:49:29+00:00",
        "body": "@galer7, thanks for raising this. Are these the only server logs you were able to find? Any stack trace in the docker container?"
      },
      {
        "author": "jrsanchezalcala",
        "created_at": "2024-11-11T21:23:07+00:00",
        "body": "It happens the same to me. Im running it on docker container and in the docker container the log its just\r\n2024-11-11 22:19:41 INFO:     [11-11-2024 21:19:41] 172.20.0.1:51058 - \"POST /api/v1/collections/f47e4c49-3c6f-445d-862e-ccce82f15d56/add HTTP/1.1\" 500"
      },
      {
        "author": "jrsanchezalcala",
        "created_at": "2024-11-11T21:35:22+00:00",
        "body": "I've discovered what was the issue in my case.\r\nI had already an existing collection that probably had a different embedding function that the embeddings that i was adding.\r\nDeleting the collection solved the issue"
      },
      {
        "author": "galer7",
        "created_at": "2024-11-12T09:58:02+00:00",
        "body": "@tazarov Sorry for abandoning the thread, I tried to fix for 1 more hour after creating the issue and then switched to pgvector.\r\n\r\n@jrsanchezalcala I didn't try deleting the collection at that time but it does sound like a good idea now that you mention it."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2977"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2963,
    "title": "The index does not get smaller after removing the vector",
    "body": "I'm using chroma 0.5.0 by PersistentClient and I've noticed that the index doesn't get smaller when I delete the vector.\r\nBy consulting the data, i found that the HNSW index only supports increments and does not support vector deletion. What is chroma's current policy for removing vectors?\r\nIn my usage scenario, my database is deployed on a local PC, and I record the vector data of all the text files of the user in the database and update it as the user adds/deletes files, so if there is no deletion scenario, my database may grow indefinitely and occupy more and more memory of the user.",
    "state": "closed",
    "created_at": "2024-10-16T01:56:07+00:00",
    "closed_at": "2024-10-21T01:27:17+00:00",
    "updated_at": "2024-10-21T01:27:17+00:00",
    "author": "Amphetaminewei",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "Amphetaminewei",
    "resolution_time_hours": 119.51944444444445,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-20T07:52:38+00:00",
        "body": "@Amphetaminewei, you are right on the HNSW growing. We have similar issue open - https://github.com/chroma-core/chroma/issues/2594 and a PR to address this #2621.\r\n\r\nI am also working on a bit of tooling to rebuild HNSW indices."
      },
      {
        "author": "Amphetaminewei",
        "created_at": "2024-10-21T01:27:17+00:00",
        "body": "@tazarov Thank you! I'll keep track of this issue and PR\r\n\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2963"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2956,
    "title": "[Bug]: vacuum warning talks about version 0.6 instead of 0.5.6",
    "body": "### What happened?\n\n> ⚠️ It looks like you upgraded from a version below 0.6 and could benefit from vacuuming your database\r\n\r\nThis should say `0.5.6` right?\r\n\r\nhttps://github.com/chroma-core/chroma/blob/main/chromadb/db/impl/sqlite.py#L112\n\n### Versions\n\nChroma v0.5.11\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-15T14:02:24+00:00",
    "closed_at": "2025-01-08T07:10:47+00:00",
    "updated_at": "2025-01-08T07:10:47+00:00",
    "author": "Benzhaomin",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2033.1397222222222,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-15T17:25:22+00:00",
        "body": "@Benzhaomin, you are correct that the message is somewhat confusing. The thing is that this feature was meant to be released in version `0.6.0` of Chroma, but in the interim, we decided that users could benefit from WAL pruning sooner than `0.6.0` would have been released. You can safely ignore this message :)"
      },
      {
        "author": "Benzhaomin",
        "created_at": "2024-10-17T06:35:24+00:00",
        "body": "Fixed in https://github.com/chroma-core/chroma/pull/2964"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2956"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2927,
    "title": "[TST][ENH] Multi-collection property and durability tests",
    "body": "- Add multi-collection property tests to check for possible interaction issues (e.g. WAL problems)\r\n- Add durability tests to verify that collections invariants hold after restart (e.g. run in a separate process)",
    "state": "closed",
    "created_at": "2024-10-10T17:38:08+00:00",
    "closed_at": "2024-10-22T21:43:22+00:00",
    "updated_at": "2024-10-22T21:43:22+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "codetheweb",
    "resolution_time_hours": 292.08722222222224,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/2927"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2926,
    "title": "[Bug]: Chroma HTTP Client mode",
    "body": "### What happened?\n\nFor some reason my Chroma keeps getting reset to HTTP client mode even though I clearly create a PersistantClient instance?\r\nHere's the code i use:\r\nclient = chromadb.PersistentClient(path=CHROMA_DATA_PATH, settings=Settings(),\r\n    tenant=DEFAULT_TENANT,\r\n    database=DEFAULT_DATABASE,)\r\n\r\nWould appreciate some help! :)\n\n### Versions\n\nChroma v0.5.12, Python v3.9.6, OS: 14.4 (23E214) (Mac)\n\n### Relevant log output\n\n```shell\nHere's the output error am getting:\r\nRuntimeError: Chroma is running in http-only client mode, and can only be run with 'chromadb.api.fastapi.FastAPI' or 'chromadb.api.async_fastapi.AsyncFastAPI' as the chroma_api_impl.             see https://docs.trychroma.com/guides#using-the-python-http-only-client for more information\n```\n",
    "state": "closed",
    "created_at": "2024-10-10T15:42:00+00:00",
    "closed_at": "2025-01-03T04:37:58+00:00",
    "updated_at": "2025-01-03T04:37:58+00:00",
    "author": "dhruv1707",
    "author_type": "User",
    "comments_count": 10,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2028.9327777777778,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-10T15:47:36+00:00",
        "body": "@dhruv1707, can you check which chroma package you have installed?\r\n\r\n```bash\r\npip show chromadb\r\n```\r\n\r\nit should show something like this:\r\n\r\n```bash\r\nName: chromadb\r\nVersion: 0.5.12\r\nSummary: Chroma.\r\nHome-page: https://github.com/chroma-core/chroma\r\nAuthor: \r\nAuthor-email: Jeff Huber <jeff@trychroma.com>, Anton Troynikov <anton@trychroma.com>\r\nLicense: \r\n```"
      },
      {
        "author": "dhruv1707",
        "created_at": "2024-10-10T18:05:11+00:00",
        "body": "@tazarov this is what it gives me:\r\nVersion: 0.5.12\r\nSummary: Chroma.\r\nHome-page: https://github.com/chroma-core/chroma\r\nAuthor: \r\nAuthor-email: Jeff Huber <jeff@trychroma.com>, Anton Troynikov <anton@trychroma.com>\r\nLicense: \r\n\r\nI think its the same version :)"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-10T18:48:03+00:00",
        "body": "Thanks for confirming @dhruv1707, I'll test a few things and comeback. In the meantime can you try and leave only `path` parameter and test."
      },
      {
        "author": "dhruv1707",
        "created_at": "2024-10-10T19:15:02+00:00",
        "body": "Nope still the same @tazarov  :("
      },
      {
        "author": "dhruv1707",
        "created_at": "2024-10-11T14:45:54+00:00",
        "body": "@tazarov any updates?"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2926"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2922,
    "title": "[Bug]: Correctness bug in log purge - causes loss of embeddings data",
    "body": "### What happened?\r\n\r\n#  `0.5.7`\r\n\r\nTo reproduce in 0.5.7\r\n\r\n`pip install chromadb==0.5.7`\r\n\r\n```py\r\nimport chromadb\r\nimport uuid\r\n\r\n\r\nclient = chromadb.PersistentClient(path=\"2912\")\r\n\r\nids = [str(uuid.uuid4()) for _ in range(5202)]\r\ndocs = [f\"Document {i}\" for i in range(5202)]\r\nembeddings = [[0.1, 0.2, 0.3] for _ in range(5202)]\r\n\r\ncol = client.get_or_create_collection(\"test_collection\")\r\n\r\ncol.add(ids=ids, documents=docs, embeddings=embeddings)\r\n\r\n\r\nids1 = [str(uuid.uuid4()) for _ in range(2202)]\r\ndocs1 = [f\"Document {i}\" for i in range(2202)]\r\nembeddings1 = [[0.1, 0.2, 0.3] for _ in range(2202)]\r\n\r\ncol1 = client.get_or_create_collection(\"test_collection1\")\r\n\r\ncol1.add(ids=ids1, documents=docs1, embeddings=embeddings1)\r\n```\r\n\r\nRestart the notebook/server/session:\r\n\r\n```py\r\nimport chromadb\r\nclient = chromadb.PersistentClient(path=\"2912\")\r\ncol = client.get_or_create_collection(\"test_collection\")\r\nres= col.get(include=[\"documents\", \"embeddings\"])\r\nassert len(res['embeddings']) == 5202\r\n```\r\n\r\nresults in:\r\n\r\n```bash\r\nIndexError                                Traceback (most recent call last)\r\n[<ipython-input-1-466544d3b9d7>](https://jpcubrfly0m-496ff2e9c6d22116-0-colab.googleusercontent.com/outputframe.html?vrz=colab_20241007-060114_RC01_683255037#) in <cell line: 4>()\r\n      2 client = chromadb.PersistentClient(path=\"2912\")\r\n      3 col = client.get_or_create_collection(\"test_collection\")\r\n----> 4 res= col.get(include=[\"documents\", \"embeddings\"])\r\n      5 assert len(res['ids']) == 5202\r\n\r\n5 frames\r\n[/usr/local/lib/python3.10/dist-packages/chromadb/segment/impl/vector/local_persistent_hnsw.py](https://jpcubrfly0m-496ff2e9c6d22116-0-colab.googleusercontent.com/outputframe.html?vrz=colab_20241007-060114_RC01_683255037#) in get_vectors(self, ids)\r\n    388             for label, vector in zip(hnsw_labels, vectors):\r\n    389                 id = self._label_to_id[label]\r\n--> 390                 results[id_to_index[id]] = VectorEmbeddingRecord(\r\n    391                     id=id, embedding=vector\r\n    392                 )\r\n\r\nIndexError: list assignment index out of range\r\n```\r\n\r\n# `0.5.12`\r\n\r\nHere, the issue exhibits somewhat differently (this is another bug that needs fixing in a separate Issue/PR). While one does not get the `IndexError: list assignment index out of range`, asserting the expected embedding count points to the same issue:\r\n\r\n`pip install chromadb==0.5.12`\r\n\r\n```py\r\nimport chromadb\r\nimport uuid\r\n\r\n\r\nclient = chromadb.PersistentClient(path=\"2912\")\r\n\r\nids = [str(uuid.uuid4()) for _ in range(5202)]\r\ndocs = [f\"Document {i}\" for i in range(5202)]\r\nembeddings = [[0.1, 0.2, 0.3] for _ in range(5202)]\r\n\r\ncol = client.get_or_create_collection(\"test_collection\")\r\n\r\ncol.add(ids=ids, documents=docs, embeddings=embeddings)\r\n\r\n\r\nids1 = [str(uuid.uuid4()) for _ in range(2202)]\r\ndocs1 = [f\"Document {i}\" for i in range(2202)]\r\nembeddings1 = [[0.1, 0.2, 0.3] for _ in range(2202)]\r\n\r\ncol1 = client.get_or_create_collection(\"test_collection1\")\r\n\r\ncol1.add(ids=ids1, documents=docs1, embeddings=embeddings1)\r\n```\r\n\r\nRestart the notebook/server/session:\r\n\r\n```py\r\nimport chromadb\r\nclient = chromadb.PersistentClient(path=\"2912\")\r\ncol = client.get_or_create_collection(\"test_collection\")\r\nres= col.get(include=[\"documents\", \"embeddings\"])\r\nprint(\"Actual len: \",len(res['embeddings']))\r\nassert len(res['embeddings']) == 5202\r\n```\r\n\r\nResults in:\r\n\r\n```bash\r\nActual len:  5000\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n[<ipython-input-5-7e030716345f>](https://glksq6xpilu-496ff2e9c6d22116-0-colab.googleusercontent.com/outputframe.html?vrz=colab_20241007-060114_RC01_683255037#) in <cell line: 6>()\r\n      4 res= col.get(include=[\"documents\", \"embeddings\"])\r\n      5 print(\"Actual len: \",len(res['embeddings']))\r\n----> 6 assert len(res['embeddings']) == 5202\r\n\r\nAssertionError:\r\n```\r\n\r\n# Analysis\r\n\r\nThe issue comes from how we purge the embeddings queue:\r\n\r\nhttps://github.com/chroma-core/chroma/blob/cb88db287f29f0247c1860deaae6ba06a1f56bf6/chromadb/db/mixins/embeddings_queue.py#L162-L171\r\n\r\nThe above code results in an indiscriminate purge of the embedding queue up to the given collection's min_seq_id (usually the HNSW seq_id). This is logically incorrect in a multi-collection scenarios where other collections may have entries in the embeddings queue with sequences < the purged collection min_seq_id\r\n\r\n# Impact\r\n\r\nThe impact of this is quite high and easily reproducible for deployments with more than one collection which are on versions > 0.5.7.\r\n\r\nThe result of the impact is that while documents and metadata are present the embeddings which have not been committed to HNSW (aka `sync_threshold` not reached) are lost.\r\n\r\n\r\n\r\n\r\n\r\n### Versions\r\n\r\nChroma version 0.5.7-0.5.12 (single-node and persistent)\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-10-10T14:59:12+00:00",
    "closed_at": "2024-10-10T17:41:39+00:00",
    "updated_at": "2024-10-10T17:41:39+00:00",
    "author": "tazarov",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 2.7075,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/2922"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2914,
    "title": "[Install issue]: Getting Null in Query",
    "body": "### What happened?\n\nSo i am trying to run the below code to query data I do get results but other fields like metadata, embeddings is giving null \r\n\r\nCode to query :\r\n\r\n```\r\nconst result = await collection.query({\r\n                queryEmbeddings: trainedData,\r\n                nResults: 1\r\n            });\r\n```\r\n\r\nCode to add : \r\n\r\n```\r\nawait dataCollection.add({\r\n                    ids: documentId,  // this should be a string or an array of strings\r\n                    embeddings: embedding.data[0].embedding,  // this should be an array of numbers (the embedding)\r\n                    metadata: {\r\n                        type: 'Support',\r\n                        data: 'refinedData',  // this can be any value, like a string, object, etc.\r\n                    },\r\n                });\r\n```\r\n\r\nOutput :\r\n \r\n ```\r\n{\r\n    \"data\": {\r\n        \"ids\": [\r\n            [\r\n                \"9\"\r\n            ]\r\n        ],\r\n        \"distances\": [\r\n            [\r\n                0.24018067121505737\r\n            ]\r\n        ],\r\n        \"metadatas\": [\r\n            [\r\n                null\r\n            ]\r\n        ],\r\n        \"embeddings\": null,\r\n        \"documents\": [\r\n            [\r\n                null\r\n            ]\r\n        ],\r\n        \"uris\": null,\r\n        \"data\": null,\r\n        \"included\": [\r\n            \"metadatas\",\r\n            \"documents\",\r\n            \"distances\"\r\n        ]\r\n    },\r\n    \"status\": true\r\n}\r\n```\n\n### Versions\n\nLatest\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-09T12:39:55+00:00",
    "closed_at": "2025-01-07T07:48:11+00:00",
    "updated_at": "2025-01-07T07:48:11+00:00",
    "author": "juned-adenwalla",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug,installation trouble,JavaScript",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2155.137777777778,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-10T10:41:38+00:00",
        "body": "hey @juned-adenwalla, thanks for submitting this. I was able to reproduce your issue using the examples you provided above.\r\n\r\nQuick reproduction steps:\r\n\r\nStart Chroma server: \r\n```bash\r\ndocker run --rm -p 8000:8000 chromadb/chroma:0.5.12\r\n```\r\n\r\nTest rig:\r\n\r\n```js\r\nconst {ChromaClient, OpenAIEmbeddingFunction} = require(\"chromadb\");\r\nconst {v4: uuidv4} = require('uuid');\r\n(async () => {\r\n    const cemb = new OpenAIEmbeddingFunction({\r\n        openai_model: \"text-embedding-3-small\",\r\n        openai_api_key: \"sk-\"\r\n    });\r\n\r\n    const client = new ChromaClient({\r\n        path: \"http://0.0.0.0:8000\",\r\n    });\r\n    const col = await client.getOrCreateCollection({name: \"a-test-collection\", embeddingFunction: cemb});\r\n    const embeddings = await cemb.generate([\"The powerhouse of the cell is the mitochondria\"])\r\n    await col.add({\r\n        ids: \"9\",\r\n        embeddings: embeddings[0],\r\n        metadata: {\r\n            type: 'Support',\r\n            data: 'refinedData', \r\n        },\r\n    });\r\n\r\n    const result = await col.query({\r\n        queryEmbeddings: embeddings[0],\r\n        nResults: 1\r\n    });\r\n    console.log(JSON.stringify(result));\r\n    await client.deleteCollection({name: \"a-test-collection\"});\r\n})();\r\n```\r\n\r\nResults in:\r\n\r\n```bash\r\n{\"ids\":[[\"9\"]],\"distances\":[[2.9883324390277763e-16]],\"metadatas\":[[null]],\"embeddings\":null,\"documents\":[[null]],\"uris\":null,\"data\":null,\"included\":[\"metadatas\",\"documents\",\"distances\"]}\r\n```\r\n\r\nThere are two issues here:\r\n\r\n1. The syntax of your `add` is wrong:\r\n\r\n```diff\r\n--- error.js\t2024-10-10 13:36:39\r\n+++ fixed.js\t2024-10-10 13:36:51\r\n@@ -1,8 +1,8 @@\r\n await col.add({\r\n-        ids: \"9\", \r\n-        embeddings: embeddings[0],\r\n-        metadata: {\r\n+        ids: [\"9\"],\r\n+        embeddings: [embeddings[0]],\r\n+        metadatas: [{\r\n             type: 'Support',\r\n             data: 'refinedData', \r\n-        },\r\n+        }],\r\n     });\r\n```\r\n\r\nCheck the docs here - https://docs.trychroma.com/reference/js-collection#add\r\n\r\n2. The JS client does not do sufficient validations on its inputs.\r\n\r\n\r\n\r\nHere's a working version of the example above:\r\n\r\n```js\r\nconst {ChromaClient, OpenAIEmbeddingFunction} = require(\"chromadb\");\r\n(async () => {\r\n    const cemb = new OpenAIEmbeddingFunction({\r\n        openai_model: \"text-embedding-3-small\",\r\n        openai_api_key: \"sk-\"\r\n    });\r\n\r\n    const client = new ChromaClient({\r\n        path: \"http://0.0.0.0:8000\",\r\n    });\r\n    const col = await client.getOrCreateCollection({name: \"a-test-collection\", embeddingFunction: cemb});\r\n    const embeddings = await cemb.generate([\"The powerhouse of the cell is the mitochondria\"])\r\n    await col.add({\r\n        ids: [\"9\"], \r\n        embeddings: [embeddings[0]],\r\n        metadatas: [{\r\n            type: 'Support',\r\n            data: 'refinedData',\r\n        }],\r\n    });\r\n\r\n    const result = await col.query({\r\n        queryEmbeddings: embeddings[0],\r\n        nResults: 1\r\n    });\r\n    console.log(JSON.stringify(result));\r\n})();\r\n```\r\n\r\n\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2914"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2912,
    "title": "[Bug]: My collection loses vectors for some IDs",
    "body": "### What happened?\n\nMy collection loses vectors for some IDs after some time (or after a few queries, the cause of this is unknown to me). For example, if the collection contains 5202 elements, 202 embeddings disappear, leaving 5000 valid records, while 202 records no longer have embeddings. Similarly, for another collection with 70,634 elements, only 70,000 remain valid, and the others lose their embeddings.\r\n\r\nI am certain that the data was written correctly into the collection, and I am sure that the code interacting with these collections does nothing other than queries and get operations. All embeddings are of the same size, and the collection functions normally until an unknown point in time.\r\n\r\nAdditionally, the command collection.get(include=[\"embeddings\"]) stops working and throws an error: \r\n```\r\n{\r\n\t\"name\": \"IndexError\",\r\n\t\"message\": \"list assignment index out of range\",\r\n\t\"stack\": \"---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\nCell In[7], line 1\r\n----> 1 old_resp = old_collection.get(include=[\\\"metadatas\\\", \\\"embeddings\\\"])\r\n      2 old_ids = old_resp[\\\"ids\\\"]\r\n      3 old_metas = old_resp[\\\"metadatas\\\"]\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/api/models/Collection.py:117, in Collection.get(self, ids, where, limit, offset, where_document, include)\r\n     95 \\\"\\\"\\\"Get embeddings and their associate data from the data store. If no ids or where filter is provided returns\r\n     96 all embeddings up to limit starting at offset.\r\n     97 \r\n   (...)\r\n    108 \r\n    109 \\\"\\\"\\\"\r\n    110 (\r\n    111     valid_ids,\r\n    112     valid_where,\r\n    113     valid_where_document,\r\n    114     valid_include,\r\n    115 ) = self._validate_and_prepare_get_request(ids, where, where_document, include)\r\n--> 117 get_results = self._client._get(\r\n    118     self.id,\r\n    119     valid_ids,\r\n    120     valid_where,\r\n    121     None,\r\n    122     limit,\r\n    123     offset,\r\n    124     where_document=valid_where_document,\r\n    125     include=valid_include,\r\n    126 )\r\n    128 return self._transform_get_response(get_results, include)\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py:146, in trace_method.<locals>.decorator.<locals>.wrapper(*args, **kwargs)\r\n    144 global tracer, granularity\r\n    145 if trace_granularity < granularity:\r\n--> 146     return f(*args, **kwargs)\r\n    147 if not tracer:\r\n    148     return f(*args, **kwargs)\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/rate_limiting/__init__.py:47, in rate_limit.<locals>.decorator.<locals>.wrapper(self, *args, **kwargs)\r\n     42 @wraps(f)\r\n     43 def wrapper(self, *args: Any, **kwargs: Dict[Any, Any]) -> Any:\r\n     44     # If not rate limiting provider is present, just run and return the function.\r\n     46     if self._system.settings.chroma_rate_limiting_provider_impl is None:\r\n---> 47         return f(self, *args, **kwargs)\r\n     49     if subject in kwargs:\r\n     50         subject_value = kwargs[subject]\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/api/segment.py:513, in SegmentAPI._get(self, collection_id, ids, where, sort, limit, offset, page, page_size, where_document, include)\r\n    511     vector_ids = [r[\\\"id\\\"] for r in records]\r\n    512     vector_segment = self._manager.get_segment(collection_id, VectorReader)\r\n--> 513     vectors = vector_segment.get_vectors(ids=vector_ids)\r\n    515 # TODO: Fix type so we don't need to ignore\r\n    516 # It is possible to have a set of records, some with metadata and some without\r\n    517 # Same with documents\r\n    519 metadatas = [r[\\\"metadata\\\"] for r in records]\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py:146, in trace_method.<locals>.decorator.<locals>.wrapper(*args, **kwargs)\r\n    144 global tracer, granularity\r\n    145 if trace_granularity < granularity:\r\n--> 146     return f(*args, **kwargs)\r\n    147 if not tracer:\r\n    148     return f(*args, **kwargs)\r\n\r\nFile ~/someperson/retrieval_ann/.venv/lib/python3.10/site-packages/chromadb/segment/impl/vector/local_persistent_hnsw.py:390, in PersistentLocalHnswSegment.get_vectors(self, ids)\r\n    388     for label, vector in zip(hnsw_labels, vectors):\r\n    389         id = self._label_to_id[label]\r\n--> 390         results[id_to_index[id]] = VectorEmbeddingRecord(\r\n    391             id=id, embedding=vector\r\n    392         )\r\n    394 return results\r\n\r\nIndexError: list assignment index out of range\"\r\n}\r\n```\r\n\r\nHowever, if I run collection.get(include=[*anything but embeddings*]), it returns everything as expected.\r\n\r\nChroma version: chromadb==0.5.7\r\n(If an update is necessary, how will this affect my collections? Will I need to recalculate them?)\n\n### Versions\n\nchromadb==0.5.7\r\nubuntu linux 22.04\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-08T16:27:59+00:00",
    "closed_at": "2024-10-10T17:41:39+00:00",
    "updated_at": "2024-10-11T13:22:24+00:00",
    "author": "ChocoL0rd",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "tazarov",
    "resolution_time_hours": 49.227777777777774,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-10-10T11:32:27+00:00",
        "body": "Hey @ChocoL0rd, thanks for reporting this. It seems like a severe problem, so I'll prioritize investigating.\r\n\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-10T17:48:31+00:00",
        "body": "@ChocoL0rd, found the culprit of this, you can check #2922, if you want to dive deeper. Bottom line is we're cutting a new release that will fix this and possibly deprecating old releases (>0.5.5 <=0.5.12) on pypi."
      },
      {
        "author": "ChocoL0rd",
        "created_at": "2024-10-10T17:58:38+00:00",
        "body": "When new version is going to be released? 10 окт. 2024 г. 21:48 пользователь Trayan Azarov ***@***.***> написал:\r\n@ChocoL0rd, found the culprit of this, you can check #2922, if you want to dive deeper. Bottom line is we're cutting a new release that will fix this and possibly deprecating old releases (>0.5.5 <=0.5.12) on pypi.\r\n\r\n—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-10T19:06:00+00:00",
        "body": "@ChocoL0rd, shortly. Possibly in the next couple of hours."
      },
      {
        "author": "ChocoL0rd",
        "created_at": "2024-10-11T09:30:25+00:00",
        "body": "Ok, as i see in pypi new version is available, so i should just upgrade my chromadb, or recreate my db with this chromadb new version? 10.10.2024, 22:06, \"Trayan Azarov\" ***@***.***>***@***.***, shortly. Possibly in the next couple of hours.—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2912"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2905,
    "title": "[Bug]: Missing embeddings in collections after a system reboot",
    "body": "### What happened?\n\nHello, I'm working on a project where we use chromadb:0.5.11 as part of rag pipelines. We have succesfully used it to create collections and query them. We use our own embedder for the queries and chunks and do not rely on the chroma embedding method. We have just had an issue where it seemed that the embeddings in a collection got \"deleted\" or at least they are missing over the weekend after a reboot of the servers that we work on. To be clear, some query search tests on the collections before the weekend and system reboot clearly showed that the embeddings were well added to the collections at time of creation: a retrieval worked as it should to get the relevant documents. Now the same tests return an empty list of documents. I did some debugging by connecting to the chroma server with the chroma http client to maually check the collections and I see that the chunks and metadata still exists but the embeddings are empty. Has anyone seen this problem before? Any ideas about what could have happened or if it could be related to a system reboot? In the chroma logs all looks fine. I just see DEBUG: Starting component PersistentLocalHnswSegment  sometimes  but not sure that is related.\r\n\r\nPossibly related to the following issues linked below but in our use case we do not delete any documents and then add new ones to the same collection. We just create one collection at a time which we then query without any further modifications in any of the data/documents in the collection.\r\n\r\nhttps://github.com/chroma-core/chroma/pull/2512\r\nhttps://github.com/chroma-core/chroma/pull/2062\r\nhttps://github.com/chroma-core/chroma/issues/870\n\n### Versions\n\n0.5.11\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-10-07T15:29:20+00:00",
    "closed_at": "2024-10-21T14:58:54+00:00",
    "updated_at": "2024-10-21T14:58:54+00:00",
    "author": "ymzayek",
    "author_type": "User",
    "comments_count": 9,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "ymzayek",
    "resolution_time_hours": 335.4927777777778,
    "first_comments": [
      {
        "author": "HammadB",
        "created_at": "2024-10-09T16:00:10+00:00",
        "body": "Hi @ymzayek is it possible to share your db if its not sensitive data? Also happy to take them via discord/email if you don't want to post it here. That would help us debug on our end.\r\n\r\nOtherwise, can we start by knowing what files are under /<chroma_path>/<collection_id>/"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-10T15:37:19+00:00",
        "body": "@ymzayek, have a look at this issue #2922. I think the symptoms you are experiencing are similar."
      },
      {
        "author": "ymzayek",
        "created_at": "2024-10-11T10:34:45+00:00",
        "body": "@tazarov yes it seems to explain our problem so I think you can close this issue. Thanks!"
      },
      {
        "author": "tazarov",
        "created_at": "2024-10-11T10:52:29+00:00",
        "body": "@ymzayek, excellent. However, you will have to recreate the missing embeddings. Let me know if you need help with that."
      },
      {
        "author": "ymzayek",
        "created_at": "2024-10-11T11:08:50+00:00",
        "body": "@tazarov yes we will handle that. Thanks a lot :)"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2905"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2876,
    "title": "[Bug]: Chroma stops writing data after number of rows",
    "body": "### What happened?\r\n\r\ni have a strange problem , when i want to write a csv into Chroma db with `chromadb.PersistentClient` after writing 99 rows, code just stops without any error or anything else,\r\nthis is my code :\r\n\r\n```from os import listdir\r\nfrom os.path import isfile, join\r\nfrom tqdm import tqdm\r\nimport chromadb\r\nimport pandas as pd\r\nfrom langchain_huggingface import HuggingFaceEmbeddings\r\nimport time\r\n\r\n\r\nTEXT_EMBEDDING_MODEL = \"BAAI/bge-m3\" # Or any other Embedding model from HuggingFace\r\nVECTOR_DB_NAME = \"my_collection\"\r\nVECTOR_DB_PATH = \"./DB/\"\r\n\r\ndocs_path=\"./data/\"\r\nfile_names = [f for f in listdir(docs_path) if isfile(join(docs_path, f))]\r\n\r\nchroma_client = chromadb.PersistentClient(path = VECTOR_DB_PATH)\r\ncollection=chroma_client.get_or_create_collection(name = VECTOR_DB_NAME)\r\nexisting_ids = set(collection.get()[\"ids\"]) # reading the doc ids to prevent from writing duplicate docs\r\n\r\ntext_embedder=HuggingFaceEmbeddings(\r\n    model_name = TEXT_EMBEDDING_MODEL,\r\n)\r\n\r\n\r\ndef write_2_DB(filename):\r\n    print(\"Trying to Read\", filename)\r\n   \r\n    df = pd.read_excel(filename)\r\n    \r\n    print(\"\\n Number of rows:\", len(df))  # No need to subtract 1, since header is not counted in len\r\n    print(\"\\n Loaded Successfully!\")\r\n    \r\n    # Get column names\r\n    cols = df.columns\r\n\r\n    for idx in df.index :\r\n        print(idx)\r\n        doc_id = str(df[cols[0]].loc[idx])  # Use .loc to access the row with index `idx`\r\n        row = df[cols[1]].loc[idx]  # Access the row using .loc for correct indexing\r\n        if doc_id not in existing_ids:\r\n            doc_text = str(row)\r\n        \r\n            documents_list = []\r\n            embeddings_list = []\r\n            ids_list = []\r\n            \r\n            vector = text_embedder.embed_query(doc_text)  # Embed the chunk\r\n            \r\n            documents_list.append(doc_text)\r\n            embeddings_list.append(vector)\r\n            ids_list.append(doc_id)  # Use column \"knowledge_number\" as the ID\r\n            met={\"id\":doc_id}\r\n            try:\r\n                print(ids_list)\r\n                collection.add(\r\n                    embeddings=embeddings_list,\r\n                    documents=documents_list,\r\n                    ids=ids_list,\r\n                    metadatas = met,\r\n                )\r\n            except Exception as e:\r\n                print(f\"Error writing to Chroma: {e}\")\r\n        else:\r\n            pass\r\n    print(\"all done!\")\r\n\r\n\r\n# Example usage\r\nwrite_2_DB(\"./test.xlsx\")\r\n```\r\n\r\n### Versions\r\n\r\nPython 3.10 , Chroma 0.5.11\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-09-29T07:08:46+00:00",
    "closed_at": "2024-09-29T09:56:13+00:00",
    "updated_at": "2024-09-29T09:56:13+00:00",
    "author": "DavoodHakimi",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "DavoodHakimi",
    "resolution_time_hours": 2.7908333333333335,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/2876"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2863,
    "title": "[Install issue]: chroma not working on windows localhost (anaconda)",
    "body": "### What happened?\n\nchroma not working on windows localhost (anaconda)\r\nI've been trying to run chroma via Anaconda navigator Python. anaconda version is 3 and python is 3.11\r\nWhile trying to add data in chroma collection, the kernel is restarting repeatedly. So, I'm not able to add the data in to a chroma collection. \r\nI'm able to generate embeddings using the default model mentioned in chroma documentation. \r\n\r\nI'm not able to figure out the issue causing this behaviour (i.e. not able to add data)\r\n\r\nKindly help.     \r\n\r\nOS : Windows 11\r\nSystem configuration : \r\n\r\nCode snippet from documentation:\r\n```\r\nimport chromadb\r\nchroma_client = chromadb.Client()\r\ncollection = chroma_client.get_or_create_collection(name=\"my_collection\")\r\n\r\ncollection.upsert(\r\n    documents=[\r\n        \"This is a document about pineapple\",\r\n        \"This is a document about oranges\"\r\n    ],\r\n    ids=[\"id1\", \"id2\"]\r\n)\r\n\r\nresults = collection.query(\r\n    query_texts=[\"This is a query document about florida\"], # Chroma will embed this for you\r\n    n_results=2 # how many results to return\r\n)\r\n\r\nprint(results)\r\n```\r\nthe error is \r\n![image](https://github.com/user-attachments/assets/f0e211cb-0385-40b6-9cdf-3aea19601d17)\r\n\r\nscreenshot of the embeddings generated successfully (in a separate program) from the default model (mentioned in the chroma documentation) is given below:\r\n![image](https://github.com/user-attachments/assets/5ec9f374-076f-4145-98d2-ef635ec49cf3)\r\n\r\n\r\nThanks.\n\n### Versions\n\nPython 3.11.7\r\nOS - Windows 11\r\nChroma 0.5.7\r\n![image](https://github.com/user-attachments/assets/e1b96eb0-773d-4bba-bb95-ec2e00db1b67)\r\n![image](https://github.com/user-attachments/assets/89699c6c-574f-4cea-9939-e6f239869425)\r\n\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-09-26T05:45:51+00:00",
    "closed_at": "2025-01-03T20:21:47+00:00",
    "updated_at": "2025-01-03T20:21:47+00:00",
    "author": "neerajg5",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2390.5988888888887,
    "first_comments": [
      {
        "author": "Kviilen",
        "created_at": "2024-09-26T07:42:42+00:00",
        "body": "I think you can refer to the issues I raised. https://github.com/chroma-core/chroma/issues/2856"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T20:21:47+00:00",
        "body": "Tracking in #2856 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2863"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2861,
    "title": "[CLN] `delete` API should return `None`",
    "body": "The `Collection.delete` API seemingly returns `None`, but our internal implementation returns a list of the IDs that were deleted. These should also return `None` for consistency. ",
    "state": "closed",
    "created_at": "2024-09-26T01:30:19+00:00",
    "closed_at": "2024-11-13T18:16:17+00:00",
    "updated_at": "2024-11-13T18:16:17+00:00",
    "author": "itaismith",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "by-chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 1168.766111111111,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/2861"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2856,
    "title": "[Bug]: Python kernel crashes when using Chroma's from_texts",
    "body": "### What happened?\n\nWhen using the from_texts method of Chroma, the Python kernel crashes without any error messages. The process finishes with exit code -1073741819 (0xC0000005). This issue occurs consistently and makes it impossible to use this method effectively. I am using the latest version of Chroma and have tried on different environments but still encounter the same problem. Any help or suggestions to resolve this issue would be greatly appreciated.\n\n### Versions\n\nSystem Information\r\n------------------\r\n> OS:  Windows\r\n> OS Version:  10.0.22631\r\n> Python Version:  3.12.4 | packaged by Anaconda, Inc. | (main, Jun 18 2024, 15:03:56) [MSC v.1929 64 bit (AMD64)]\r\n\r\nPackage Information\r\n-------------------\r\n> langchain_core: 0.3.5\r\n> langchain: 0.3.0\r\n> langchain_community: 0.3.0\r\n> langsmith: 0.1.125\r\n> langchain_experimental: 0.3.0\r\n> langchain_huggingface: 0.1.0\r\n> langchain_text_splitters: 0.3.0\r\n\r\nOptional packages not installed\r\n-------------------------------\r\n> langgraph\r\n> langserve\r\n\r\nOther Dependencies\r\n------------------\r\n> aiohttp: 3.9.5\r\n> async-timeout: Installed. No version info available.\r\n> dataclasses-json: 0.6.7\r\n> httpx: 0.27.0\r\n> huggingface-hub: 0.24.5\r\n> jsonpatch: 1.33\r\n> numpy: 1.26.4\r\n> orjson: 3.10.6\r\n> packaging: 23.2\r\n> pydantic: 2.8.2\r\n> pydantic-settings: 2.5.2\r\n> PyYAML: 6.0.1\r\n> requests: 2.32.2\r\n> sentence-transformers: 3.0.1\r\n> SQLAlchemy: 2.0.30\r\n> tenacity: 8.5.0\r\n> tokenizers: 0.19.1\r\n> transformers: 4.44.0\r\n> typing-extensions: 4.11.0\n\n### Relevant log output\n\n```shell\nfrom langchain_community.vectorstores import Chroma\r\nembed_model_path = '.././AI-ModelScope/bge-small-en-v1___5'\r\nfrom langchain_huggingface import HuggingFaceEmbeddings\r\nembedding = HuggingFaceEmbeddings(model_name=embed_model_path)\r\ntexts = [\r\n    \"Test\"\r\n]\r\ntry:\r\n    smalldb_chinese = Chroma.from_texts(texts, embedding=embedding)\r\nexcept Exception as r:\r\n    print('%s' %(r))\r\n\r\n\r\nProcess finished with exit code -1073741819 (0xC0000005)\n```\n",
    "state": "closed",
    "created_at": "2024-09-25T16:01:18+00:00",
    "closed_at": "2025-01-07T07:49:02+00:00",
    "updated_at": "2025-01-07T07:49:04+00:00",
    "author": "Kviilen",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2487.7955555555554,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-25T16:12:51+00:00",
        "body": "@Kviilen, recently we've observed kernel crashes on Windows system. One of the workarounds was to update your system with the latest patches from Microsoft and use python 3.10. Alternatively users have reported that running 0.5.3 also solved the problem (although I wouldn't recommend downgrading).\r\n"
      },
      {
        "author": "Kviilen",
        "created_at": "2024-09-25T16:16:36+00:00",
        "body": "I have located that the code at line 382 in the file embeddings_queue.py: if len(filtered_embeddings) > 0: sub.callback(filtered_embeddings) will cause the Python kernel to crash."
      },
      {
        "author": "neerajg5",
        "created_at": "2024-09-27T05:54:31+00:00",
        "body": "thanks @Kviilen  I was able to test chroma on local by both downgrading the chroma. Another way of lowering python version to 3.10.\r\n\r\nHowever, the query results are not clear to me. The query is showing results (documents and scores) of completely unrelated query term, which i fail to infer or understand. Documentation is also providing the clear behaviour "
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-07T07:49:03+00:00",
        "body": "Tracking Windows crashes in #2513 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2856"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2855,
    "title": "[Bug] UnicodeDecodeError during Basic Authentication Setup in Docker",
    "body": "### What happened?\n\nHi,\r\n\r\nI am trying to set up Basic Authentication, but unfortunately, I keep encountering the following error:\r\n\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\r\n\r\nAs a result, the Docker container crashes.\r\n\r\nCould you please help me resolve this issue? I’m unsure what might be causing the problem and would greatly appreciate any guidance.\r\n\r\nThank you in advance for your support!\r\n\r\nBest regards,\n\n### Versions\n\nchromadb/chroma: 0.5.7\n\n### Relevant log output\n\n```shell\nentire log of the docker:\r\nChroma-DB  | Starting 'uvicorn chromadb.app:app' with args: --workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30\r\nChroma-DB  | WARNING:  [25-09-2024 13:37:50] chroma_server_nofile is set to 65536, but this is less than current soft limit of 1048576. chroma_server_nofile will not be set.\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component System\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component OpenTelemetryClient\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component SqliteDB\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component QuotaEnforcer\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component Posthog\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component LocalSegmentManager\r\nChroma-DB  | DEBUG:    [25-09-2024 13:37:50] Starting component SegmentAPI\r\nChroma-DB  | Traceback (most recent call last):\r\nChroma-DB  |   File \"/usr/local/bin/uvicorn\", line 8, in <module>\r\nChroma-DB  |     sys.exit(main())\r\nChroma-DB  |              ^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/click/core.py\", line 1157, in __call__\r\nChroma-DB  |     return self.main(*args, **kwargs)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\nChroma-DB  |     rv = self.invoke(ctx)\r\nChroma-DB  |          ^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/click/core.py\", line 1434, in invoke\r\nChroma-DB  |     return ctx.invoke(self.callback, **ctx.params)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/click/core.py\", line 783, in invoke\r\nChroma-DB  |     return __callback(*args, **kwargs)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/main.py\", line 410, in main\r\nChroma-DB  |     run(\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/main.py\", line 577, in run\r\nChroma-DB  |     server.run()\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/server.py\", line 65, in run\r\nChroma-DB  |     return asyncio.run(self.serve(sockets=sockets))\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/asyncio/runners.py\", line 190, in run\r\nChroma-DB  |     return runner.run(main)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/asyncio/runners.py\", line 118, in run\r\nChroma-DB  |     return self._loop.run_until_complete(task)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"uvloop/loop.pyx\", line 1517, in uvloop.loop.Loop.run_until_complete\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/server.py\", line 69, in serve\r\nChroma-DB  |     await self._serve(sockets)\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/server.py\", line 76, in _serve\r\nChroma-DB  |     config.load()\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/config.py\", line 434, in load\r\nChroma-DB  |     self.loaded_app = import_from_string(self.app)\r\nChroma-DB  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/importer.py\", line 19, in import_from_string\r\nChroma-DB  |     module = importlib.import_module(module_str)\r\nChroma-DB  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/usr/local/lib/python3.11/importlib/__init__.py\", line 126, in import_module\r\nChroma-DB  |     return _bootstrap._gcd_import(name[level:], package, level)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"<frozen importlib._bootstrap>\", line 1204, in _gcd_import\r\nChroma-DB  |   File \"<frozen importlib._bootstrap>\", line 1176, in _find_and_load\r\nChroma-DB  |   File \"<frozen importlib._bootstrap>\", line 1147, in _find_and_load_unlocked\r\nChroma-DB  |   File \"<frozen importlib._bootstrap>\", line 690, in _load_unlocked\r\nChroma-DB  |   File \"<frozen importlib._bootstrap_external>\", line 940, in exec_module\r\nChroma-DB  |   File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\nChroma-DB  |   File \"/chroma/chromadb/app.py\", line 6, in <module>\r\nChroma-DB  |     server = FastAPI(settings)\r\nChroma-DB  |              ^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/chroma/chromadb/server/fastapi/__init__.py\", line 185, in __init__\r\nChroma-DB  |     self.authn_provider = self._system.require(ServerAuthenticationProvider)\r\nChroma-DB  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/chroma/chromadb/config.py\", line 297, in require\r\nChroma-DB  |     inst = self._system.instance(type)\r\nChroma-DB  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/chroma/chromadb/config.py\", line 404, in instance\r\nChroma-DB  |     impl = type(self)\r\nChroma-DB  |            ^^^^^^^^^^\r\nChroma-DB  |   File \"/chroma/chromadb/auth/basic_authn/__init__.py\", line 75, in __init__\r\nChroma-DB  |     creds = self.read_creds_or_creds_file()\r\nChroma-DB  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nChroma-DB  |   File \"/chroma/chromadb/auth/__init__.py\", line 125, in read_creds_or_creds_file\r\nChroma-DB  |     return f.readlines()\r\nChroma-DB  |            ^^^^^^^^^^^^^\r\nChroma-DB  |   File \"<frozen codecs>\", line 322, in decode\r\nChroma-DB  | UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\r\nChroma-DB exited with code 0\r\n\r\n\r\ndocker-compse.yml file:\r\nservices:\r\n  chromaDB:\r\n    image: chromadb/chroma:0.5.7\r\n    restart: unless-stopped\r\n    container_name: 'Chroma-DB'\r\n    volumes:\r\n      - ./db:/chroma/chroma\r\n      - ./server.htpasswd:/chroma/server.htpasswd\r\n    environment:\r\n      - IS_PERSISTENT=TRUE\r\n      - PERSIST_DIRECTORY=/chroma/chroma\r\n      - ANONYMIZED_TELEMETRY=FALSE\r\n      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider\r\n      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/server.htpasswd\r\n    networks:\r\n      - chroma-network\r\n    ports:\r\n      - \"7000:8000\"\r\nnetworks:\r\n  chroma-network:\r\n   driver: bridge\r\n   name: chroma-network\n```\n",
    "state": "closed",
    "created_at": "2024-09-25T14:15:35+00:00",
    "closed_at": "2024-09-26T11:52:27+00:00",
    "updated_at": "2024-09-26T11:52:27+00:00",
    "author": "JaylenC",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "JaylenC",
    "resolution_time_hours": 21.614444444444445,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-25T15:20:06+00:00",
        "body": "hey @JaylenC, the issue you're facing is incorrectly created `/chroma/server.htpasswd`. The issue is usually observed if your hash is not bcrypt (currently we expect a bcrypt hashes in .htpasswd files). Have a look here - https://cookbook.chromadb.dev/security/auth/#basic-authentication (the gist is the -B flag("
      },
      {
        "author": "JaylenC",
        "created_at": "2024-09-26T10:39:56+00:00",
        "body": "> hey @JaylenC, the issue you're facing is incorrectly created `/chroma/server.htpasswd`. The issue is usually observed if your hash is not bcrypt (currently we expect a bcrypt hashes in .htpasswd files). Have a look here - https://cookbook.chromadb.dev/security/auth/#basic-authentication (the gist is the -B flag(\r\n\r\nHello @tazarov , thank you very much for your response. I used the following code to create the hash:\r\n```\r\ndocker run --rm --entrypoint htpasswd httpd:2 -Bbn admin admin > server.htpasswd\r\n```\r\n\r\nThis can be found at https://docs.trychroma.com/deployment/auth. While the file was created correctly and its contents seemed to be correct, it did not work.\r\n\r\nI then installed htpasswd and followed your suggested guide. That seems to have worked. However, now I keep getting the following error message when I try to test everything:\r\n```\r\nValueError: Could not connect to tenant default_tenant. Are you sure it exists?\r\n```\r\nUnfortunately, I haven’t been able to figure out how to resolve this issue yet. Do you have any suggestions for solving this problem?\r\n\r\nThank you very much in advance,\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-26T10:44:28+00:00",
        "body": "@JaylenC, can you share the full error stack?\r\n\r\n`Could not connect to tenant default_tenant. Are you sure it exists?` is ambiguous and does not reveal the actual error which is usually printed up the stack. Did you see anything in server logs?\r\n"
      },
      {
        "author": "JaylenC",
        "created_at": "2024-09-26T10:51:27+00:00",
        "body": "> @JaylenC, can you share the full error stack?\r\n> \r\n> `Could not connect to tenant default_tenant. Are you sure it exists?` is ambiguous and does not reveal the actual error which is usually printed up the stack. Did you see anything in server logs?\r\n\r\n@tazarov \r\nSure, sorry about that. Here you go:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\base_http_client.py\", line 99, in _raise_chroma_error\r\n    resp.raise_for_status()\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\httpx\\_models.py\", line 763, in raise_for_status\r\n    raise HTTPStatusError(message, request=request, response=self)\r\nhttpx.HTTPStatusError: Client error '403 Forbidden' for url 'http://localhost:7000/api/v1/tenants/default_tenant'\r\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\client.py\", line 371, in _validate_tenant_database\r\n    self._admin_client.get_tenant(name=tenant)\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\client.py\", line 415, in get_tenant\r\n    return self._server.get_tenant(name=name)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\telemetry\\opentelemetry\\__init__.py\", line 146, in wrapper\r\n    return f(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\fastapi.py\", line 137, in get_tenant\r\n    resp_json = self._make_request(\"get\", \"/tenants/\" + name)\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\fastapi.py\", line 87, in _make_request\r\n    BaseHTTPClient._raise_chroma_error(response)\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\base_http_client.py\", line 103, in _raise_chroma_error\r\n    raise Exception(f\"{resp.text} (trace ID: {trace_id})\")\r\nException: {\"error\":\"AuthError\",\"message\":\"Forbidden\"} (trace ID: 0)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Headaway\\Desktop\\Studium\\Bachelor\\Code\\Help-ITC-Chatbot\\production\\chroma-db\\client.py\", line 4, in <module>\r\n    client = chromadb.HttpClient(host=\"localhost\", port=7000,\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\__init__.py\", line 204, in HttpClient\r\n    return ClientCreator(tenant=tenant, database=database, settings=settings)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\client.py\", line 61, in __init__\r\n    self._validate_tenant_database(tenant=tenant, database=database)\r\n  File \"C:\\Users\\Headaway\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\chromadb\\api\\client.py\", line 380, in _validate_tenant_database\r\n    raise ValueError(\r\nValueError: Could not connect to tenant default_tenant. Are you sure it exists?\r\n```\r\nServer logs:\r\n```\r\nChroma-DB: ERROR:    [26-09-2024 10:27:27] BasicAuthenticationServerProvider.authenticate failed: AuthError('Invalid username or password')\r\nChroma-DB: INFO:     [26-09-2024 10:27:27] 172.18.0.1:49410 - \"GET /api/v1/tenants/default_tenant HTTP/1.1\" 403\r\nChroma-DB: WARNING:  [26-09-2024 10:48:28] Invalid HTTP request received.\r\n```\r\nI'm pretty sure I set the username and password correctly."
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-26T11:01:11+00:00",
        "body": "yeah `httpx.HTTPStatusError: Client error '403 Forbidden' for url 'http://localhost:7000/api/v1/tenants/default_tenant'` is Auth error for sure. \r\n\r\nBut this time the htpasswd file seems to be ok.\r\n\r\nCan you check with `curl`:\r\n\r\n```bash\r\ncurl -v http://localhost:7000/api/v1/tenants/default_tenant -u <user>:<password>\r\n```\r\n\r\nAlternatively:\r\n\r\n```bash\r\ndocker run --rm -v ./server.htpasswd:/server.htpasswd --entrypoint htpasswd httpd:2 -vb /server.htpasswd <user> <password>\r\n```\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2855"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2853,
    "title": "[Bug]: add_documents method run slowly",
    "body": "# Description\r\nThe add_documents method in the Chroma  is running significantly slower than expected when processing large batches of documents. This is causing bottlenecks in our document ingestion pipeline.\r\n\r\nI have about 200 docs, after using model embebdding bge-m3, I use add_documents to add all docs to vector store like this\r\n```python\r\nself.vector_store.add_documents(self.completed_documents)\r\n```\r\n\r\n# Steps to Reproduce\r\n\r\n- Initialize a Chroma instance\r\n- Prepare a batch of 200 text documents (average: from 100-1000 character)\r\n- Call the add_documents method with this batch\r\n- Observe the time taken to complete the operation\r\n\r\n# Expected Behavior\r\nBased on our performance requirements, the add_documents method should process 200 documents in under 60 seconds.\r\n\r\n# Actual Behavior\r\nThe add_documents method is taking approximately 10 minutes to process 200 documents.\r\n\r\n\r\n\r\n### Versions\r\n\r\n# Environment\r\n\r\nOS: Ubuntu 20.04 LTS\r\nPython version: 3.9.11\r\nLibrary version: langchain_chroma==0.1.2\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-09-25T03:43:50+00:00",
    "closed_at": "2024-09-25T23:16:43+00:00",
    "updated_at": "2024-09-26T04:42:16+00:00",
    "author": "david101-hunter",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 19.548055555555557,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-25T15:23:04+00:00",
        "body": "@david101-hunter, I think the the slowness comes not from Chroma itself but from the embedding model. `bge-m3` is a relatively large and heavy model and unless you run it on a GPU it can be kind of slow on modest hardware. Can I suggest that you either pre-compute the batch embeddings and just try to add them and measure times then or simply use the default embedding model (all-mini-lm) and measure times then."
      },
      {
        "author": "david101-hunter",
        "created_at": "2024-09-26T04:41:51+00:00",
        "body": "Thanks for your insight!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2853"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2841,
    "title": "[Bug]: Deleting non-existing ID returns that ID in the result",
    "body": "### What happened?\n\nPseudo code:\r\n\r\n1. `Add(ids: [id1])`\r\n2. `Delete(ids: [id1, id2])` (no `where`, no `where_document`)\r\n\r\nIn _Chroma_'s log I see `Delete of nonexisting embedding ID: ...`. But the response contains both `id1` and `id2`.\r\n\r\nFound in https://github.com/ssone95/ChromaDB.Client/pull/31.\r\n\r\ncc @atroyn \n\n### Versions\n\n0.5.5\n\n### Relevant log output\n\n```shell\nWARNING:  [24-09-2024 09:03:03] Delete of nonexisting embedding ID: id2\r\nINFO:     [24-09-2024 09:03:03] 192.168.66.102:64200 - \"POST /api/v1/collections/d5932ebf-8ef3-46c8-b4d5-5ac336495994/delete HTTP/1.1\" 200\n```\n",
    "state": "closed",
    "created_at": "2024-09-24T09:07:28+00:00",
    "closed_at": "2024-09-26T18:40:28+00:00",
    "updated_at": "2024-09-26T18:40:28+00:00",
    "author": "cincuranet",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 57.55,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-24T12:10:52+00:00",
        "body": "@cincuranet, thanks for reporting this. `collection.delete()` does not return any response as such: \r\n\r\nhttps://github.com/chroma-core/chroma/blob/408445fe4e965b4ee863dca03bf98d5b9d13ea94/chromadb/api/models/Collection.py#L310-L316\r\n\r\n\r\nHowever looking at the server API and the segment API I can tell that we return the IDs that were originally passed, which is wrong:\r\n\r\nhttps://github.com/chroma-core/chroma/blob/408445fe4e965b4ee863dca03bf98d5b9d13ea94/chromadb/api/segment.py#L555-L561\r\n\r\nhttps://github.com/chroma-core/chroma/blob/408445fe4e965b4ee863dca03bf98d5b9d13ea94/chromadb/api/segment.py#L603-L604\r\n\r\nhttps://github.com/chroma-core/chroma/blob/408445fe4e965b4ee863dca03bf98d5b9d13ea94/chromadb/api/segment.py#L620\r\n\r\nAll in all this is an inconsistent behavior that indeed does feel misleading (not that using the Chroma python/JS clients will expose you this inconsistency).\r\n\r\n\r\nGiven the current implementation in single-node Chroma this can be challenging to fix due to the how the WAL works. But let me have a look if something simple solution can be found.\r\n\r\nGreat job on the C# standalone client by the way 💯 \r\n"
      },
      {
        "author": "HammadB",
        "created_at": "2024-09-24T12:34:31+00:00",
        "body": "Agree this is misleading, the easiest correct + uniform solution would be to make all APIs return None"
      },
      {
        "author": "cincuranet",
        "created_at": "2024-09-24T12:37:09+00:00",
        "body": "> thanks for reporting this. collection.delete() does not return any response as such:\r\n\r\n@tazarov The [JS SDK returns]( https://docs.trychroma.com/reference/js-collection#delete) _A promise that resolves to the IDs of the deleted items._ though."
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-24T12:39:36+00:00",
        "body": "@cincuranet, maybe I spoke before I checked :). Indeed as @HammadB, suggested to simplest will be to return None on delete (an possibly other similar ops that may have incongruent behavior across APIs)."
      },
      {
        "author": "cincuranet",
        "created_at": "2024-09-24T12:48:30+00:00",
        "body": "Sure, that works. `update` operation returns `void`/`None` as well. Once you make a decision report here and I'll follow with C# implementation."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2841"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2837,
    "title": "[Bug]: \"Collection is not created\" message after upgrading to 0.5.0",
    "body": "### What happened?\n\nMy current chroma vector db was indexed in version 0.4 and using that it gave me an error \"sqlite3.OperationalError: no such column: collections.topic\"\r\n\r\nSo I upgraded version to 0.5 and now I get this error message and my vector db is not being queried and always returns empty .\n\n### Versions\n\nChroma 0.5\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-09-23T08:41:28+00:00",
    "closed_at": "2025-01-03T04:33:56+00:00",
    "updated_at": "2025-01-03T04:33:56+00:00",
    "author": "JINO-ROHIT",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug,version-mismatch",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2443.8744444444446,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-24T08:35:03+00:00",
        "body": "@JINO-ROHIT, this is generally an issue with version mismatch. When you upgrade to newer chroma e.g. 0.4.24->0.5.7 there are some system DB upgrades that are carried out (not always but sometimes). These upgrades generally are not backward compatible, and you generally won't be able to access your DB with a client version inferior to the one you used for the upgrade.\r\n\r\nRegarding the specific error, that is a sqlite3 error when the client tries to access a column that has been removed/deprecated (I think this change was done somewhere in the late 0.4.2x). It happens if you try to access your upgraded DB with earlier version. Can you double check that you are accessing your DB with 0.5.x client?\r\n"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T04:33:56+00:00",
        "body": "Closing due to inactivity for some time. @JINO-ROHIT if working with both Chroma client and server v0.6.0 or later doesn't work for you, feel free to open a new issue! We will need as much information as possible to investigate the error."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2837"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2836,
    "title": "[Bug]: An existing connection was forcibly closed by the remote host",
    "body": "### What happened?\n\nWhen insert data to collection I got this error\r\n`httpx.ReadError: [WinError 10054] An existing connection was forcibly closed by the remote host`\r\n\r\nCode:\r\n```\r\ncollection.add(\r\n    documents=documents[i:i + bs],\r\n    embeddings=embeddings[i:i + bs],\r\n    metadatas=df_encode_i[[\r\n        'FeatureB',\r\n        'FeatureC',\r\n        'FeatureD',\r\n    ]].to_dict(orient='records'),\r\n    ids=df_encode_i.FeatureID.apply(lambda x: f'J-{x}').tolist(),\r\n)\r\n```\r\n\r\nThen, chromadb server stopped directly after \r\n`DEBUG:    [23-09-2024 11:25:05] Starting component PersistentLocalHnswSegment`\n\n### Versions\n\nChroma v0.5.7\n\n### Relevant log output\n\n```shell\n(((((((((    (((((####\r\n             ((((((((((((((((((((((#########\r\n           ((((((((((((((((((((((((###########\r\n         ((((((((((((((((((((((((((############\r\n        (((((((((((((((((((((((((((#############\r\n        (((((((((((((((((((((((((((#############\r\n         (((((((((((((((((((((((((##############\r\n         ((((((((((((((((((((((((##############\r\n           (((((((((((((((((((((#############\r\n             ((((((((((((((((##############\r\n                (((((((((    #########\r\n\r\n\r\n\r\nRunning Chroma\r\n\r\nSaving data to: .\\dev\\assets\\chroma_data\r\nConnect to chroma at: http://localhost:8000\r\nGetting started guide: https://docs.trychroma.com/getting-started\r\n\r\n\r\nWARNING:  [23-09-2024 11:19:27] chroma_server_nofile is not supported on Windows. chroma_server_nofile will not be set.\r\nINFO:     [23-09-2024 11:19:27] Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.\r\nDEBUG:    [23-09-2024 11:19:27] Starting component System\r\nDEBUG:    [23-09-2024 11:19:27] Starting component OpenTelemetryClient\r\nDEBUG:    [23-09-2024 11:19:27] Starting component SqliteDB\r\nDEBUG:    [23-09-2024 11:19:27] Starting component QuotaEnforcer\r\nDEBUG:    [23-09-2024 11:19:27] Starting component Posthog\r\nDEBUG:    [23-09-2024 11:19:27] Starting component LocalSegmentManager\r\nDEBUG:    [23-09-2024 11:19:27] Starting component SegmentAPI\r\nINFO:     [23-09-2024 11:19:27] Started server process [14148]\r\nINFO:     [23-09-2024 11:19:27] Waiting for application startup.\r\nINFO:     [23-09-2024 11:19:27] Application startup complete.\r\nINFO:     [23-09-2024 11:19:27] Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\r\nINFO:     [23-09-2024 11:25:05] ::1:6627 - \"GET /api/v1/tenants/default_tenant HTTP/1.1\" 200\r\nINFO:     [23-09-2024 11:25:05] ::1:6627 - \"GET /api/v1/databases/default_database?tenant=default_tenant HTTP/1.1\" 200\r\nDEBUG:    [23-09-2024 11:25:05] Collection jobs_paraphrase_minilm_l6_v2 already exists, returning existing collection.\r\nINFO:     [23-09-2024 11:25:05] ::1:6628 - \"POST /api/v1/collections?tenant=default_tenant&database=default_database HTTP/1.1\" 200\r\nINFO:     [23-09-2024 11:25:05] ::1:6628 - \"GET /api/v1/pre-flight-checks HTTP/1.1\" 200\r\nDEBUG:    [23-09-2024 11:25:05] Starting component PersistentLocalHnswSegment\n```\n",
    "state": "closed",
    "created_at": "2024-09-23T04:31:34+00:00",
    "closed_at": "2024-09-23T06:38:19+00:00",
    "updated_at": "2024-09-23T06:38:19+00:00",
    "author": "fn-hide",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "fn-hide",
    "resolution_time_hours": 2.1125,
    "first_comments": [
      {
        "author": "fn-hide",
        "created_at": "2024-09-23T06:38:19+00:00",
        "body": "Solved by downgrading to chromadb v0.5.3\r\nAfter I found this [issue](https://github.com/chroma-core/chroma/issues/2513)"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2836"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2835,
    "title": "[Bug]: EmbeddingFunction not working as documented in migration docs",
    "body": "### What happened?\n\nFollowed instructions here exactly:\r\nhttps://docs.trychroma.com/deployment/migration#migration-to-0.4.16---november-7,-2023\r\n\r\n```\r\nfrom chromadb.api.types import Documents, Embeddings, Embeddable, Images, Protocol\r\nfrom transformers import pipeline\r\nfrom typing import TypeVar, Union\r\n\r\nconfig = {\r\n    \"embedding_model\": \"microsoft/Multilingual-MiniLM-L12-H384\",\r\n    # ...other stuff omitted for brevity\r\n}\r\n\r\npipeline = pipeline(\r\n    task=\"feature-extraction\", \r\n    model=config['embedding_model']\r\n)\r\n\r\nEmbeddable = Union[Documents, Images]\r\nD = TypeVar(\"D\", bound=Embeddable, contravariant=True)\r\n\r\nclass EmbeddingFunction(Protocol[D]):\r\n    def __call__(self, input: D) -> Embeddings:\r\n        return pipeline(input, return_tensors=True)\r\n```\r\n\r\nGot error in log output below, instructing me to do the thing I just did. Any help would be greatly appreciated. :)\r\n\n\n### Versions\n\nchromadb version 0.5.7,\r\nchroma-hnswlib 0.7.6 (this was installed by chroma, not me directly)\r\npython 3.10.12\r\nUbuntu 22.04\r\n\n\n### Relevant log output\n\n```shell\nValueError: Expected EmbeddingFunction.__call__ to have the following signature: odict_keys(['self', 'input']), got odict_keys(['self', 'args', 'kwargs'])\r\nE           Please see https://docs.trychroma.com/guides/embeddings for details of the EmbeddingFunction interface.\r\nE           Please note the recent change to the EmbeddingFunction interface: https://docs.trychroma.com/deployment/migration#migration-to-0.4.16---november-7,-2023\n```\n",
    "state": "closed",
    "created_at": "2024-09-22T16:30:40+00:00",
    "closed_at": "2025-01-03T04:12:43+00:00",
    "updated_at": "2025-01-03T04:12:43+00:00",
    "author": "davidtbo",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2459.7008333333333,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-24T11:05:37+00:00",
        "body": "@davidtbo, can you try this:\r\n\r\n```python\r\nfrom transformers import pipeline\r\nfrom typing import Dict, Any\r\nfrom chromadb.api.types import (\r\n    Documents,\r\n    EmbeddingFunction,\r\n    Embeddings\r\n)\r\n\r\n\r\nclass MyCustomEmbeddingFunction(EmbeddingFunction[Documents]):\r\n    def __init__(\r\n            self,\r\n            **kwargs: Dict[str, Any]\r\n    ):\r\n        \"\"\"Initialize the embedding function.\"\"\"\r\n        self._pipeline = pipeline(\r\n            task=\"feature-extraction\", \r\n            model=kwargs.get('embedding_model')\r\n        )\r\n\r\n\r\n    def __call__(self, input: Documents) -> Embeddings:\r\n        \"\"\"Embed the input documents.\"\"\"\r\n        return self._pipeline(input, return_tensors=True)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    embedding_function = MyCustomEmbeddingFunction(embedding_model=\"microsoft/Multilingual-MiniLM-L12-H384\")\r\n    print(embedding_function([\"Hello, world!\"]))\r\n```\r\n\r\nThe `EmbeddingFunction` can be directly inherited with the correct type(s).\r\n "
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T04:12:43+00:00",
        "body": "Closing due to inactivity for some time. @davidtbo if the solution above doesn't work for you, feel free to open a new issue!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2835"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2809,
    "title": "[Bug]: Cannot authenticate using  chroma_client_auth_token_transport_header=\"X-Chroma-Token\", in settings.",
    "body": "### What happened?\r\n\r\nI have setup a ChromaDB on GCP and followed instructions to make it accesible.\r\n\r\nI'm connecting to DB using this\r\n\r\n`chroma_client = chromadb.HttpClient(\r\n                    host=CHROMA_SERVER_URL, \r\n                    port=8000,\r\n                    settings=ChromaDBSettings(\r\n                        chroma_client_auth_token_transport_header=\"X-Chroma-Token\",\r\n                        chroma_client_auth_provider=\"chromadb.auth.token_authn.TokenAuthClientProvider\",\r\n                        chroma_client_auth_credentials=\"ew7rsnUnJgc9TneLT8Vph130iQ\"      \r\n                        ))`\r\n                        \r\n                   I see in the logs that the request reaches, but pydantic throws this error\r\n                   \r\n                   `pydantic.v1.error_wrappers.ValidationError: 1 validation error for Settings\r\nchroma_client_auth_token_transport_header`\r\n\r\n\r\n\r\n### Versions\r\n\r\nChroma V5.5.0, Pydantic 2.9.0, Ubuntu 22.04\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nfrom services.create_vectordb import index_knowledge_document\r\n  File \"/home/sachin_thevoicing_ai/voicing-pipeline-complete/services/master_api_service/app/services/create_vectordb.py\", line 21, in <module>\r\n    settings=ChromaDBSettings(\r\n  File \"/opt/conda/envs/api/lib/python3.10/site-packages/pydantic/v1/env_settings.py\", line 40, in __init__\r\n    super().__init__(\r\n  File \"/opt/conda/envs/api/lib/python3.10/site-packages/pydantic/v1/main.py\", line 341, in __init__\r\n    raise validation_error\r\npydantic.v1.error_wrappers.ValidationError: 1 validation error for Settings\r\nchroma_client_auth_token_transport_header\r\n  extra fields not permitted (type=value_error.extra\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-09-17T14:39:43+00:00",
    "closed_at": "2024-09-17T15:34:23+00:00",
    "updated_at": "2024-09-17T15:34:24+00:00",
    "author": "sachinvoicing",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "sachinvoicing",
    "resolution_time_hours": 0.9111111111111111,
    "first_comments": [
      {
        "author": "sachinvoicing",
        "created_at": "2024-09-17T14:42:35+00:00",
        "body": "Followed this document for connecting. Tried Token authentication\r\n\r\nhttps://cookbook.chromadb.dev/security/auth/#authorization"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2809"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2806,
    "title": "[Bug]: Cannot import chroma due to `TypeError: Instance and class checks can only be used with @runtime_checkable protocols`",
    "body": "### What happened?\r\n\r\nUsers tried to import `chromadb` in our AI containers (latestml/ml-gpu-py311-cuda118-hf:TAG), but the import failed with `TypeError` (see below for stack trace).\r\n\r\n\r\n### Versions\r\n\r\nChroma 0.5.3\r\nPython 3.11.10\r\nUbuntu 22.04\r\n\r\nNote: the reason why we cannot upgrade chromadb from 0.5.3 to either 0.5.4 or 0.5.5 is that both of these newer versions are blocklisted by another package as seen by this error message displayed by `pip` during such attempt:\r\n```\r\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nlangchain-chroma 0.1.4 requires chromadb!=0.5.4,!=0.5.5,<0.6.0,>=0.4.0, but you have chromadb 0.5.5 which is incompatible.\r\n ```\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nReproducible example using Docker run:\r\n\r\n$ docker run --rm -it --name test latestml/ml-gpu-py311-cuda118-hf:20240916-1725 python -c \"import chromadb\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/__init__.py\", line 3, in <module>\r\n    from chromadb.api.client import Client as ClientCreator\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/__init__.py\", line 7, in <module>\r\n    from chromadb.api.models.Collection import Collection\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/models/Collection.py\", line 4, in <module>\r\n    from chromadb.api.models.CollectionCommon import CollectionCommon\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/models/CollectionCommon.py\", line 14, in <module>\r\n    import chromadb.utils.embedding_functions as ef\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/utils/embedding_functions/__init__.py\", line 46, in <module>\r\n    _all_classes.update(_import_all_efs())\r\n                        ^^^^^^^^^^^^^^^^^\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/utils/embedding_functions/__init__.py\", line 37, in _import_all_efs\r\n    and isinstance(attr, EmbeddingFunction)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/conda/lib/python3.11/site-packages/typing_extensions.py\", line 639, in __instancecheck__\r\n    raise TypeError(\"Instance and class checks can only be used with\"\r\nTypeError: Instance and class checks can only be used with @runtime_checkable protocols\r\n\r\n```\r\n\r\nLocal run (inside the above containers):\r\n```\r\n(base) jovyan@004209e9b72b:~$ python\r\nPython 3.11.10 | packaged by conda-forge | (main, Sep 10 2024, 11:01:28) [GCC 13.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\n>>> import chromadb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/__init__.py\", line 3, in <module>\r\n    from chromadb.api.client import Client as ClientCreator\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/__init__.py\", line 7, in <module>\r\n    from chromadb.api.models.Collection import Collection\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/models/Collection.py\", line 4, in <module>\r\n    from chromadb.api.models.CollectionCommon import CollectionCommon\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/api/models/CollectionCommon.py\", line 14, in <module>\r\n    import chromadb.utils.embedding_functions as ef\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/utils/embedding_functions/__init__.py\", line 46, in <module>\r\n    _all_classes.update(_import_all_efs())\r\n                        ^^^^^^^^^^^^^^^^^\r\n  File \"/opt/conda/lib/python3.11/site-packages/chromadb/utils/embedding_functions/__init__.py\", line 37, in _import_all_efs\r\n    and isinstance(attr, EmbeddingFunction)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/conda/lib/python3.11/site-packages/typing_extensions.py\", line 639, in __instancecheck__\r\n    raise TypeError(\"Instance and class checks can only be used with\"\r\nTypeError: Instance and class checks can only be used with @runtime_checkable protocols\r\n>>> \r\n\r\n```\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-09-16T19:19:23+00:00",
    "closed_at": "2025-01-03T04:11:10+00:00",
    "updated_at": "2025-01-03T04:11:10+00:00",
    "author": "mirekphd",
    "author_type": "User",
    "comments_count": 5,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2600.8630555555555,
    "first_comments": [
      {
        "author": "mirekphd",
        "created_at": "2024-09-16T19:31:35+00:00",
        "body": "One workaround I found is uninstalling the package that pins chromadb to an older version and upgrading chromadb to latest, thus:\r\n```\r\n$ pip uninstall langchain-chroma\r\nFound existing installation: langchain-chroma 0.1.4\r\nUninstalling langchain-chroma-0.1.4:\r\n  Would remove:\r\n    /opt/conda/lib/python3.11/site-packages/langchain_chroma-0.1.4.dist-info/*\r\n    /opt/conda/lib/python3.11/site-packages/langchain_chroma/*\r\nProceed (Y/n)? y\r\n  Successfully uninstalled langchain-chroma-0.1.4\r\n\r\n$ pip install chromadb==0.5.5\r\n\r\n$ pip show chromadb\r\nName: chromadb\r\nVersion: 0.5.5\r\nSummary: Chroma.\r\nHome-page: https://github.com/chroma-core/chroma\r\nAuthor: \r\nAuthor-email: Jeff Huber <jeff@trychroma.com>, Anton Troynikov <anton@trychroma.com>\r\nLicense: \r\nLocation: /opt/conda/lib/python3.11/site-packages\r\n[..]\r\n\r\n$ python -c \"import chromadb; print(chromadb.__version__)\"\r\n0.5.5\r\n``` \r\n```"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T19:40:55+00:00",
        "body": "@mirekphd making sure i have this right - latest chroma works ok? we would consider that a \"valid workaround\" if so... "
      },
      {
        "author": "mirekphd",
        "created_at": "2024-09-16T19:47:30+00:00",
        "body": "On its own and in general: if one can upgrade chromadb to its latest version - it is not even a problem that your users would encounter, but the last 2 versions including the latest i.e. the working one are for some reason blocklisted by LangChain... so effectively you cannot upgrade it to latest (if users want to use chromadb through LangChain)."
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-16T19:54:09+00:00",
        "body": "@jeffchuber, this is how LC have defined their version string in `0.1.4` of the `langchain-chroma` package:\r\n\r\nhttps://github.com/langchain-ai/langchain/blob/a319a0ff1d17057d750f7e4a8fee98aa8f68703c/libs/partners/chroma/pyproject.toml#L50\r\n\r\nIt might be so that 0.5.4 and 0.5.5 break backward compatibility."
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T04:11:10+00:00",
        "body": "Langchain skips 0.5.4 and 0.5.5 to resolve this"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2806"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2795,
    "title": "[Bug]: HttpClient connection is very slow from Windows client to Linux server",
    "body": "### What happened?\r\n\r\nI expect the connection between the application and the Chromadb server to occur in every thousandth of a second, but in my case it is around 1:10 (mm:ss)\r\n\r\n### Versions\r\n\r\n**Client Side**\r\n\r\n- Windows 11\r\n- Python: 3.12.6\r\n- chromadb-client:  0.5.6.dev0\r\n\r\n**Server Side** \r\n\r\n- Linux Ububtu 24.04\r\n- Python: 3.12.3\r\n- chromadb:  0.5.5\r\n\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nI don't get an error during the connection process, only the connection time is extremely high. \r\nHowever, I tested connectivity from the Linux client to the Linux server and it was extremely fast (< 120ms)\r\n\r\n192.168.0.5 is my server running a chromadb server\r\n\r\nStart Connection time:-  2024-09-13 14:53:30.196609\r\nFinish Connection time:- 2024-09-13 14:54:37.814719\r\n\r\n=====  Python Code  =================================\r\n\r\nimport chromadb\r\nimport datetime\r\n\r\nprint(\"Start Connection time:-\", datetime.datetime.now())\r\n\r\nchroma_client = chromadb.HttpClient(host='192.168.0.5', port=8000)\r\n\r\nprint(\"Finish Connection time:-\", datetime.datetime.now())\r\n```\r\n",
    "state": "closed",
    "created_at": "2024-09-13T18:37:46+00:00",
    "closed_at": "2025-01-07T07:50:46+00:00",
    "updated_at": "2025-01-07T07:50:48+00:00",
    "author": "anderatt",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2773.2166666666667,
    "first_comments": [
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:46:21+00:00",
        "body": "@anderatt can you try to `curl` to `/api/v1/heartbeat/` on your server from your windows machine and see if that is fast? that will help us reproduce. thanks! "
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-16T07:58:02+00:00",
        "body": "@anderatt, adding on top of what @jeffchuber mentioned, also add `-v` flag so that you can see headers and timestamps in the `curl` output:\r\n\r\n```bash\r\nculr -v http://192.168.0.5:8000/api/v1/heartbeat\r\n```\r\n\r\nIf you don't have curl available either thru WLS or minGW you can use powershell command as follows:\r\n\r\n```bash\r\nInvoke-WebRequest -Uri \"http://localhost:8000/api/v1/heartbeat\" -Verbose\r\n```\r\n\r\nThere are many reasons why requests might be slow, granted some of them can be from Chroma client or server.\r\n\r\nSome background information about how the Chroma client works.  When you create a new client `chromadb.HttpClient(...)`, the client will attempt to connect to Chroma server immediately by verifying that tenant and database exist (that's two separate requests to the server):\r\n\r\n```bash\r\nINFO:     [16-09-2024 07:50:48] Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\r\nINFO:     [16-09-2024 07:50:51] 192.168.65.1:30408 - \"GET /api/v1/tenants/default_tenant HTTP/1.1\" 200\r\nINFO:     [16-09-2024 07:50:51] 192.168.65.1:30408 - \"GET /api/v1/databases/default_database?tenant=default_tenant HTTP/1.1\" 200\r\n```\r\n\r\nLet me ask a few clarifying questions:\r\n\r\n- How is your machine connected to the server: home, corporate etc. network?\r\n- Is your machine in a corporate network? - frequently in such networks there are proxies and additional firewalls\r\n- Does your computer have any configured proxies?\r\n- Do you have any firewall rules or an anti-virus program that might be inspecting the traffic?\r\n\r\n\r\n"
      },
      {
        "author": "anderatt",
        "created_at": "2024-09-16T13:42:52+00:00",
        "body": "@jeffchuber and @tazarov \r\n\r\nThanks for answer me.\r\n\r\nSo, let provide more information for you:\r\n\r\n**Answer for the command** : **_curl -v http://192.168.0.5: 8000_**\r\nInvoke-WebRequest : Cannot find a positional parameter that accepts the argument '8000'.\r\nRow:1 caractere:1\r\n+ curl -v http://192.168.0.5: 8000\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Invoke-WebRequest], ParameterBindingException\r\n    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\nPS C:\\Users\\ander> _**curl -v http://192.168.0.5:8000**_\r\nDETAILED MODE: GET with 0-byte payload\r\ncurl : {\"detail\":\"Not Found\"}\r\nNo linha:1 caractere:1\r\n+ curl -v http://192.168.0.5:8000\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc\r\n   eption\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\n**The next command works fine!! The execution were in miliseconds**\r\n**PS C:\\Users\\ander> _Invoke-WebRequest -Uri \"http://192.168.0.5:8000/api/v1/heartbeat\" -Verbose**_\r\nMODO DETALHADO: GET with 0-byte payload\r\nMODO DETALHADO: received 44-byte response of content type application/json\r\n\r\n\r\nStatusCode        : 200\r\nStatusDescription : OK\r\nContent           : {\"nanosecond heartbeat\":1726492632483973753}\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Content-Length: 44\r\n                    Content-Type: application/json\r\n                    Date: Mon, 16 Sep 2024 13:17:09 GMT\r\n                    Server: uvicorn\r\n\r\n                    {\"nanosecond heartbeat\":1726492632483973753}\r\nForms             : {}\r\nHeaders           : {[Content-Length, 44], [Content-Type, application/json], [Date, Mon, 16 Sep 2024 13:17:09 GMT],\r\n                    [Server, uvicorn]}\r\nImages            : {}\r\nInputFields       : {}\r\nLinks             : {}\r\nParsedHtml        : mshtml.HTMLDocumentClass\r\nRawContentLength  : 44\r\n\r\n**How is your machine connected to the server: home, corporate etc. network?**\r\n\r\nI'm connecting in two ways, the first is the one I've used most, it's installing a VM on Oracle VirtualBox with Ubuntu 24.04 installed. The second, once the problems appeared, was to create the entire VM configuration on a LAPTOP on the same network, even so the problems persist and are identical\r\n\r\n\r\n**Is your machine in a corporate network? - frequently in such networks there are proxies and additional firewalls**\r\n\r\nIt is not a corporate network and there are no firewalls or proxies between the machines or between the Windows machine and the VM. The Oracle VirtualBox is installed on the same development Windows machine.\r\n\r\n\r\n**Does your computer have any configured proxies?**\r\n\r\nOn the Windows machine there is the default firewall and Antivirus that comes with the Windows installation, but I tested with both disabled and the problem persists.\r\n\r\n\r\n**Do you have any firewall rules or an anti-virus program that might be inspecting the traffic?**\r\n\r\nAs mentioned previously, even with the standard Windows firewall and antivirus disabled, the problem persists. I do not have any type of firewall or additional antivirus on the development machine\r\n\r\n\r\n**The command to start the Chromadb in a server side is:**\r\n\r\n/bin/bash\r\nsource /home/tomzitz/.venv/bin/activate\r\n/home/tomzitz/.venv/bin/chroma run --host 0.0.0.0 --port 8000 --path /home/tomzitz/chromadata\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-16T14:54:07+00:00",
        "body": "@anderatt Can you test with this:\n\n```\npython -c \"import httpx; print(httpx.get('http://192.168.0.5:8000/api/v1/heartbeat').text)\"\n```\n\nMake sure you have your virtual environment sourced.\n\nYou can also add timestamp printouts. Chroma recently switched from requests to httpx lib so I wonder if it can be something related to that.\n\n"
      },
      {
        "author": "anderatt",
        "created_at": "2024-09-16T15:07:58+00:00",
        "body": "@tazarov \r\n\r\nThis is the result test:\r\n\r\n(venv) PS C:\\> python -c \"import httpx; print(httpx.get('http://192.168.0.5:8000/api/v1/heartbeat').text)\"\r\n{\"nanosecond heartbeat\":1726498916083741537}\r\n\r\nThe elapsed time was 28.120 seconds (28 seconds and 120 milliseconds)"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2795"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2792,
    "title": "[Bug]: Chroma DB returned nothing when searching on more than 7 documents",
    "body": "### What happened?\r\n\r\nI have around 20 txt files to store on vector DB on my RAG system. The system worked fine during ingestion time, as I checked in the vector DB after ingesting data. It also worked fine with a small number of documents ~ around 7. However, when I try to ingest a larger number of documents, the system failed without any exception or error raised, which left me really baffled.\r\n\r\nThis is my code:\r\n\r\n`class VectorDBOperations:\r\n\r\n    def __init__(self):\r\n        self.client = chromadb.PersistentClient(path=\"data/chroma_db\")\r\n\r\n    def create_collection(self, collection_name):\r\n        try:\r\n            self.client.create_collection(\r\n                name=collection_name, metadata={\"hnsw:space\": \"cosine\"}\r\n            )\r\n            print(f\"Collection '{collection_name}' created successfully.\")\r\n        except Exception as e:\r\n            print(f\"Failed to create collection: {str(e)}\")\r\n\r\n    def add_embedding(self, collection_name, document, embedding, metadata, id):\r\n        try:\r\n            collection = self.client.get_collection(collection_name)\r\n            # either update if ids exist, or add new\r\n            collection.upsert(\r\n                documents=[document],\r\n                embeddings=[embedding.tolist()],\r\n                metadatas=[metadata],\r\n                ids=[id],\r\n            )\r\n            print(\"Embedding added successfully.\")\r\n        except Exception as e:\r\n            print(f\"Failed to add embedding: {str(e)}\")\r\n\r\n    def search_embeddings(self, collection_name, query_embedding, top_k=20):\r\n        try:\r\n            collection = self.client.get_collection(name = collection_name)\r\n            results = collection.query(\r\n                query_embeddings=[query_embedding.tolist()], n_results=top_k,\r\n                include=[\"documents\", 'distances', 'embeddings', 'metadatas']\r\n            )\r\n            print(\"Search successfully\")\r\n            return results\r\n        except Exception as e:\r\n            print(f\"Search failed: {str(e)}\")\r\n`\r\n\r\nIn the case of failing to search, the code does not even print anything, even at the \"Search successfully\" or any exception. It just crashed.\r\n\r\nI hope someone could help me. I have been trying fixing this the whole week but it just led to nowhere. \r\n\r\n### Versions\r\n\r\nchroma 0.5.5\r\npython 3.10\r\nusing windows\r\n\r\n### Relevant log output\r\n\r\n_No response_",
    "state": "closed",
    "created_at": "2024-09-13T08:48:13+00:00",
    "closed_at": "2025-01-07T07:51:40+00:00",
    "updated_at": "2025-01-07T07:51:41+00:00",
    "author": "thaohp113",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug,index",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2783.0575,
    "first_comments": [
      {
        "author": "atroyn",
        "created_at": "2024-09-13T18:00:28+00:00",
        "body": "Hi @thaohp113; this is very likely related to crashes we have seen on Windows due to the python bindings with the HNSW index. The solution has been to update windows to the latest version - could you please try this and report back ?  "
      },
      {
        "author": "thaohp113",
        "created_at": "2024-09-15T09:02:54+00:00",
        "body": "> Hi @thaohp113; this is very likely related to crashes we have seen on Windows due to the python bindings with the HNSW index. The solution has been to update windows to the latest version - could you please try this and report back ?\r\n\r\nIndeed, thank you so much for your help! I just updated my window and try again. It seemed to have no error now. However, if anyone ever ran into the problem, my temporary solution would be downgrading the chromadb to 0.5.3, and it works for me."
      },
      {
        "author": "thaohp113",
        "created_at": "2024-09-15T12:20:12+00:00",
        "body": "UPDATE: it's not really stable. I tried again a few times and the error seemed to occur again. I highly recommend downgrading the version for a stable run. "
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-07T07:51:40+00:00",
        "body": "Tracking Windows crashing in #2513 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2792"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2770,
    "title": "[Update][Internal] Update client telemetry for developer cloud ",
    "body": "In order to better support users of Chroma's developer cloud, we need to be able to associate client-side telemetry with telemetry from Chroma's cloud service. \r\n\r\nTo do so we should update the client posthog telemetry to send along some more information when the client is connecting to the Chroma host. This is probably best implemented in the `HTTPClient`. ",
    "state": "closed",
    "created_at": "2024-09-09T17:12:08+00:00",
    "closed_at": "2024-09-17T21:54:53+00:00",
    "updated_at": "2024-09-17T21:54:54+00:00",
    "author": "atroyn",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "Local Chroma",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 196.7125,
    "first_comments": [
      {
        "author": "itaismith",
        "created_at": "2024-09-17T21:54:53+00:00",
        "body": "Closed as of #2785 "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2770"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2769,
    "title": "[Bug]: Large collection impacting performance of other collections",
    "body": "It seems like large collections impact the retrieval speed of other collections for a given chroma.sqlite3 database.\r\n\r\nI ran a few tests starting from an empty chroma database, adding at each step a collection of 50k embeddings. Everytime I add a new collection, I run a retrieval on the first collection. The retrieval speed on that first collection (and all the others) grows almost linearly with the number of embeddings stored in other collections.\r\n\r\nAs an example, here is the number of chunks versus retrieval time i get (default ChromaDB and HNSW parameters, persistent client):\r\n- 50 000 chunks -> 22s\r\n- 100 000 chunks -> 38s\r\n- 150 000 chunks -> 51s\r\n- 200 000 chunks -> 68s\r\n- 250 000 chunks -> 81s\r\n\r\n**Is this expected behavior in the ChromaDB implementation? Shouldn't all collections be independent?**\r\n\r\n\r\n### Versions\r\n\r\nChroma 0.5.3\r\nPython 3.11.7\r\nOracle Linux 8",
    "state": "closed",
    "created_at": "2024-09-09T08:19:43+00:00",
    "closed_at": "2024-09-09T16:12:35+00:00",
    "updated_at": "2024-09-09T16:12:35+00:00",
    "author": "grosjeang",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "grosjeang",
    "resolution_time_hours": 7.881111111111111,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-09T14:15:05+00:00",
        "body": "@grosjeang, can you share some more info on your type of queries? HNSW, which is the foundation of the vector query has a O(logN) complexity, so I suspect you have a `where` filter somewhere in your queries. If that is the case, then sqlite3, which does sqlite3 filtering, may indeed bump up the latency at scale. Recently, indices were added to speed up queries - #2623 (to try it out you'll need to use the latest `main`).\r\n\r\n\r\n"
      },
      {
        "author": "grosjeang",
        "created_at": "2024-09-09T16:12:29+00:00",
        "body": "@tazarov Thank you for your answer, it was indeed a problem with my `where` filter that was a bit too complex !"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2769"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2768,
    "title": "Why can a local server connect to only one database?",
    "body": "Why can a local server connect to only one database? Why can a local server connect to only one database instead of a traditional database service? I've seen a similar design on other vector database services, is this design to avoid any problems?\r\n\r\nBy the way, I've been learning code of chroma lately. It's not very easy to understand just by looking at the code, where can I find design documents like architecture diagrams?",
    "state": "closed",
    "created_at": "2024-09-09T08:05:30+00:00",
    "closed_at": "2024-09-16T15:24:05+00:00",
    "updated_at": "2024-09-16T15:24:05+00:00",
    "author": "Amphetaminewei",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 175.30972222222223,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-09T14:08:17+00:00",
        "body": "hey @Amphetaminewei, single-node Chroma has two modes of operation:\r\n\r\n- Persistent or Ephemeral client - intended for embedding in an application. In PersistentClient mode, you can create multiple clients, each connecting to a different db (persistent dir).\r\n\r\n```py\r\nimport chromadb\r\npclient1 = chromadb.PersistentClient(path=\"db1\")\r\npclient2 = chromadb.PersistentClient(path=\"db2\")\r\n```\r\n- Client/Server (or simply HttpClient) - In this mode you can also specify multiple clients that connect to different servers\r\n\r\n```py\r\nimport chromadb\r\n\r\nclient1 = chromadb.HttpClient(\"http://localhost:8000\")\r\n\r\nclient2 = chromadb.HttpClient(\"http://mydomain.com:8000\")\r\n```\r\n\r\nWith the above in mind, can you tell me in which category or in what way you'd like to use Chroma and connect to multiple DBs? Or perhaps share a code snippet that poses the challenge?\r\n\r\nRegarding the architecture, Chroma is still in active development and changes frequently. I'll see if I can share some high-level overview of the single-node architecture.\r\n\r\n\r\n"
      },
      {
        "author": "Amphetaminewei",
        "created_at": "2024-09-10T07:52:42+00:00",
        "body": "> With the above in mind, can you tell me in which category or in what way you'd like to use Chroma and connect to multiple DBs?\r\n\r\nHi @tazarov  i start the server on my local computer, and connect to the server with the HTTP client, and I find that when the service starts, I need to specify a database as a parameter. I think this means that this service can only manage a specified database.\r\n\r\nI'm learning how to build a vector database service, so I'm actually more curious about the reason for this design"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-11T14:14:01+00:00",
        "body": "@Amphetaminewei, can you show me the bit of code that requires you to specify the database parameter? Do you mean that the persistent dir or the address is what you specify as a database?"
      },
      {
        "author": "Amphetaminewei",
        "created_at": "2024-09-12T08:34:57+00:00",
        "body": "@tazarov  I started the database service in the following ways:\r\n```\r\nchroma run --path ~/.local/vectordb/\r\n```\r\nThen connect to the server through the HTTP client：\r\n```\r\nimport chromadb\r\nclient1 = chromadb.HttpClient(\"http://localhost:8000\")\r\n```\r\nThis makes it impossible for my database service to manage multiple databases with one service like a traditional database service like MySQL, but only to connect to the one database specified in the --path parameter, and I would like to know the reason for this design"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:50:39+00:00",
        "body": "@Amphetaminewei \r\n\r\nthe HTTP Client accepts tenant and database as input params\r\n\r\nhttps://github.com/chroma-core/chroma/blob/7b991fa6a949142851ff4b715f00f48f6bcc13da/chromadb/__init__.py#L162\r\n\r\nare you saying you want one client and be able to specify the `tenant` and `db` dynamically?"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2768"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2766,
    "title": "[Bug]: “ERROR:  must be real number, not NoneType“ when trying to save embedding",
    "body": "### What happened?\n\nI was trying to save embedding of one sample text file into Ollema.\r\n\r\n```javascript\r\nconst { ChromaClient } = require('chromadb');\r\nconst { Ollama } = require('ollama');\r\nconst fs = require('fs');\r\n\r\nconst document  = fs.readFileSync('./test.txt', 'utf8');\r\n\r\nconst client = new ChromaClient();\r\nconst ollama = new Ollama();\r\n\r\nasync function main() {\r\n  const collection = await client.getOrCreateCollection({\r\n    name: 'docs',\r\n  });\r\n\r\n  const response = await ollama.embed({ model: 'mxbai-embed-large', input: document });\r\n\r\n  await collection.upsert({\r\n    ids: ['Chronobiology'],\r\n    embeddings: [response.embedding],\r\n    metadatas: [{ 'module': 'value' }],\r\n    documents: [document]\r\n  });\r\n\r\n  const results = await collection.query({\r\n    queryTexts: ['Is the statement `Chronobiology is the study of how living things have evolved over time.` correct or not?'], // Chroma will embed this for you\r\n    nResults: 2, // how many results to return\r\n  });\r\n\r\n  console.log(results);\r\n}\r\n\r\nmain().catch(console.error);\r\n```\n\n### Versions\n\nPython 3.12.6, Mac 13.0.1 M1, Chroma 0.5.5\n\n### Relevant log output\n\n```shell\nDEBUG:    [07-09-2024 16:52:53] Starting component PersistentLocalHnswSegment\r\nERROR:    [07-09-2024 16:52:53] must be real number, not NoneType\r\nTraceback (most recent call last):\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/streams/memory.py\", line 105, in receive\r\n    return self.receive_nowait()\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/streams/memory.py\", line 100, in receive_nowait\r\n    raise WouldBlock\r\nanyio.WouldBlock\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/streams/memory.py\", line 118, in receive\r\n    return receiver.item\r\nAttributeError: 'MemoryObjectItemReceiver' object has no attribute 'item'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 157, in call_next\r\n    message = await recv_stream.receive()\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/streams/memory.py\", line 120, in receive\r\n    raise EndOfStream\r\nanyio.EndOfStream\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/server/fastapi/__init__.py\", line 76, in catch_exceptions_middleware\r\n    return await call_next(request)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 163, in call_next\r\n    raise app_exc\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 149, in coro\r\n    await self.app(scope, receive_or_disconnect, send_no_error)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 189, in __call__\r\n    response_sent.set()\r\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/contextlib.py\", line 135, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/_utils.py\", line 83, in collapse_excgroups\r\n    raise exc\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 187, in __call__\r\n    response = await self.dispatch_func(request, call_next)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/server/fastapi/__init__.py\", line 90, in check_http_version_middleware\r\n    return await call_next(request)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 163, in call_next\r\n    raise app_exc\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/base.py\", line 149, in coro\r\n    await self.app(scope, receive_or_disconnect, send_no_error)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\r\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/_exception_handler.py\", line 62, in wrapped_app\r\n    raise exc\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/_exception_handler.py\", line 51, in wrapped_app\r\n    await app(scope, receive, sender)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/routing.py\", line 715, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/routing.py\", line 735, in app\r\n    await route.handle(scope, receive, send)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/routing.py\", line 288, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/routing.py\", line 76, in app\r\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/_exception_handler.py\", line 62, in wrapped_app\r\n    raise exc\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/_exception_handler.py\", line 51, in wrapped_app\r\n    await app(scope, receive, sender)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/starlette/routing.py\", line 73, in app\r\n    response = await f(request)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/fastapi/routing.py\", line 301, in app\r\n    raw_response = await run_endpoint_function(\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/fastapi/routing.py\", line 212, in run_endpoint_function\r\n    return await dependant.call(**values)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 133, in async_wrapper\r\n    return await f(*args, **kwargs)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/server/fastapi/__init__.py\", line 799, in upsert\r\n    await to_thread.run_sync(\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/to_thread.py\", line 56, in run_sync\r\n    return await get_async_backend().run_sync_in_worker_thread(\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/_backends/_asyncio.py\", line 2177, in run_sync_in_worker_thread\r\n    return await future\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/anyio/_backends/_asyncio.py\", line 859, in run\r\n    result = context.run(func, *args)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/server/fastapi/__init__.py\", line 790, in process_upsert\r\n    return self._api._upsert(\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 146, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/api/segment.py\", line 444, in _upsert\r\n    self._producer.submit_embeddings(collection_id, records_to_submit)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 146, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/db/mixins/embeddings_queue.py\", line 165, in submit_embeddings\r\n    ) = self._prepare_vector_encoding_metadata(embedding)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/telemetry/opentelemetry/__init__.py\", line 146, in wrapper\r\n    return f(*args, **kwargs)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/db/mixins/embeddings_queue.py\", line 287, in _prepare_vector_encoding_metadata\r\n    embedding_bytes = encode_vector(embedding[\"embedding\"], encoding_type)\r\n  File \"/Users/kenchen/Library/Python/3.9/lib/python/site-packages/chromadb/ingest/__init__.py\", line 19, in encode_vector\r\n    return array.array(\"f\", vector).tobytes()\r\nTypeError: must be real number, not NoneType\r\nINFO:     [07-09-2024 16:52:53] ::1:56060 - \"POST /api/v1/collections/34425b7c-63ad-43a4-be0f-98eef7368cc9/upsert HTTP/1.1\" 500\n```\n",
    "state": "closed",
    "created_at": "2024-09-07T15:05:45+00:00",
    "closed_at": "2024-09-09T03:17:34+00:00",
    "updated_at": "2024-09-09T03:17:34+00:00",
    "author": "kenspirit",
    "author_type": "User",
    "comments_count": 0,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "kenspirit",
    "resolution_time_hours": 36.19694444444445,
    "first_comments": [],
    "url": "https://github.com/chroma-core/chroma/issues/2766"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2764,
    "title": "[Bug]: Exception occurred invoking consumer for subscription 8aab112f4c494edea3d06cd20e2de68bto topic persistent://default/default/f39a7fe1-ee8d-4ff6-8fb2-d2427710b66d row value misused",
    "body": "### What happened?\n\n`collection_name = \"GIST-uncleaned-ingredients\"\r\n\r\nclient = chromadb.PersistentClient(path= os.getcwd()+'/chromadb1') # to persist in memory and between bad sessions\r\n#client.delete_collection(collection_name)\r\ncollection = client.get_or_create_collection(collection_name,\r\n                                            metadata={\"hnsw:space\": \"cosine\"})\r\nall_ings = sorted(d.items(),key= lambda x: x[1],reverse=True)\r\n\r\ningredient_embeddings = {}\r\ning_freq = {}\r\nfor i, ing_tup in enumerate(all_ings):\r\n    ing , freq = ing_tup\r\n    text = f\"{ing}:{freq}\"\r\n    if isinstance(ing,str):\r\n        id_ = generate_unique_id(ing)\r\n        ing_embedding = sm_embed.embed_query(ing)\r\n        ing_freq[id_] = ing_tup \r\n        ingredient_embeddings[ing] = ing_embedding\r\n        collection.upsert(embeddings= [list(ing_embedding)], \\\r\n                                        documents=[ing_tup], \\\r\n                                        ids=[id_], \\\r\n                                        )`\r\n  While running this code there is a exception printed for each insert  like below\r\nException occurred invoking consumer for subscription 8aab112f4c494edea3d06cd20e2de68bto topic persistent://default/default/f39a7fe1-ee8d-4ff6-8fb2-d2427710b66d row value misused\r\n\r\nOnce the code completes, the final collection that gets created doesn't have text inside when I query.\r\n\r\nCan you help me fix?\n\n### Versions\n\nChromadb 0.5.5\r\nPython 3.9.7\r\nMac OS 13.5.2\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-09-05T01:48:44+00:00",
    "closed_at": "2024-09-05T01:57:09+00:00",
    "updated_at": "2024-09-05T01:59:23+00:00",
    "author": "vamsi21",
    "author_type": "User",
    "comments_count": 1,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "vamsi21",
    "resolution_time_hours": 0.14027777777777778,
    "first_comments": [
      {
        "author": "vamsi21",
        "created_at": "2024-09-05T01:59:22+00:00",
        "body": "documents=[ing_tup] to documents = [text] solved the issue. "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2764"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2761,
    "title": "Downloading a specific sentence-transformer model during docker initiation process in client-server mode",
    "body": "### What happened?\n\nI am able to use chroma in a docker but find that the sentence-transformer/all-MiniLM-L6-v2 is downloaded on demand the first time the client connects to the server. I would like to have the model downloaded during docker initiation process. In fact also be able to specify the model name\n\n### Versions\n\nThe docker hub image says: docker pull chromadb/chroma:0.5.6.dev75\r\nThe python is: 3.12\r\nThe OS is: Mac OS 14.6.1\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-09-04T12:38:21+00:00",
    "closed_at": "2024-09-06T02:37:59+00:00",
    "updated_at": "2024-09-06T02:37:59+00:00",
    "author": "rmrbytes",
    "author_type": "User",
    "comments_count": 10,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "rmrbytes",
    "resolution_time_hours": 37.99388888888889,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-09-04T12:53:51+00:00",
        "body": "@rmr-code, do you run Chroma in docker compose or just `docker run`?"
      },
      {
        "author": "rmrbytes",
        "created_at": "2024-09-05T04:26:00+00:00",
        "body": "docker compose"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-05T09:17:57+00:00",
        "body": "@rmr-code, one last question:\r\n\r\nDoes the image below about summarizes your setup:\r\n\r\n![image](https://github.com/user-attachments/assets/764547e8-8ef7-4264-9acc-48ead70a2169)\r\n\r\n\r\nOr is it more like that:\r\n\r\n![image](https://github.com/user-attachments/assets/67369e8f-e9f5-4f78-971c-6de13c3ef397)\r\n\r\n"
      },
      {
        "author": "rmrbytes",
        "created_at": "2024-09-05T09:21:08+00:00",
        "body": "The first image defines my use-case. I was wondering whether we could use the hugging face client library to download the model and share that volume to the chromadb server service in a manner such that the it uses the already downloaded model"
      },
      {
        "author": "rmrbytes",
        "created_at": "2024-09-05T09:25:09+00:00",
        "body": "Would something like this work (I have not tried it out):\r\n\r\n```\r\nFROM chromadb/chromadb:latest\r\n\r\n# Install huggingface_hub if not already present\r\nRUN pip install huggingface_hub\r\n\r\n# Pre-download the embedding model using Hugging Face's API\r\nRUN python -c \"from huggingface_hub import hf_hub_download; \\\r\n               hf_hub_download(repo_id='sentence-transformers/all-MiniLM-L6-v2', \\\r\n               filename='pytorch_model.bin', \\\r\n               cache_dir='/data/models', \\\r\n               use_auth_token='your_huggingface_token')\"\r\n\r\n# Expose port\r\nEXPOSE 8000\r\n\r\n# Start ChromaDB service\r\nCMD [\"chromadb\"]\r\n```\r\n\r\nI am not sure which directory to use as a cache directory so that when the chromadb client calls it even the first time, the system should recognize that the model is already downloaded.\r\n"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2761"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2760,
    "title": "[Bug]: Discord Link Invalid",
    "body": "### What happened?\n\nThe Discord link is broken everywhere.\n\n### Versions\n\nAll.\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-09-04T11:04:44+00:00",
    "closed_at": "2024-09-16T01:52:06+00:00",
    "updated_at": "2024-09-18T13:39:40+00:00",
    "author": "ChiefMateStarbuck",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 278.7894444444444,
    "first_comments": [
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:52:06+00:00",
        "body": "<img width=\"1265\" alt=\"CleanShot 2024-09-15 at 21 51 35@2x\" src=\"https://github.com/user-attachments/assets/356f2e7d-bbce-499f-9874-b94c7a369968\">\r\n\r\nI think discord is just a little flakey. looks ok to me but let me know if you know how i can reproduce! "
      },
      {
        "author": "ChiefMateStarbuck",
        "created_at": "2024-09-18T13:39:39+00:00",
        "body": "Thank you 👍"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2760"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2758,
    "title": "[Bug]: ChromaDB is not possible to run inside alpine docker image",
    "body": "### What happened?\n\nIIt's not possible to run ChromaDB inside alpine docker image.\n\n### Versions\n\nIt doesn't work with the latest version of Chroma and any python\n\n### Relevant log output\n\n```shell\nThe reason that onxxruntime doesn't support alpine.\r\nhttps://github.com/microsoft/onnxruntime/issues/2909\r\n\r\nMaybe we can make onnxruntime as an optional dependency? Now onnxruntime is used as default embedding. But the user of Chromadb can use different embedding that works with alpine.\n```\n",
    "state": "closed",
    "created_at": "2024-09-02T12:47:26+00:00",
    "closed_at": "2025-01-03T04:07:12+00:00",
    "updated_at": "2025-01-03T04:07:12+00:00",
    "author": "mangin",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 2943.3294444444446,
    "first_comments": [
      {
        "author": "mangin",
        "created_at": "2024-09-02T12:48:04+00:00",
        "body": "Fix here:\r\nhttps://github.com/chroma-core/chroma/pull/2722"
      },
      {
        "author": "itaismith",
        "created_at": "2025-01-03T04:07:12+00:00",
        "body": "Hey @mangin, you can see our Docker guide here: https://docs.trychroma.com/production/containers/docker.\r\n\r\nIf you have more specific requirements, feel free to open a new issue with more information."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2758"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2754,
    "title": "[Bug]: I'm experiencing an issue with the chroma.Client().create_collection function. ",
    "body": "### What happened?\n\nDespite trying all the methods mentioned in the website documentation and the GitHub repository documentation, I'm still encountering an error. Can someone please help me resolve this issue\n\n### Versions\n\n0.5.5\n\n### Relevant log output\n\n```shell\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\nCell In[9], line 6\r\n      3 client = chromadb.Client()\r\n      5 # Create collection. get_collection, get_or_create_collection, delete_collection also available!\r\n----> 6 collection = client.create_collection(name=\"all-my-documents\")\r\n      8 # Add docs to the collection. Can also update and delete. Row-based API coming soon!\r\n      9 collection.add(\r\n     10     documents=[\"This is document1\", \"This is document2\"], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well\r\n     11     metadatas=[{\"source\": \"notion\"}, {\"source\": \"google-docs\"}], # filter on these!\r\n     12     ids=[\"doc1\", \"doc2\"], # unique for each doc\r\n     13 )\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/api/client.py:117, in Client.create_collection(self, name, configuration, metadata, embedding_function, data_loader, get_or_create)\r\n    105 @override\r\n    106 def create_collection(\r\n    107     self,\r\n   (...)\r\n    115     get_or_create: bool = False,\r\n    116 ) -> Collection:\r\n--> 117     model = self._server.create_collection(\r\n    118         name=name,\r\n    119         metadata=metadata,\r\n    120         tenant=self.tenant,\r\n    121         database=self.database,\r\n    122         get_or_create=get_or_create,\r\n    123         configuration=configuration,\r\n    124     )\r\n    125     return Collection(\r\n    126         client=self._server,\r\n    127         model=model,\r\n    128         embedding_function=embedding_function,\r\n    129         data_loader=data_loader,\r\n    130     )\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py:146, in trace_method.<locals>.decorator.<locals>.wrapper(*args, **kwargs)\r\n    144 global tracer, granularity\r\n    145 if trace_granularity < granularity:\r\n--> 146     return f(*args, **kwargs)\r\n    147 if not tracer:\r\n    148     return f(*args, **kwargs)\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/api/segment.py:176, in SegmentAPI.create_collection(self, name, configuration, metadata, get_or_create, tenant, database)\r\n    164 model = CollectionModel(\r\n    165     id=id,\r\n    166     name=name,\r\n   (...)\r\n    173     dimension=None,\r\n    174 )\r\n    175 # TODO: Let sysdb create the collection directly from the model\r\n--> 176 coll, created = self._sysdb.create_collection(\r\n    177     id=model.id,\r\n    178     name=model.name,\r\n    179     configuration=model.get_configuration(),\r\n    180     metadata=model.metadata,\r\n    181     dimension=None,  # This is lazily populated on the first add\r\n    182     get_or_create=get_or_create,\r\n    183     tenant=tenant,\r\n    184     database=database,\r\n    185 )\r\n    187 # TODO: wrap sysdb call in try except and log error if it fails\r\n    188 if created:\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/telemetry/opentelemetry/__init__.py:146, in trace_method.<locals>.decorator.<locals>.wrapper(*args, **kwargs)\r\n    144 global tracer, granularity\r\n    145 if trace_granularity < granularity:\r\n--> 146     return f(*args, **kwargs)\r\n    147 if not tracer:\r\n    148     return f(*args, **kwargs)\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/db/mixins/sysdb.py:257, in SqlSysDB.create_collection(self, id, name, configuration, metadata, dimension, get_or_create, tenant, database)\r\n    243 collections = Table(\"collections\")\r\n    244 databases = Table(\"databases\")\r\n    246 insert_collection = (\r\n    247     self.querybuilder()\r\n    248     .into(collections)\r\n    249     .columns(\r\n    250         collections.id,\r\n    251         collections.name,\r\n    252         collections.config_json_str,\r\n    253         collections.dimension,\r\n    254         collections.database_id,\r\n    255     )\r\n    256     .insert(\r\n--> 257         ParameterValue(self.uuid_to_db(collection[\"id\"])),\r\n    258         ParameterValue(collection[\"name\"]),\r\n    259         ParameterValue(configuration.to_json_str()),\r\n    260         ParameterValue(collection[\"dimension\"]),\r\n    261         # Get the database id for the database with the given name and tenant\r\n    262         self.querybuilder()\r\n    263         .select(databases.id)\r\n    264         .from_(databases)\r\n    265         .where(databases.name == ParameterValue(database))\r\n    266         .where(databases.tenant_id == ParameterValue(tenant)),\r\n    267     )\r\n    268 )\r\n    269 sql, params = get_sql(insert_collection, self.parameter_format())\r\n    270 try:\r\n\r\nFile ~/miniconda3/envs/kagg/lib/python3.10/site-packages/chromadb/types.py:99, in Collection.__getitem__(self, key)\r\n     97     return self.get_configuration()\r\n     98 # For the other model attributes we allow the user to access them directly\r\n---> 99 if key in self.model_fields:\r\n    100     return getattr(self, key)\r\n    101 return None\r\n\r\nAttributeError: 'Collection' object has no attribute 'model_fields'\n```\n",
    "state": "closed",
    "created_at": "2024-09-01T06:48:12+00:00",
    "closed_at": "2024-09-16T01:53:16+00:00",
    "updated_at": "2024-09-16T01:53:16+00:00",
    "author": "mahedishato",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 355.08444444444444,
    "first_comments": [
      {
        "author": "mrmammadov",
        "created_at": "2024-09-02T22:54:54+00:00",
        "body": "This issue from LangChain might help: https://github.com/langchain-ai/langchain/issues/24163"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-04T12:58:05+00:00",
        "body": "@mahedishato, this is related to pydantic version. We have added backward compatibility in the latest `main`, but no official release for this yet. Can can install directly from GH:\r\n\r\n```bash\r\npip install git+https://github.com/chroma-core/chroma.git@main\r\n```\r\n\r\nOr from Test PyPi:\r\n\r\n```bash\r\npip install -i https://test.pypi.org/simple/ chromadb==0.5.6.dev75\r\n```\r\n"
      },
      {
        "author": "hacker-4-good",
        "created_at": "2024-09-11T18:21:56+00:00",
        "body": "@mahedishato what you can try is replacing\r\n `client = chromadb.Client()` to `client = chromadb.PersistentClient(path='Local_Path')`\r\n\r\n**Note 👀:- In `Local_Path` mention your directory path where chromadb will create sqlite database**\r\n\r\n![FriendsChandlerGIF](https://github.com/user-attachments/assets/8cae802e-ed35-4d80-ac12-3a92d0f8834c)\r\nI think this will work, as I also faced the same issue with chromadb client\r\n\r\n"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:53:16+00:00",
        "body": "the pydantic version is the right answer here !"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2754"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2751,
    "title": "[Install issue]: `chroma run` failed with binding issue",
    "body": "### What happened?\n\nAfter I executed `chroma run`, the console output the following logs:\r\n```\r\nWARNING:  [30-08-2024 09:43:18] chroma_server_nofile is set to 65535, but this is less than current soft limit of 1048576. chroma_server_nofile will not be set.\r\nINFO:     [30-08-2024 09:43:18] Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.\r\nDEBUG:    [30-08-2024 09:43:18] Starting component System\r\nDEBUG:    [30-08-2024 09:43:18] Starting component OpenTelemetryClient\r\nDEBUG:    [30-08-2024 09:43:18] Starting component SqliteDB\r\nDEBUG:    [30-08-2024 09:43:19] Starting component QuotaEnforcer\r\nDEBUG:    [30-08-2024 09:43:19] Starting component Posthog\r\nDEBUG:    [30-08-2024 09:43:19] Starting component LocalSegmentManager\r\nDEBUG:    [30-08-2024 09:43:19] Starting component SegmentAPI\r\nINFO:     [30-08-2024 09:43:19] Started server process [1005]\r\nINFO:     [30-08-2024 09:43:19] Waiting for application startup.\r\nINFO:     [30-08-2024 09:43:19] Application startup complete.\r\nERROR:    [30-08-2024 09:43:19] [Errno 99] error while attempting to bind on address ('::1', 8000, 0, 0): cannot assign requested address\r\nINFO:     [30-08-2024 09:43:19] Waiting for application shutdown.\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component System\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component SegmentAPI\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component LocalSegmentManager\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component Posthog\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component QuotaEnforcer\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component SqliteDB\r\nDEBUG:    [30-08-2024 09:43:19] Stopping component OpenTelemetryClient\r\nINFO:     [30-08-2024 09:43:19] Application shutdown complete.\r\n```\r\n\r\nI was executing the command within a docker container.\n\n### Versions\n\nChroma: 0.5.5\r\nPython: 3.12.5\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-08-30T10:52:57+00:00",
    "closed_at": "2024-09-09T07:45:16+00:00",
    "updated_at": "2024-09-09T07:45:16+00:00",
    "author": "SupJoeeeeeey",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "installation trouble",
    "milestone": null,
    "closed_by": "SupJoeeeeeey",
    "resolution_time_hours": 236.87194444444444,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-30T12:16:48+00:00",
        "body": "hey @SupJoeeeeeey, thanks for reporting this. It seems that your system has trouble binding to localhost on IPv6. May I suggest you try running with `chroma run --host 127.0.0.1 --path ./chroma-data`"
      },
      {
        "author": "SupJoeeeeeey",
        "created_at": "2024-09-09T07:44:55+00:00",
        "body": "> hey @SupJoeeeeeey, thanks for reporting this. It seems that your system has trouble binding to localhost on IPv6. May I suggest you try running with `chroma run --host 127.0.0.1 --path ./chroma-data`\r\n\r\nThanks a lot! It does work!"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2751"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2749,
    "title": "[Bug]: When I tried to import a large txt or a large number of txts into chroma, the program stopped without error. Why?",
    "body": "### What happened?\n\nWhen I tried to import a large txt or a large number of txts into chroma, the program stopped without error. Why?\r\n\r\nThis is the structure of file.\r\n![image](https://github.com/user-attachments/assets/97f871d1-ffff-4c29-9298-fdf68e5c7a84)\r\n\r\nThis is the main.py:\r\n```python\r\nimport chromadb\r\nimport os\r\nimport shutil\r\n\r\nwith open('test2.txt', 'r') as file:\r\n    content = file.read()\r\n\r\ncontents = []\r\nids = []\r\n\r\nfor i in range(200):\r\n    contents.append(content)\r\n    ids.append(\"id{}\".format(i))\r\nprint(len(contents))\r\n\r\nshutil.rmtree(\"chromadb\", ignore_errors=True)\r\nclient = chromadb.PersistentClient(path=\"chromadb\")\r\n\r\ncollection = client.create_collection(name=\"my_collection\")\r\n# collection = client.get_collection(name=\"my_collection\")\r\n\r\ncollection.add(\r\n    documents= contents,\r\n    ids=ids\r\n)\r\n\r\nprint(collection.get(ids=[\"id9\"]))\r\n# print(collection.get(ids=[\"id199\"]))\r\n```\r\n\r\nThe size of \"test2.txt\" is 13.5KB, which only contains letters like 'a' and 'b'.\r\n\n\n### Versions\n\nChroma v0.5.4, Python 3.10.14, Windows 11\n\n### Relevant log output\n\n```shell\nThere were no errors.\n```\n",
    "state": "closed",
    "created_at": "2024-08-30T07:46:38+00:00",
    "closed_at": "2024-09-05T14:58:00+00:00",
    "updated_at": "2024-09-05T14:58:00+00:00",
    "author": "bill2766",
    "author_type": "User",
    "comments_count": 9,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "bill2766",
    "resolution_time_hours": 151.18944444444443,
    "first_comments": [
      {
        "author": "bill2766",
        "created_at": "2024-08-30T07:50:56+00:00",
        "body": "In this case, the file `chroma.sqlite3-journal` would be retained."
      },
      {
        "author": "tazarov",
        "created_at": "2024-08-30T12:22:40+00:00",
        "body": "@bill2766, thanks for reporting this. Let me see if I get this right. \r\n\r\n- What you are saying is that your program never gets to `print(collection.get(ids=[\"id9\"]))`? \r\n- Reading the code, I can tell you inserted 200 identical documents (the contents of `test2.txt` file)?\r\n"
      },
      {
        "author": "bill2766",
        "created_at": "2024-08-31T12:51:22+00:00",
        "body": "1. haha, that's to test whether the code can run to that location. So when I import a large txt or a large number of txts into chroma, the code would stop without running the following code(`print(collection.get(ids=[\"id9\"]))`).\r\n2. Yes. The code is used to reproduce the problem.\r\n\r\nexample content of `test2.txt`\r\n```\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n(repeat many times)\r\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-05T13:21:18+00:00",
        "body": "@bill2766, I think the way you read the file may break the onnx model. I did try your verbatim code with the file being generated like so:\r\n\r\n```py\r\nimport random\r\n\r\nlines = [\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"]\r\nwith open('test2.txt', 'w') as file:\r\n    for i in range(200):\r\n        file.write(random.choice(lines))\r\n        file.write(\"\\n\")\r\n```\r\n\r\nThe observation after some testing is that the onnx model hangs pretty badly (will dig into that later on). I think it is related to me being on MacOS and using the default CoreML Provider.\r\n\r\nOnce I've fixed the Provider issue and the code to read the lines correctly. Things seem to work just fine. Here's the final code:\r\n\r\n```py\r\nimport chromadb\r\nimport os\r\nimport shutil\r\n\r\nfrom chromadb.utils.embedding_functions.onnx_mini_lm_l6_v2 import ONNXMiniLM_L6_V2\r\n\r\nef  = ONNXMiniLM_L6_V2(preferred_providers=[\"CPUExecutionProvider\"])\r\n\r\nwith open('test2.txt', 'r') as file:\r\n    content = file.readline()\r\n\r\ncontents = []\r\nids = []\r\n\r\nfor i in range(200):\r\n    contents.append(content.strip())\r\n    ids.append(\"id{}\".format(i))\r\nprint(len(contents))\r\n\r\nshutil.rmtree(\"chromadb-2749\", ignore_errors=True)\r\nclient = chromadb.PersistentClient(path=\"chromadb-2749\")\r\n\r\ncollection = client.create_collection(name=\"my_collection\")\r\n# collection = client.get_collection(name=\"my_collection\")\r\n\r\ncollection.add(\r\n    documents= contents,\r\n    ids=ids\r\n)\r\n\r\nprint(collection.get(ids=[\"id9\"]))\r\n# print(collection.get(ids=[\"id199\"]))\r\n```\r\n\r\nResulting in the following output:\r\n\r\n```bash\r\n200\r\n{'ids': ['id9'], 'embeddings': None, 'metadatas': [None], 'documents': ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'], 'uris': None, 'data': None, 'included': ['metadatas', 'documents']}\r\n```"
      },
      {
        "author": "bill2766",
        "created_at": "2024-09-05T14:04:37+00:00",
        "body": "I test the code in my environment, but it doesn't work.\r\n```python\r\nimport chromadb\r\nimport os\r\nimport shutil\r\n\r\nfrom chromadb.utils.embedding_functions.onnx_mini_lm_l6_v2 import ONNXMiniLM_L6_V2\r\n\r\nef  = ONNXMiniLM_L6_V2(preferred_providers=[\"CPUExecutionProvider\"])\r\n\r\nwith open('test2.txt', 'r') as file:\r\n    content = file.readline()\r\n\r\ncontents = []\r\nids = []\r\n\r\nfor i in range(200):\r\n    contents.append(content.strip())\r\n    ids.append(\"id{}\".format(i))\r\n\r\nshutil.rmtree(\"chromadb-2749\", ignore_errors=True)\r\nclient = chromadb.PersistentClient(path=\"chromadb-2749\")\r\n\r\ncollection = client.create_collection(name=\"my_collection\")\r\n# collection = client.get_collection(name=\"my_collection\")\r\n\r\ncollection.add(\r\n    documents= contents,\r\n    ids=ids\r\n)\r\nprint(len(contents))\r\n\r\nprint(collection.get(ids=[\"id9\"]))\r\n# print(collection.get(ids=[\"id199\"]))\r\n```\r\n\r\nresult:\r\nno print and sqlite3-journal exists."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2749"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2748,
    "title": "[Bug]: What's between DefaultEmbeddingFunction() and SentenceTransformerEmbeddingFunction(model_name=\"all-MiniLM-L6-v2\")?",
    "body": "### What happened?\n\nI save some embeddings by default like this:\r\ncollection = client.get_or_create_collection(name=db_name)\r\n\r\nThen, i can fetch data by DefaultEmbeddingFunction() like:\r\nemb_fn = embedding_functions.DefaultEmbeddingFunction()\r\ncollection = client.get_or_create_collection(name=db_name, embedding_function=emb_fn) # It's work\r\n\r\nBut i can't fetch data by all-MiniLM-L6-v2 like:\r\nemb_fn = embedding_functions.SentenceTransformerEmbeddingFunction(model_name=\"all-MiniLM-L6-v2\")\r\ncollection = client.get_or_create_collection(name=db_name, embedding_function=emb_fn) # It's not work\r\n\r\nWhat's the different between DefaultEmbeddingFunction and SentenceTransformerEmbeddingFunction(model_name=\"all-MiniLM-L6-v2\")?\n\n### Versions\n\nChromaDB V0.5.3, python v3.10.11, MacOS 15.0 Beta (24A5327a)\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-08-30T06:39:39+00:00",
    "closed_at": "2024-09-16T01:53:52+00:00",
    "updated_at": "2024-09-16T01:53:53+00:00",
    "author": "h3clikejava",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 403.2369444444444,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-30T12:28:21+00:00",
        "body": "@h3clikejava, thanks for raising this. Let's start with some background:\r\n\r\n- Default EF uses onnx runtime + mean pooling, resulting in 384-dimensional embeddings\r\n- ST does everything out of the box and again produces 384-dimensional embeddings\r\n\r\nUnder normal circumstances, you should not have trouble swapping between the two, as Chroma will accept queries using 384-dimensional embeddings even though there are slight differences in the output embeddings (in the order of 1-e4/1-e5 range).\r\n\r\nThat said, when you say it won't work, do you mean you get an error? Can you share the error?"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:53:52+00:00",
        "body": "@h3clikejava happy to re-open if you can help out! closing for now as @tazarov did a good job addressing it "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2748"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2747,
    "title": "[Feature Request]: custome embeddiings ",
    "body": "### Describe the problem\n\nI get the embeddings just from a URL from cloud ,\r\nsuch as \r\n\r\n```\r\nimport requests\r\nimport json\r\n\r\nurl = \"http://12.25.1.11:8021/query2emb\"\r\n\r\npayload = json.dumps({\r\n   \"inputs\": \"我擦\"\r\n})\r\nheaders = {\r\n   'Content-Type': 'application/json'\r\n}\r\n\r\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\r\n\r\nprint(response.text)\r\n```\r\nthen how i set the Embedding function ?\r\n\r\n\n\n### Describe the proposed solution\n\nwant to support the URL requests\r\n\n\n### Alternatives considered\n\n_No response_\n\n### Importance\n\nnice to have\n\n### Additional Information\n\n_No response_",
    "state": "closed",
    "created_at": "2024-08-30T02:13:54+00:00",
    "closed_at": "2024-09-16T01:55:22+00:00",
    "updated_at": "2024-09-16T01:55:43+00:00",
    "author": "ucas010",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "enhancement",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 407.6911111111111,
    "first_comments": [
      {
        "author": "ucas010",
        "created_at": "2024-08-30T02:16:04+00:00",
        "body": "i got the bug refer to the https://docs.trychroma.com/guides/embeddings\r\n\r\n```\r\nfrom chromadb import Documents, EmbeddingFunction, Embeddings\r\n\r\nclass MyEmbeddingFunction(EmbeddingFunction):\r\n    def __call__(self, input: Documents) -> Embeddings:\r\n        # embed the documents somehow\r\n        return embeddings\r\n```\r\n\r\ncould u pls help me ?"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:55:22+00:00",
        "body": "@ucas010 the simple way to do this is to generate the embeddings yourself outside of chroma and pass them to `add` and `query`\r\n\r\n```python\r\ncollection = client.get_or_create_collection(name='example')\r\ncollection.add(embeddings=[...], ...)\r\ncollection.query(query_embeddings=[..], ...)\r\n```"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2747"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2739,
    "title": "[Feature Request]: ChromaDB supports for python 3.13 ",
    "body": "### Describe the problem\n\nCannot install chromadb for python 3.13 because chromadb doesnt work with numpy > 2.0.0 and i can only install numpy 2.1.0. \r\n\r\n```\r\npython3.13-nogil -m pip install -r requirements.txt\r\nDefaulting to user installation because normal site-packages is not writeable\r\nIgnoring graphlib_backport: markers 'python_version < \"3.9\"' don't match your environment\r\nCollecting bcrypt>=4.0.1 (from -r requirements.txt (line 1))\r\n  Using cached bcrypt-4.2.0.tar.gz (24 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting chroma-hnswlib==0.7.6 (from -r requirements.txt (line 2))\r\n  Using cached chroma_hnswlib-0.7.6.tar.gz (32 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting fastapi>=0.95.2 (from -r requirements.txt (line 3))\r\n  Using cached fastapi-0.112.2-py3-none-any.whl.metadata (27 kB)\r\nCollecting grpcio>=1.58.0 (from -r requirements.txt (line 5))\r\n  Using cached grpcio-1.66.1.tar.gz (12.3 MB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting httpx>=0.27.0 (from -r requirements.txt (line 6))\r\n  Using cached httpx-0.27.2-py3-none-any.whl.metadata (7.1 kB)\r\nCollecting importlib-resources (from -r requirements.txt (line 7))\r\n  Using cached importlib_resources-6.4.4-py3-none-any.whl.metadata (4.0 kB)\r\nCollecting kubernetes>=28.1.0 (from -r requirements.txt (line 8))\r\n  Using cached kubernetes-30.1.0-py2.py3-none-any.whl.metadata (1.5 kB)\r\nCollecting mmh3>=4.0.1 (from -r requirements.txt (line 9))\r\n  Using cached mmh3-4.1.0.tar.gz (26 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting opentelemetry-api>=1.2.0 (from -r requirements.txt (line 10))\r\n  Using cached opentelemetry_api-1.27.0-py3-none-any.whl.metadata (1.4 kB)\r\nCollecting opentelemetry-exporter-otlp-proto-grpc>=1.24.0 (from -r requirements.txt (line 11))\r\n  Using cached opentelemetry_exporter_otlp_proto_grpc-1.27.0-py3-none-any.whl.metadata (2.3 kB)\r\nCollecting opentelemetry-instrumentation-fastapi>=0.41b0 (from -r requirements.txt (line 12))\r\n  Using cached opentelemetry_instrumentation_fastapi-0.48b0-py3-none-any.whl.metadata (2.1 kB)\r\nCollecting opentelemetry-sdk>=1.2.0 (from -r requirements.txt (line 13))\r\n  Using cached opentelemetry_sdk-1.27.0-py3-none-any.whl.metadata (1.5 kB)\r\nCollecting overrides>=7.3.1 (from -r requirements.txt (line 15))\r\n  Using cached overrides-7.7.0-py3-none-any.whl.metadata (5.8 kB)\r\nCollecting posthog>=2.4.0 (from -r requirements.txt (line 16))\r\n  Using cached posthog-3.6.0-py2.py3-none-any.whl.metadata (2.0 kB)\r\nCollecting pydantic>=1.9 (from -r requirements.txt (line 17))\r\n  Using cached pydantic-2.8.2-py3-none-any.whl.metadata (125 kB)\r\nCollecting pypika>=0.48.9 (from -r requirements.txt (line 18))\r\n  Using cached PyPika-0.48.9.tar.gz (67 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting PyYAML>=6.0.0 (from -r requirements.txt (line 19))\r\n  Using cached pyyaml-6.0.2.tar.gz (130 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... done\r\nCollecting rich>=10.11.0 (from -r requirements.txt (line 20))\r\n  Using cached rich-13.8.0-py3-none-any.whl.metadata (18 kB)\r\nCollecting tenacity>=8.2.3 (from -r requirements.txt (line 21))\r\n  Using cached tenacity-9.0.0-py3-none-any.whl.metadata (1.2 kB)\r\nCollecting tqdm>=4.65.0 (from -r requirements.txt (line 23))\r\n  Using cached tqdm-4.66.5-py3-none-any.whl.metadata (57 kB)\r\nCollecting typer>=0.9.0 (from -r requirements.txt (line 24))\r\n  Downloading typer-0.12.5-py3-none-any.whl.metadata (15 kB)\r\nCollecting typing_extensions>=4.5.0 (from -r requirements.txt (line 25))\r\n  Using cached typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)\r\nCollecting uvicorn>=0.18.3 (from uvicorn[standard]>=0.18.3->-r requirements.txt (line 26))\r\n  Using cached uvicorn-0.30.6-py3-none-any.whl.metadata (6.6 kB)\r\nRequirement already satisfied: numpy in /home/aiserver/.local/lib/python3.13t/site-packages (from chroma-hnswlib==0.7.6->-r requirements.txt (line 2)) (2.1.0)\r\nCollecting starlette<0.39.0,>=0.37.2 (from fastapi>=0.95.2->-r requirements.txt (line 3))\r\n  Using cached starlette-0.38.2-py3-none-any.whl.metadata (5.9 kB)\r\nCollecting anyio (from httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading anyio-4.4.0-py3-none-any.whl.metadata (4.6 kB)\r\nCollecting certifi (from httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading certifi-2024.7.4-py3-none-any.whl.metadata (2.2 kB)\r\nCollecting httpcore==1.* (from httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading httpcore-1.0.5-py3-none-any.whl.metadata (20 kB)\r\nCollecting idna (from httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading idna-3.8-py3-none-any.whl.metadata (9.9 kB)\r\nCollecting sniffio (from httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading sniffio-1.3.1-py3-none-any.whl.metadata (3.9 kB)\r\nCollecting h11<0.15,>=0.13 (from httpcore==1.*->httpx>=0.27.0->-r requirements.txt (line 6))\r\n  Downloading h11-0.14.0-py3-none-any.whl.metadata (8.2 kB)\r\nCollecting six>=1.9.0 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading six-1.16.0-py2.py3-none-any.whl.metadata (1.8 kB)\r\nCollecting python-dateutil>=2.5.3 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\r\nCollecting google-auth>=1.0.1 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading google_auth-2.34.0-py2.py3-none-any.whl.metadata (4.7 kB)\r\nCollecting websocket-client!=0.40.0,!=0.41.*,!=0.42.*,>=0.32.0 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading websocket_client-1.8.0-py3-none-any.whl.metadata (8.0 kB)\r\nCollecting requests (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Using cached requests-2.32.3-py3-none-any.whl.metadata (4.6 kB)\r\nCollecting requests-oauthlib (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading requests_oauthlib-2.0.0-py2.py3-none-any.whl.metadata (11 kB)\r\nCollecting oauthlib>=3.2.2 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading oauthlib-3.2.2-py3-none-any.whl.metadata (7.5 kB)\r\nCollecting urllib3>=1.24.2 (from kubernetes>=28.1.0->-r requirements.txt (line 8))\r\n  Downloading urllib3-2.2.2-py3-none-any.whl.metadata (6.4 kB)\r\nCollecting deprecated>=1.2.6 (from opentelemetry-api>=1.2.0->-r requirements.txt (line 10))\r\n  Downloading Deprecated-1.2.14-py2.py3-none-any.whl.metadata (5.4 kB)\r\nCollecting importlib-metadata<=8.4.0,>=6.0 (from opentelemetry-api>=1.2.0->-r requirements.txt (line 10))\r\n  Downloading importlib_metadata-8.4.0-py3-none-any.whl.metadata (4.7 kB)\r\nCollecting googleapis-common-protos~=1.52 (from opentelemetry-exporter-otlp-proto-grpc>=1.24.0->-r requirements.txt (line 11))\r\n  Downloading googleapis_common_protos-1.65.0-py2.py3-none-any.whl.metadata (1.5 kB)\r\nCollecting opentelemetry-exporter-otlp-proto-common==1.27.0 (from opentelemetry-exporter-otlp-proto-grpc>=1.24.0->-r requirements.txt (line 11))\r\n  Downloading opentelemetry_exporter_otlp_proto_common-1.27.0-py3-none-any.whl.metadata (1.8 kB)\r\nCollecting opentelemetry-proto==1.27.0 (from opentelemetry-exporter-otlp-proto-grpc>=1.24.0->-r requirements.txt (line 11))\r\n  Downloading opentelemetry_proto-1.27.0-py3-none-any.whl.metadata (2.3 kB)\r\nCollecting protobuf<5.0,>=3.19 (from opentelemetry-proto==1.27.0->opentelemetry-exporter-otlp-proto-grpc>=1.24.0->-r requirements.txt (line 11))\r\n  Downloading protobuf-4.25.4-py3-none-any.whl.metadata (541 bytes)\r\nCollecting opentelemetry-instrumentation-asgi==0.48b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading opentelemetry_instrumentation_asgi-0.48b0-py3-none-any.whl.metadata (2.0 kB)\r\nCollecting opentelemetry-instrumentation==0.48b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading opentelemetry_instrumentation-0.48b0-py3-none-any.whl.metadata (6.1 kB)\r\nCollecting opentelemetry-semantic-conventions==0.48b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading opentelemetry_semantic_conventions-0.48b0-py3-none-any.whl.metadata (2.4 kB)\r\nCollecting opentelemetry-util-http==0.48b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading opentelemetry_util_http-0.48b0-py3-none-any.whl.metadata (2.5 kB)\r\nCollecting setuptools>=16.0 (from opentelemetry-instrumentation==0.48b0->opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Using cached setuptools-74.0.0-py3-none-any.whl.metadata (6.7 kB)\r\nCollecting wrapt<2.0.0,>=1.0.0 (from opentelemetry-instrumentation==0.48b0->opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading wrapt-1.16.0-py3-none-any.whl.metadata (6.6 kB)\r\nCollecting asgiref~=3.0 (from opentelemetry-instrumentation-asgi==0.48b0->opentelemetry-instrumentation-fastapi>=0.41b0->-r requirements.txt (line 12))\r\n  Downloading asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)\r\nCollecting monotonic>=1.5 (from posthog>=2.4.0->-r requirements.txt (line 16))\r\n  Downloading monotonic-1.6-py2.py3-none-any.whl.metadata (1.5 kB)\r\nCollecting backoff>=1.10.0 (from posthog>=2.4.0->-r requirements.txt (line 16))\r\n  Using cached backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\r\nCollecting annotated-types>=0.4.0 (from pydantic>=1.9->-r requirements.txt (line 17))\r\n  Using cached annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)\r\nCollecting pydantic-core==2.20.1 (from pydantic>=1.9->-r requirements.txt (line 17))\r\n  Downloading pydantic_core-2.20.1.tar.gz (388 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Preparing metadata (pyproject.toml) ... error\r\n  error: subprocess-exited-with-error\r\n  \r\n  × Preparing metadata (pyproject.toml) did not run successfully.\r\n  │ exit code: 1\r\n  ╰─> [6 lines of output]\r\n      \r\n      Cargo, the Rust package manager, is not installed or is not on PATH.\r\n      This package requires Rust and Cargo to compile extensions. Install it through\r\n      the system's package manager or via https://rustup.rs/\r\n      \r\n      Checking for Rust toolchain....\r\n      [end of output]\r\n  \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\nerror: metadata-generation-failed\r\n\r\n× Encountered error while generating package metadata.\r\n╰─> See above for output.\r\n\r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.\r\n```\r\n\n\n### Describe the proposed solution\n\nSupport for python 3.13\n\n### Alternatives considered\n\n_No response_\n\n### Importance\n\ni cannot use Chroma without it\n\n### Additional Information\n\n_No response_",
    "state": "closed",
    "created_at": "2024-08-29T06:07:23+00:00",
    "closed_at": "2024-08-31T16:07:11+00:00",
    "updated_at": "2024-08-31T16:07:11+00:00",
    "author": "namogg",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "enhancement",
    "milestone": null,
    "closed_by": "namogg",
    "resolution_time_hours": 57.99666666666667,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-30T12:35:36+00:00",
        "body": "hey @namogg, thanks for bringing this to our attention. I like that you're trying out the no GIL python version `python3.13-nogil`; however we have not yet tested Chroma under py313 as there are probably a bunch of wheels that we rely on that are not available for it.\r\n\r\nIt may take a moment to lift things to support 3.13."
      },
      {
        "author": "namogg",
        "created_at": "2024-08-31T16:07:11+00:00",
        "body": "Thank you, hope to get some respond soon."
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2739"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2733,
    "title": "[Bug]: Self-signed certificates for Chroma client",
    "body": "### What happened?\n\nI have hosted my chroma DB with docker container on my remote machine at some IP, and port. \r\nusing this. \r\n\r\nhttps://cookbook.chromadb.dev/security/chroma-ssl-cert/\r\n\r\nNow I want to create a HTTP client from a different service hosted on a different machine. \r\nI have checked that on browser, I am able to login into that IP and port with https.\r\n\r\nHow can I try connecting with python to the remote hosted chroma server with ssl enabled. \r\n\r\nI have tried creating the http client using, \r\n\r\n```python\r\nimport chromadb\r\nfrom chromadb.config import Settings\r\nchroma_client = chromadb.HttpClient(host = dest_host, port = port, ssl=True,\r\n                                        settings=Settings(\r\n                                            chroma_server_ssl_enabled=True,\r\n                                            chroma_server_ssl_verify=\"./certificates/ssl_cert.pem\",\r\n))\r\n```\r\n\r\nI got the certificate verification failed error. \r\n\r\nIs there some way to resolve this. \n\n### Versions\n\nChroma 0.5.4, Python 3.11\r\n\n\n### Relevant log output\n\n```shell\nConnectError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1006)\n```\n",
    "state": "closed",
    "created_at": "2024-08-28T10:59:56+00:00",
    "closed_at": "2025-01-07T07:54:36+00:00",
    "updated_at": "2025-01-07T07:54:36+00:00",
    "author": "AlokRanjanSwain",
    "author_type": "User",
    "comments_count": 4,
    "reactions_count": 0,
    "labels": "bug,auth",
    "milestone": null,
    "closed_by": "itaismith",
    "resolution_time_hours": 3164.911111111111,
    "first_comments": [
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:56:42+00:00",
        "body": "@tazarov cookbook related, can you PTAL?"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-24T08:59:52+00:00",
        "body": "@AlokRanjanSwain, how have you generated the cert? Did make sure that SAN is present and matches the host or IP of your server?\r\n\r\nCan you check with curl:\r\n\r\n```bash\r\ncurl --cacert ./certificates/ssl_cert.pem https://dest_host:dest_port\r\n```\r\n"
      },
      {
        "author": "AlokRanjanSwain",
        "created_at": "2024-09-24T09:36:17+00:00",
        "body": "I have generated the certificate using openssl like \r\n\r\n```\r\nopenssl req -x509 -newkey rsa:4096 -keyout /app/ssl_certificates/ssl_key.pem -out /app/ssl_certificates/ssl_cert.pem -sha256 -days 3650 -nodes -subj \"/C=IN/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname\"\r\n```\r\nLet me check the SAN. "
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-24T11:48:35+00:00",
        "body": "SAN is really important in modern security practices and most libs/browsers will reject certs that don't specify SAN. I think there was another similar issue. Let me dig it out.\r\n\r\nEDIT: #2447"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2733"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2731,
    "title": "[Bug]: Chroma 0.5.5 not working on intel CPU macbook",
    "body": "### What happened?\n\n```\r\n collection.add(\r\n                        documents=[article[\"content\"] for article in batch],\r\n                        metadatas=[article[\"metadata\"] for article in batch],\r\n                        ids=[f\"{scraper.name}_{j}\" for j in range(i, i + len(batch))]\r\n                    )\r\n```  \n\n### Versions\n\n0.5.5\n\n### Relevant log output\n\n```shell\nError adding batch to collection: [ONNXRuntimeError] : 1 : FAIL : Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nContinuing with next batch...\r\n2024-08-27 17:00:34.030829 [E:onnxruntime:, sequential_executor.cc:516 ExecuteKernel] Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nError adding batch to collection: [ONNXRuntimeError] : 1 : FAIL : Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nContinuing with next batch...\r\n2024-08-27 17:00:34.066881 [E:onnxruntime:, sequential_executor.cc:516 ExecuteKernel] Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nError adding batch to collection: [ONNXRuntimeError] : 1 : FAIL : Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nContinuing with next batch...\r\nError adding batch to collection: [ONNXRuntimeError] : 1 : FAIL : Non-zero status code returned while running CoreML_368072560150139051_1 node. Name:'CoreMLExecutionProvider_CoreML_368072560150139051_1_1' Status Message: Error executing model: Unable to compute the prediction using a neural network model. It can be an invalid input data or broken/unsupported model (error code: -1).\r\nContinuing with next batch...\n```\n",
    "state": "closed",
    "created_at": "2024-08-27T21:02:42+00:00",
    "closed_at": "2024-09-16T01:57:06+00:00",
    "updated_at": "2024-12-21T18:24:51+00:00",
    "author": "allnash",
    "author_type": "User",
    "comments_count": 7,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 460.9066666666667,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-28T07:48:11+00:00",
        "body": "@allnash, can you share your MacOS and CoreML versions:\r\n\r\nTo get macOS from CLI:\r\n\r\n```bash\r\nsw_vers\r\n```\r\n\r\nFor CoreML:\r\n\r\n```bash\r\nplutil -p /System/Library/Frameworks/CoreML.framework/Resources/Info.plist\r\n```"
      },
      {
        "author": "tazarov",
        "created_at": "2024-08-28T10:06:18+00:00",
        "body": "@allnash, can you try this and let me know if it works for you:\r\n\r\n```py\r\nfrom chromadb.utils.embedding_functions.onnx_mini_lm_l6_v2 import ONNXMiniLM_L6_V2\r\nef = ONNXMiniLM_L6_V2(preferred_providers=[\"CPUExecutionProvider\"])\r\n# rest of your code\r\ncollection = client.get_or_create_collection(\"<collection_name\", embedding_function=ef)\r\ncollection.add(\r\n    documents=[article[\"content\"] for article in batch],\r\n    metadatas=[article[\"metadata\"] for article in batch],\r\n    ids=[f\"{scraper.name}_{j}\" for j in range(i, i + len(batch))]\r\n)\r\n```\r\n"
      },
      {
        "author": "Yc-Chen",
        "created_at": "2024-08-30T13:34:24+00:00",
        "body": "I suspect I have encountered the same issue. After using `ONNXMiniLM_L6_V2(preferred_providers=[\"CPUExecutionProvider\"])` it worked.\r\n\r\nMy result of `sw_vers`\r\n```\r\nProductName:            macOS\r\nProductVersion:         13.6.9\r\nBuildVersion:           22G830\r\n```\r\n\r\nand result of CoreML:\r\n```\r\n{\r\n  \"BuildMachineOSBuild\" => \"22A380017\"\r\n  \"CFBundleDevelopmentRegion\" => \"en\"\r\n  \"CFBundleExecutable\" => \"CoreML\"\r\n  \"CFBundleIdentifier\" => \"com.apple.CoreML\"\r\n  \"CFBundleInfoDictionaryVersion\" => \"6.0\"\r\n  \"CFBundleName\" => \"CoreML\"\r\n  \"CFBundlePackageType\" => \"FMWK\"\r\n  \"CFBundleShortVersionString\" => \"1.0\"\r\n  \"CFBundleSupportedPlatforms\" => [\r\n    0 => \"MacOSX\"\r\n  ]\r\n  \"CFBundleVersion\" => \"1436.140.3.0.1\"\r\n  \"DTCompiler\" => \"com.apple.compilers.llvm.clang.1_0\"\r\n  \"DTPlatformBuild\" => \"22G417\"\r\n  \"DTPlatformName\" => \"macosx\"\r\n  \"DTPlatformVersion\" => \"13.6\"\r\n  \"DTSDKBuild\" => \"22G417\"\r\n  \"DTSDKName\" => \"macosx13.6.internal\"\r\n  \"DTXcode\" => \"1430\"\r\n  \"DTXcodeBuild\" => \"14E6097d\"\r\n  \"LSMinimumSystemVersion\" => \"13.6\"\r\n}\r\n```\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-06T14:23:09+00:00",
        "body": "@allnash, did using `CPUExecutionProvider` provider solve your issue too?"
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:57:06+00:00",
        "body": "closing this, but @allnash would love to know the resolution! "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2731"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2730,
    "title": "Doubts on ChromaDB client_settings",
    "body": "I tried to implement the persistent client using Langchain with duckdb+parquet as the format, but faced deprecated error. Is really duckdb+parquet format removed? If so why. \r\n(PS: Suggest to enable discussion tab in the repository in addition to discord)",
    "state": "closed",
    "created_at": "2024-08-27T04:55:39+00:00",
    "closed_at": "2024-09-16T01:57:28+00:00",
    "updated_at": "2024-10-15T10:00:11+00:00",
    "author": "Darrshan-Sankar",
    "author_type": "User",
    "comments_count": 6,
    "reactions_count": 0,
    "labels": "",
    "milestone": null,
    "closed_by": "jeffchuber",
    "resolution_time_hours": 477.03027777777777,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-27T13:01:52+00:00",
        "body": "@Darrshan-Sankar, duckdb+parquet has been deprecated and removed since `0.4.0` and it is unlikely to returned. Currently, Chroma relies on sqlite3 for metadata storage."
      },
      {
        "author": "Darrshan-Sankar",
        "created_at": "2024-08-27T13:13:35+00:00",
        "body": "> @Darrshan-Sankar, duckdb+parquet has been deprecated and removed since `0.4.0` and it is unlikely to returned. Currently, Chroma relies on sqlite3 for metadata storage.\n\n@tazarov Thanks for your clarification. Any room for PR: 'https://github.com/chroma-core/chroma/pull/2694' ?"
      },
      {
        "author": "ansheshwar",
        "created_at": "2024-09-10T07:05:47+00:00",
        "body": "> @Darrshan-Sankar, duckdb+parquet has been deprecated and removed since `0.4.0` and it is unlikely to returned. Currently, Chroma relies on sqlite3 for metadata storage.\r\n\r\n\r\n\r\n@tazarov But , if i want to store in no-sql format instead of sql then how will it can be done?\r\n\r\n"
      },
      {
        "author": "tazarov",
        "created_at": "2024-09-11T14:08:41+00:00",
        "body": "@Darrshan-Sankar, unfortunately single-node Chroma has only sqlite3 impl for metadata and system database. Adding support for other storage engines is not currently on the roadmap.\r\n\r\nRegarding #2694, let me look into it."
      },
      {
        "author": "jeffchuber",
        "created_at": "2024-09-16T01:57:28+00:00",
        "body": "closing this as the question was resolved "
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2730"
  },
  {
    "repository": "chroma-core/chroma",
    "issue_number": 2725,
    "title": "[Bug]: Connection to us.i.posthog.com timed out.",
    "body": "### What happened?\n\n\r\n![53AAB58E-293F-4E2B-9F5A-ABB659D7CB6A](https://github.com/user-attachments/assets/93df374b-5c2a-4687-a179-03033ced424f)\r\n\r\nA bug occurs when I use the following code:\r\nclient = chromadb.Client()\r\ncollection = self.client.get_or_create_collection(\r\n            name=vectorstore_name, metadata={\"hnsw:space\": distance}\r\n        )\r\nbatch_size = 10240\r\n_iter = range(0, len(texts), batch_size)\r\nfor i in _iter:\r\n    a = self.client.heartbeat() # returns a nanosecond heartbeat. Useful for making sure the client remains connected.\r\n    collection.add(\r\n        embeddings=embeddings[i : i + batch_size],\r\n        documents=texts[i : i + batch_size],\r\n        metadatas=metadatas[i : i + batch_size],\r\n        ids=ids[i : i + batch_size],\r\n    )\r\ncollection.query(\r\n            text=text,\r\n            top_k=top_k,\r\n            where_metadata=where_metadata,\r\n            where_content=where_content,\r\n        )\r\n\r\n\r\n\n\n### Versions\n\nChromadb              0.4.24\r\nchroma-hnswlib                           0.7.3\r\npython 3.8.19\r\nlinux\n\n### Relevant log output\n\n_No response_",
    "state": "closed",
    "created_at": "2024-08-26T13:36:57+00:00",
    "closed_at": "2024-08-27T01:36:04+00:00",
    "updated_at": "2024-08-27T01:36:04+00:00",
    "author": "meu98",
    "author_type": "User",
    "comments_count": 2,
    "reactions_count": 0,
    "labels": "bug",
    "milestone": null,
    "closed_by": "meu98",
    "resolution_time_hours": 11.985277777777778,
    "first_comments": [
      {
        "author": "tazarov",
        "created_at": "2024-08-26T13:43:21+00:00",
        "body": "@meu98, thanks for reporting this. Chroma has product telemetry enabled by default so that the team can make informed decisions about future features or address developers' challenges with the product. The telemetry is an opt-out feature (meaning you need to explicitly disable it). To disable the telemetry and avoid getting the warnings in your screenshot you can do the following:\r\n\r\n\r\n```py\r\nimport chromadb\r\nfrom chromadb import Settings\r\n\r\nclient = chromadb.Client(settings=Settings(anonymized_telemetry=False))\r\n```"
      },
      {
        "author": "meu98",
        "created_at": "2024-08-27T01:36:04+00:00",
        "body": "Okay, it's settled. Thank you！"
      }
    ],
    "url": "https://github.com/chroma-core/chroma/issues/2725"
  }
]